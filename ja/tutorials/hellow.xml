<?xml version="1.0" encoding="UTF-8" ?>
 <chapter id="tutorials.hellow">
  <title>Hello World チュートリアル</title>
  <simpara>
   プログラミング言語を習い始める時、最初のプログラムとしては、しばし
   ば、'hello world'プログラムを書くことになります。そこで、慣例に習い、
   このマニュアルの最初のチュートリアルでも'hello world'チュートリアル
   を行います!
  </simpara>
  <simpara>
   このチュートリアルでは、PHP自体に関してある程度理解していることを前
   堤とします。チュートリアルは、ユーザにPHP-GTKそして、その背後にある
   考え方と技術の使用方法に関するアイデアを与えることです。
  </simpara>
  <simpara>
   このチュートリアルでは、シンプルなウインドウをを作成し、"Hello
   World!"と表示します。
  </simpara>
  <simpara>
   まず、プログラムリストを示してから、プログラムの各行について説明し、
   PHP-GTKアプリケーションの基礎の基礎について概要を示します。
  </simpara>
  <para>
   <example>
    <title>PHP-GTK Hello Worldプログラムのリスト</title>
   <programlisting role="php">
<![CDATA[
<?php

if (!class_exists('gtk')) {
    if (strtoupper(substr(PHP_OS, 0,3) == 'WIN'))
    dl('php_gtk.dll');
  else
    dl('php_gtk.so');
}

function delete_event()
{
    return false;
}

function shutdown()
{
    print("Shutting down...\n");
    gtk::main_quit();
}

function hello()
{
    global $window;
    print "Hello World!\n";
    $window->destroy();
}

$window = &new GtkWindow();
$window->connect('destroy', 'shutdown');
$window->connect('delete-event', 'delete_event');
$window->set_border_width(10);

$button = &new GtkButton('Hello World!');
$button->connect('clicked', 'hello');
$window->add($button);

$window->show_all();

gtk::main();

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>PHP-GTKをロードする</title>
    <programlisting role="php">
<![CDATA[
<?php

if (!class_exists('gtk')) {
    if (strtoupper(substr(PHP_OS, 0,3) == 'WIN'))
    dl('php_gtk.dll');
 else
    dl('php_gtk.so');
}

?>
]]>
    </programlisting>
   </example>
   最初の数行では、PHP-GTK拡張モジュールが利用可能かどうかのチェックを
   行い、利用可能でない場合にはロードします。これは、それぞれ、
   Windows及びLinuxにおいて、
   <literal>dl('php_gtk.dll');</literal>または
   <literal>dl('php_gtk.so');</literal>命令により行われます。
  </para>
  <para>
   <example>
    <title>delete_event() 関数</title>
    <programlisting role="php">
<![CDATA[
<?php

function delete_event()
{
    return false;
}

?>
]]>
    </programlisting>
   </example>
   <literal>delete_event()</literal>関数は、
   <signalname>delete-event</signalname>シグナルのハンドラ(以下を参照)
   として登録されます。この関数は、<literal>false</literal>を返し、
   PHP-GTKにこのイベントのデフォルトのシグナルハンドラを破棄するよう通
   知します。この場合、デフォルトのシグナルハンドラは、
   <function class="GtkObject">destroy()</function>メソッドです。
   この関数が<literal>true</literal>を返した場合、PHP-GTKはここでデフォ
   ルトのシグナルハンドラの実行を中断する可能性があります。
   例えば、ユーザがアプリケーションを閉じようとする際に確認を行うダイ
   アログボックスを表示するといったように、<function
   class="GtkObject">destroy()</function>の代わりとなるユーザ定義関数
   を書く必要がある場合には、知っておくと良いでしょう。
  </para>
  <simpara>
   <signalname>delete-event</signalname>シグナルを
   <function class="GtkObject">destroy()</function>メソッドに接続する
   ためには、必ずしも<literal>false</literal>を返す必要はありません。
   これは、この特別なシグナルがデフォルトで<literal>false</literal>を
   返すためです。<signalname>destroy</signalname>シグナルが正しく処理
   される限り、あるウインドウの<signalname>delete-event</signalname>
   シグナルについて全く動作を指定しないことも可能です。
  </simpara>
  <para>
   <example>
    <title>shutdown() 関数</title>
   <programlisting role="php">
<![CDATA[
<?php

function shutdown()
{
    print("Shutting down...\n");
    gtk::main_quit();
}

?>
]]>
    </programlisting>
   </example>
   <literal>shutdown()</literal>関数は、
   <signalname>destroy</signalname>シグナルのハンドラとして登録されま
   す。この関数は、コンソールに<literal>&quot;Shutting
   down...\n&quot;</literal>と出力し、この後、静的な関数
   <function>gtk::main_quit()</function>をコールします。
  </para>
  <para>
   <example>
    <title>hello()関数</title>
   <programlisting role="php">
<![CDATA[
<?php

function hello()
{
    global $window;
    print "Hello World!\n";
    $window->destroy();
}

?>
]]>
    </programlisting>
   </example>
   <literal>hello()</literal>関数が、ボタンの
   <signalname>clicked</signalname>シグナルに関するハンドラとして登録
   されています。この関数は、変数<literal>$window</literal>をグローバ
   ル変数としています。これは、この後のスクリプトコードで作成した、
   <classname>GtkWindow</classname> のインスタンスにアクセスできるよう
   にするためです。そして、コンソールにテキスト<literal>&quot;Hello
   World&quot;</literal>を出力した後、ウインドウで<function
   class="GtkObject">destroy()</function>メソッドをコールします。これ
   は、<signalname>destroy</signalname>シグナルを発生し、このシグナル
   は、<literal>shutdown()</literal>関数をコールします。
  </para>
  <simpara>
   <literal>hello()</literal>関数が<literal>$window</literal>変数にア
   クセスできるようにするための他の方法は、
   <link linkend="signals.custom.params">カスタムパラメータ</link>
   として変数を渡すことです。
  </simpara>
  <para>
   <example>
    <title>ウインドウを設定する</title>
   <programlisting role="php">
<![CDATA[
<?php

$window = &new GtkWindow();
$window->connect('destroy', 'shutdown');
$window->connect('delete-event', 'delete_event');
$window->set_border_width(10);

?>
]]>
    </programlisting>
   </example>
   次の4行でウインドウ自体を設定します。まず、
   <classname>GtkWindow</classname>のインスタンスを生成します。
   これに成功した後、<signalname>destroy</signalname> シグナルのハンド
   ラとして<literal>shutdown()</literal>関数、
   <signalname>delete-event</signalname>シグナルのハンドラとして、
   <literal>delete_event()</literal>関数を登録するために、
   ウインドウから<function class="GtkObject">connect()</function>
   メソッドをコールします。最後に、
   <function class="GtkContainer">set_border_width()</function>関数を
   コールし、作成した<classname>GtkWindow</classname>のインスタンスに
   10ピクセル幅の境界線を設定します。
  </para>
  <para>
   <example>
    <title>ボタンを設定する</title>
   <programlisting role="php">
<![CDATA[
<?php

$button = &new GtkButton('Hello World!');
$button->connect('clicked', 'hello');
$window->add($button);

$window->show_all();

?>
]]>
    </programlisting>
   </example>
   このスクリプトの3行のコードは、ボタンを生成し、設定します。
   上のコードの最初の行では、<classname>GtkButton</classname>ウイジェッ
   トの新規インスタンスを生成します。コンストラクタへの引数は、ボタン
   に表示したいテキストです。この場合のテキストは、
   <literal>&quot;Hello World!&quot;</literal>です。この後、
   <signalname>clicked</signalname>シグナルのハンドラとして前に定義し
   た<literal>hello()</literal>関数を登録するために
   <function class="GtkObject">connect()</function>メソッドをコールし
   ます。最後に、<literal>$window</literal>に含まれる
   <classname>GtkContainer</classname>のメソッド
   <function class="GtkContainer">add()</function>をコールすることによ
   り、前に作成したウインドウにボタンを追加します。
   この後、<literal>$window</literal>に含まれるものを全て(そして、子ウ
   イジェットの<literal>$button</literal>)
   <function class="GtkWidget">show_all()</function>メソッ
   ドをコールすることにより、そして、
   <classname>GtkWindow</classname>のインスタンスから表示します。
  </para>
  <para>
   <example>
    <title>gtk::mainをコールする</title>
   <programlisting role="php">
<![CDATA[
<?php

gtk::main();

?>
]]>
    </programlisting>
   </example>
   スクリプトの最後の行では、static関数
   gtk::<function>main()</function>をコールします。これは、インターフェ
   イスの設定が終了したことと、前に定義したコールバック関数がコールさ
   れ、様々なアクションを行うためのユーザの相互作用により発生するイベ
   ントを監視するメインループを開始することができることを通知します。
  </para>
 </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
