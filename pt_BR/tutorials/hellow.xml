<?xml version="1.0" encoding="ISO-8859-1" ?>
<chapter id="tutorials.hellow">
 <title>Tutorial do Olá Mundo</title>
 <simpara>
  Quando você está começando à aprender uma linguage de programação, 
  o primeiro programa que você escreve é o famoso 'olá mundo'. Então, 
  apenas para não sermos do contra, o primeiro tutorial neste manual 
  será um tutorial do 'olá mundo'!
 </simpara>
 <simpara>
  Durante todos os tutorials nós esperamos que você sinta-se como se 
  estive-se programando em PHP. Os tutoriais são projetados para dar 
  ao usuário uma idéia de como usar o PHP-GTK, e as idéias e técnicas 
  por trás dele.
 </simpara>
 <simpara>
  Neste tutorial você irá criar uma simples janela com o texto "Olá Mundo!" 
  dentro dela.
 </simpara>
 <simpara>
  Nós começaremos mostrando o programa e depois iremos explicar cada linha 
  do programa, dando uma idéia geral sobre uma aplicação bem básica em PHP-GTK.
 </simpara>
 <para>
  <example>
   <title>Código do programa Olá Mundo em PHP-GTK</title>
   <programlisting role="php">
<![CDATA[
<?php

if (!class_exists('gtk')) {
    if (strtoupper(substr(PHP_OS, 0,3) == 'WIN'))
    dl('php_gtk.dll');
  else
    dl('php_gtk.so');
}

function deletar_evento()
{
    return false;
}

function desligar()
{
    print("Desligando...\n");
    gtk::main_quit();
}

function ola()
{
    global $janela;
    print "Olá Mundo";
    $janela->destroy();
}

$janela = &new GtkWindow();
$janela->connect('destroy', 'desligar');
$janela->connect('delete-event', 'deletar_evento');
$janela->set_border_width(10);

$botao = &new GtkButton('Olá Mundo!');
$botao->connect('clicked', 'hello');
$janela->add($botao);

$janela->show_all();

gtk::main();

?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Carregando o PHP-GTK</title>
   <programlisting role="php">
<![CDATA[
<?php

if (!class_exists('gtk')) {
    if (strtoupper(substr(PHP_OS, 0,3) == 'WIN'))
    dl('php_gtk.dll');
 else
    dl('php_gtk.so');
}

?>
]]>
   </programlisting>
  </example>
  Estas primeiras linhas fazem a checagem para ver se a extensão do 
  PHP-GTK já está disponível para uso, caso não ela é carregada. Isto 
  é feito usando os comandos <literal>dl('php_gtk.dll');</literal> ou
  <literal>dl('php_gtk.so');</literal> no Windows e Linux respectivamente.
 </para>
 <para>
  <example>
   <title>A função deletar_evento()</title>
   <programlisting role="php">
<![CDATA[
<?php

function deletar_evento()
{
    return false;
}

?>
]]>
   </programlisting>
  </example>
  A função <literal>deletar_evento()</literal> é registrada como sendo um 
  evento (veja abaixo) do sinal <signalname>delete-event</signalname>. Ela 
  retorna <literal>false</literal>, dizendo ao PHP-GTK para disparar 
  o alimentador para os eventos padrões de sinais, o que nesse caso é o 
  método <function class="GtkObject">destroy</function>. Se a função retornar 
  <literal>true</literal>, o PHP-GTK pararia o alimentador padrão para 
  os eventos de sinais que estive-se rodando no momento. É bom saber isto 
  se você precisa escrever uma função definida pelo usuário para substituir 
  a função <function class="GtkObject">destroy</function> - por exemplo, 
  para produzir uma caixa de diálogo de confirmação onde o usuário pretende 
  fechar um aplicativo.
 </para>
 <simpara>
  Não é estritamente necessário que o retorno seja <literal>false</literal> 
  para conectar o sinal <signalname>delete-event</signalname> ao método 
  <function class="GtkObject">destroy</function>. É possível não especificar 
  nenhum comportamento para os sinais <signalname>delete-event</signalname> 
  de todas as janelas, desde que o evento de sinal do <signalname>destroy</signalname> 
  seja tratado corretamente, como está sendo feito aqui.
 </simpara>
 <para>
  <example>
   <title>A função desligar()</title>
   <programlisting role="php">
<![CDATA[
<?php

function desligar()
{
    print("Desligando...\n");
    gtk::main_quit();
}

?>
]]>
   </programlisting>
  </example>
  A função <literal>desligar()</literal> é registrada como sendo um evento para 
  o sinal <signalname>destroy</signalname>. A função imprime o texto 
  <literal>&quot;Desligando...\n&quot;</literal> para o console e depois chama 
  a função estática <function>gtk::main_quit</function>.
 </para>
 <para>
  <example>
   <title>A função ola()</title>
   <programlisting role="php">
<![CDATA[
<?php

function ola()
{
    global $janela;
    print "Olá Mundo!\n";
    $janela->destroy();
}

?>
]]>
   </programlisting>
  </example>
  A função <literal>ola()</literal> é registrada como sendo um evento para o 
  sinal <signalname>clicked</signalname> do botão. Ela torna global a variável 
  <literal>$janela</literal> sendo assim ela pode ser acessada como sendo uma 
  instância da classe <classname>GtkWindow</classname> criada mais abaixo no 
  script. Ela então imprime o texto <literal>&quot;Olá Mundo!&quot;</literal> 
  para o console antes de chamar o método <function class="GtkObject">destroy</function> 
  da janela, o qual dispara o sinal <signalname>destroy</signalname>, que depois 
  chama a função <literal>shutdown()</literal>.
 </para>
 <simpara>
  Uma outra maneira da função <literal>ola()</literal> acessar a variável 
  <literal>$janela</literal> é se a variável fosse passada como um 
  <link linkend="signals.custom.params">parâmetro personalizado</link>.
 </simpara>
 <para>
  <example>
   <title>Configurando a Janela</title>
   <programlisting role="php">
<![CDATA[
<?php

$janela = &new GtkWindow();
$janela->connect('destroy', 'desligar');
$janela->connect('delete-event', 'deletar_evento');
$janela->set_border_width(10);

?>
]]>
   </programlisting>
  </example>
  As quatro linhas seguintes configuram a janela. Primeiramente n´so criamos 
  uma instânica da classe <classname>GtkWindow</classname>. Uma vez criada 
  com sucesso, nós chamamos o método <function class="GtkObject">connect</function> 
  da janela para que possamos registrar a função <literal>desligar()</literal> 
  como sendo um evento do sinal <signalname>destroy</signalname> e a a 
  função <literal>deletar_evento()</literal> como sendo um evento do 
  sinal <signalname>delete-event</signalname>. Finalmente, nós chamamos 
  o método <function class="GtkContainer">set_border_width</function> 
  para configurar a janela com uma bordar de 10-pixels na instância da classe 
  <classname>GtkWindow</classname> que nós havíamos criamos.
 </para>
 <para>
  <example>
   <title>Configurando o Botão</title>
   <programlisting role="php">
<![CDATA[
<?php

$botao = &new GtkButton('Olá Mundo!');
$botao->connect('clicked', 'ola');
$janela->add($botao);

$janela->show_all();

?>
]]>
   </programlisting>
  </example>
  Estas três linhas criam e configuram um botão. A primeira linha do código acima 
  faz com que criemos uma instância da classe <classname>GtkButton</classname>. 
  O argumento passado para o construtor é o texto que queremos mostrar na tela - 
  no caso <literal>&quot;Olá Mundo!&quot;</literal>. Nós então chamamos o método 
  <function class="GtkObject">connect</function> para registrar a função 
  <literal>ola()</literal> que definimos anteriormente, como sendo um evento 
  do sinal <signalname>clicked</signalname>. Finalmente nós adicionamos o botão para a
  janela que nós criamos anteriormente chamando o método <function class="GtkContainer">add</function> 
  da classe <classname>GtkContainer</classname> que está em <literal>$janela</literal>, e depois 
  mostramos tudo que está em <literal>$janela</literal> chamando o método 
  <function class="GtkWidget">show_all</function>, que também é uma instância de nossa 
  classe <classname>GtkWindow</classname>.
 </para>
 <para>
  <example>
   <title>A chamada ao gtk::main</title>
   <programlisting role="php">
<![CDATA[
<?php

gtk::main();

?>
]]>
   </programlisting>
  </example>
  A última linha do script chama a função estática gtk::<function>main</function>. 
  Isto diz ao PHP-GTK que nós finalizamos nossa interface, e que o loop principal 
  pode ser iniciado para que os eventos disparados pelo usuário interajam 
  com as nossas funções callback (ola(), desligar(), etc.) que definimos no script, 
  e também com que várias ações sejam realizadas.
 </para>
</chapter>
