<?xml version="1.0" encoding="ISO-8859-1" ?>
<chapter id="widgets">
 <title>Widgets et Conteneurs</title>
 <sect1 id="widgets.intro"></sect1>

 <sect1 id="widgets.whatare">
  <title>Qu'est qu'un Widget?</title>
  <simpara>
   <literal>widget</literal> est un terme utilisé dans le monde de
   programmation d'interface graphique. Un widget peut être un champ
   de saisie de texte, un label, un cadre, une fenêtre ou tout autre
   composant graphique. Les widgets de GTK hérite de l'objet 
   <classname>GtkWidget</classname> et donc ainsi de ses méthodes, 
   signaux et propriétés.
  </simpara>
  <simpara>
   Le cycle de vie d'un widget contient 5 parties:
  </simpara>
  <para>
   <orderedlist>
    <listitem>
     <simpara>Création</simpara>
     <simpara>
      La création d'un widget correspond à la création
      d'un objet. 
      <literal>$window = &amp;new GtkWindow();</literal>
     </simpara>
    </listitem>
    <listitem>
     <simpara>Positionnement</simpara>
     <simpara>
      Le positionnement consiste à accrocher un widget à un conteneur 
      <link linkend="containers.whatare">conteneur</link>. La syntaxe
      pour positionner un widget sur un conteneur est la suivante 
      <literal>$container-&gt;add($widget);</literal>
     </simpara>
    </listitem>
    <listitem>
     <simpara>Gestion des Signaux</simpara>
     <simpara>
      Cette partie consiste à associer une fonction PHP à un
      signal événement, cette fonction sera appelée par
      la suite lorsque l'événement sera relevé sur le
      widget. Par exemple:
      <literal>
       $widget-&gt;connect(&quot;event&quot;, &quot;my_focus_func&quot;);
      </literal>,
      Dans ce cas &quot;event&quot; est défini par défaut
      comme étant un 
      <signalname>clicked</signalname> et &quot;my_focus_func&quot; est la
      fonction sera appelée quand vous clickerais sur ce widget.
     </simpara>
    </listitem>
    <listitem>
     <simpara>Affichage</simpara>
     <simpara>
      Le widget peut être caché ou visible pour l'utilisateur.
      Par exemple, vous pouvez afficher le widget en faisant: 
      <literal>$widget-&gt;show();</literal> et par la suite le cacher 
      <literal>$widget-&gt;hide();</literal>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>Destruction</simpara>
     <simpara>
      La destruction se produit durant l'appel à la fonction 
      <literal>gtk::main_quit()</literal>.  Toutes les autres actions
      nécessaires à la destruction de tous les widgets ont
      été implementés en interne, vous n'avez pas à vous en
      soucier.
     </simpara>
    </listitem>
   </orderedlist>
  </para>
 </sect1>

 <sect1 id="containers.whatare">
  <title>Qu'est ce qu'un Conteneur ?</title>
  <simpara>
   Un conteneur est simplement un 
   <link linkend="widgets.whatare">widget</link> qui est capable de
   contenir d'autres widgets. La plupart des widgets sont aussi des
   conteneurs; par exemple <classname>GtkWindow</classname>, 
   <classname>GtkTable</classname> et <classname>GtkBox</classname>. Mise
   à part cette propriété les conteneurs sont avant
   tout des widgets et ils peuvent aussi être attaché à
   d'autres conteneurs. Les conteneurs héritent de l'objet 
   <classname>GtkContainer</classname> qui lui-même hérite de
   l'objet <classname>GtkWidget</classname>.
  </simpara>
 </sect1>

</chapter>
