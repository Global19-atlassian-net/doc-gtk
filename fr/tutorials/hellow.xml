<?xml version="1.0" encoding="ISO-8859-1" ?>
<chapter id="tutorials.hellow">
 <title>Tutoriel Hello World</title>
 <simpara>
  Lorsque vous découvrez un nouveau langage, le premier programme que
  vous ecrivez est sans aucun doute le fameux 'hello world'. Donc,
  pour ne pas perdre les bonne habitude, le premier tuotriel de ce 
  manuel va vous montrer comme écrire 'hello world'.
 </simpara>
 <simpara>
  Dans ce tutoriel, nous considérons que vous connaissez déjà PHP.
  Ce toturiel permet de donner à l'utilisateur une approche sur la 
  facon d'utiliser PHP-GTK, et ainsi de découvrir les différents 
  concepts.
 </simpara>
 <simpara>
  Le but de ce programme est de créer un simple fenêtre avec 
  l'inscription "Hello World!".
 </simpara>
 <simpara>
  D'abord nous allons vous montrer le source du programme et ensuite 
  commenter chacune des instructions pour donner une vision globale
  d'une application PHP-GTK simple.
 </simpara>
 <para>
  <example>
   <title>Source du programme Hello World en PHP-GTK</title>
   <programlisting role="php">
if (!class_exists('gtk')) {
    if (strtoupper(substr(PHP_OS, 0,3) == 'WIN'))
    dl('php_gtk.dll');
  else
    dl('php_gtk.so');
}
    
function delete_event()
{
    return false;
}
    
function shutdown()
{
    print(&quot;Shutting down...\n&quot;);
    gtk::main_quit();
}
    
function hello()
{
    global $window;
    print &quot;Hello World!\n&quot;;
    $window-&gt;destroy();
}
    
$window = &amp;new GtkWindow();
$window-&gt;connect('destroy', 'shutdown');
$window-&gt;connect('delete-event', 'delete_event');
$window-&gt;set_border_width(10);
    
$button = &amp;new GtkButton('Hello World!');
$button-&gt;connect('clicked', 'hello');
$window-&gt;add($button);
    
$window-&gt;show_all();
    
gtk::main();
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Chargement de l'extension PHP-GTK</title>
   <programlisting role="php">
if (!class_exists('gtk')) {
    if (strtoupper(substr(PHP_OS, 0,3) == 'WIN'))
    dl('php_gtk.dll');
 else
    dl('php_gtk.so');
}
   </programlisting>
  </example>
  les premières lignes permettent de verifier si l'extension PHP-GTK est
  déjà chargés et de la chargés si elle ne l'est pas. par l'intermédiaire
  de la commande
  <literal>dl('php_gtk.dll');</literal> ou
  <literal>dl('php_gtk.so');</literal> respectivement sous windows ou sous
  linux.
 </para>
 <para>
  <example>
   <title>la fonction delete_event()</title>
   <programlisting role="php">
function delete_event()
{
    return false;
}
   </programlisting>
  </example>
  la fonction <literal>delete_event()</literal> est enregistré comme 
  fonction événement pour le signal <signalname>delete-event</signalname>.
  elle renvoit <literal>false</literal>, et indique ainsi à PHP-GTK d'envoyer
  l'événement par défaut, dans ce cas c'est la methode
  <function class="GtkObject">destroy()</function> method. Si cette fonction
  renvoit <literal>true</literal>, PHP-GTK aurait stopper le signal a ce 
  point. cela est utile si vous voulez écrire une fonction qui remplace
  la fonction <function class="GtkObject">destroy()</function>  - par exemple
  pour faire apparaitre une boite de dialogue et demandé la confirmation de
  le fermeture d'une application (ie. la fenetre principale).
 </para>
 <simpara>
  il n'est pas nécessaire de renvoyer <literal>false</literal> pour connecter
  le signal <signalname>delete-event</signalname> à la méthode 
  <function class="GtkObject">destroy()</function>, car par défaut la 
  fonction renvoie <literal>false</literal>. il est possible de ne spécifier
  aucune propriétés du signal <signalname>delete-event</signalname>, 
  tant que le signal <signalname>destroy</signalname> est utilisé 
  d'une manière correcte, comme ici.
 </simpara>
 <para>
  <example>
   <title>la function shutdown()</title>
   <programlisting role="php">
function shutdown()
{
    print(&quot;Shutting down...\n&quot;);
    gtk::main_quit();
}
   </programlisting>
  </example>
  la fonction <literal>shutdown()</literal> est enregistré entraineur pour 
  le signal <signalname>destroy</signalname> signal. la fonction imprime 
  sur la console le texte <literal>&quot;Shutting down...\n&quot;</literal>
  et appelle la fonction statique <function>gtk::main_quit()</function>.
 </para>
 <para>
  <example>
   <title>la fonction hello()</title>
   <programlisting role="php">
function hello()
{
    global $window;
    print &quot;Hello World!\n&quot;;
    $window-&gt;destroy();
}
   </programlisting>
  </example>
  la fonction <literal>hello()</literal> est enregsitré comme entraineur
  pour le signal <signalname>clicked</signalname> sur le bouton. on déclare
  <literal>$window</literal> en variable global pour pouvoir accéder à
  l'objet <classname>GtkWindow</classname> crée plus abs le script.  
  Ensuite il imprime sur le console 
  <literal>&quot;Hello World&quot;</literal> avant d'appeler la méthode
  <function class="GtkObject">destroy()</function> sur la fenetre, et ainsi
  appeler la fonction <literal>shutdown()</literal>.
 </para>
 <simpara>
  Une autre façon pour pourvoir accéder à l'objet <literal>$window</literal>
  dans la fonction <literal>hello()</literal> est d'utiliser les paramêtres
  <link linkend="signals.custom.params">personalisés</link>.
 </simpara>
 <para>
  <example>
   <title>Créer la fenêtre</title>
   <programlisting role="php">
$window = &amp;new GtkWindow();
$window-&gt;connect('destroy', 'shutdown');
$window-&gt;connect('delete-event', 'delete_event');
$window-&gt;set_border_width(10);
   </programlisting>
  </example>
  Les quatres lignes suivantes crée la fenêtre. Premièrement, il faut créer
  un objet <classname>GtkWindow</classname>. Une fois l'objet crée avec
  succés, nous appelons la méthode 
  <function class="GtkObject">connect()</function> 
  de le fenêtre pour enregistrer la fonction <literal>shutdown()</literal>
  comme entraîneur pour le signal <signalname>destroy</signalname> et la  
  fonction <literal>delete_event()</literal> comme entraîneur du signal
  <signalname>delete-event</signalname>. Ensuite, il faut appeler la fonction
  <function class="GtkContainer">set_border_width()</function> pour régler 
  la bordure de 10 pixels de large sur l'objet 
  <classname>GtkWindow</classname> qui a été créé précédement.
 </para>
 <para>
  <example>
   <title>Ajouter un bouton</title>
   <programlisting role="php">      
$button = &amp;new GtkButton('Hello World!');
$button-&gt;connect('clicked', 'hello');
$window-&gt;add($button);

$window-&gt;show_all();
   </programlisting>
  </example>
  Les trois lignes précédentes créent et configurent le bouton. Dans la 
  première ligne du script, nous créons un widget 
  <classname>GtkButton</classname>. l'argument du constructeur est le texte
  qui va etre afficher sur le bouton - dans notre cas 
  <literal>&quot;Hello World!&quot;</literal>. Ensuite nous appelons la 
  méthode <function class="GtkObject">connect()</function> pour enregister
  la fonction <literal>hello()</literal> definit précédement, comme 
  entraîneur pour le signal <signalname>clicked</signalname>. Dernièrement,
  nous ajoutons le bouton sur la fenêtre par l'intermédiaire en appelant la
  méthode <function class="GtkContainer">add()</function> de l'objet 
  <classname>GtkContainer</classname> pour l'instance
  <literal>$window</literal>, et ensuite afficher tout ce qui est contenu
  dans <literal>$window</literal> (et dans les fils,
  <literal>$button</literal>) en appelant la méthode 
  <function class="GtkWidget">show_all()</function>.
 </para>
 <para>
  <example>
   <title>l'appel de gtk::main</title>
   <programlisting role="php">
gtk::main();
   </programlisting>
  </example>
  La dernière ligne appelle la fonction statique
  gtk::<function>main()</function> function.  Cela indique à PHP-GTK que nous
  avons terminé la construction de l'interface, et donc la boucle principale
  peut démarrer et ainsi ecouter les événements générés par les interactions
  et exéctuer les rappels correspondants.
 </para>
</chapter>

<!--

 * Local variables:
 * tab-width: 1
 * c-basic-offset: 1
 * End:
 * vim600: et sw=1 ts=1 tw=78 fdm=marker
 * vim<600: et sw=1 ts=1 tw=78
-->

