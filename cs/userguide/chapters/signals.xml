<?xml version="1.0" encoding="ISO-8859-2" ?>
<chapter id="signals">
 <title>Signály a volání</title>

 <sect1 id="signals.whatare">
  <title>Co jsou signály?</title>
  <simpara>
   <emphasis>Signály jsou upozornìní, která vycházející z
   <link linkend="widgets.whatare">widgetù</link>.</emphasis>
  </simpara>
  <simpara>
   Pøi programování grafických u¾ivatelských rozhraní
   (<acronym>GUI</acronym>) je èasto nutné reagovat na akce provádìné
   u¾ivatelem nebo samotným programem. <acronym>GNOME</acronym> a
   <acronym>GTK+</acronym> to øe¹í pomocí signálù. Signály programu øíkají,
   ¾e do¹lo k nìjaké události. Kupøíkladu kdy¾ u¾ivatel klikne na
   <classname>GtkButton</classname> nebo zmìní hodnotu
   <classname>GtkAdjustment</classname>.
  </simpara>
  <simpara>
   Program mù¾e napøíklad zaøídit, aby <classname>GtkAdjustment</classname>
   vyslal signál <signalname>value-changed</signalname>, zmìní-li se nìkterá
   z hodnot. Tento konkrétní signál se ve tøídì
   <classname>GtkAdjustment</classname> pou¾ívá internì i externì, tak¾e
   není v¾dy nutné jej zapisovat do programu, chcete-li pou¾ít napø.
   <classname>GtkProgressBar</classname>. Jasnìj¹í situace nastane, kdy¾
   u¾ivatel klikne na <classname>GtkButton</classname>, èím¾ widget vy¹le
   signál <signalname>clicked</signalname>. Jako programátor nastavíte
   <link linkend="callbacks.whatare">volání</link>, které na tento
   signál zareaguje.
  </simpara>
 </sect1>

 <sect1 id="callbacks.whatare">
  <title>Co je volání?</title>
  <simpara>
   <emphasis>
    Volání je funkce aktivovaná 
    <link linkend="signals.whatare">signálem</link> nìjakého
    <link linkend="widgets.whatare">widgetu</link>.
   </emphasis>
  </simpara>
  <simpara>
   Volání je funkce, kterou programátor pøiøadí k urèitému signálu. Která
   funkce má reagovat na signál, urèíte
   <link linkend="signals.connection">pøipojením</link> funkce k
   signálu.
  </simpara>
  <simpara>
   Volání se také nazývá obslu¾ná funkce signálu. Mù¾e to být buï
   <literal>standardní obslu¾ná funkce</literal> nebo <literal>u¾ivatelem
   definovaná obslu¾ná funkce</literal>, èili funkce napsaná programátorem.
  </simpara>
 </sect1>

 <sect1 id="signals.inheritance">
  <title>Dìdìní signálù</title>
  <simpara>
   Objekty dìdí signály, stejnì jako metody. Widget mù¾e vyslat jakýkoli
   signál definovaný u jeho rodièe, stejnì jako své vlastní signály.
  </simpara>
  <simpara>
   V pøípadì, ¾e signál není u widgetu relevantní, ale je pøesto zdìdìn,
   nevypí¹e se pøi zavolání signálu ¾ádná chybová zpráva - ale vyvolání
   tohoto signálu se nijak neprojeví.
  </simpara>
 </sect1>

 <sect1 id="signals.connection">
  <title>Pøipojování signálù</title>

  <sect2 id="signals.connection.simple">
   <title>Jednoduché pøipojení</title>
   <simpara>
    Aby se po vyvolání signálu nìco stalo, musíte urèit, kterou funkci tento
    signál spustí.
   </simpara>
   <simpara>
    Pøipojení funkce k signálu dosáhnete zavoláním metody
    <function class="GtkObject">connect</function> objektu.
   </simpara>
   <simpara>
    Funkce, kterou zaregistrujete jako obslu¾nou pro signál, musí mít
    správný prototyp. Jak by mìla být funkce konstruována, zjistíte v
    <link linkend="reference">referenèní</link> èásti manuálu.
   </simpara>
   <simpara>
    Napøíklad kdy¾ chcete pøipojit signál
    <signalname>clicked</signalname> objektu
    <classname>GtkButton</classname>, mìli byste definovat funkci, která
    pøijímá jeden parametr, co¾ bude oznaèení stisknutého tlaèítka.
   </simpara>
    <para>
     Následující kód ukazuje, jak mù¾ete vytvoøit okno, pøidat do nìj
     tlaèítko, poèkat, a¾ na nìj u¾ivatel klikne, a poté otevøít nové
     <classname>GtkWindow</classname> se zprávou.
     <example>
      <title>Signály a volání</title>
      <programlisting role="php">
<![CDATA[
<?php

function vypni() 
{
    print("Vypínám...\n");
    gtk::main_quit();
}

function kliknul_jste($tlacitko) 
{
    $okno = &new GtkWindow();
    $popisek = &new GtkLabel("Kliknul jste na tlaèítko");
    $okno->add($popisek);
    $okno->connect("destroy","vypni");
    $okno->show_all();
    return false;
}

$okno = &new GtkWindow();
$okno->connect("destroy", "vypni");
$okno->set_border_width(10);

$tlacitko = &new GtkButton("Klikni na mì!!");
$tlacitko->connect("clicked", "kliknul_jste");
$okno->add($tlacitko);

$okno->show_all();

gtk::main();

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Dùle¾itá èást je volání
    <literal>$tlacitko-&gt;connect();</literal>
    Metoda connect zde registruje funkci <literal>kliknul_jste()</literal>
    jako obslu¾nou funkci, která se spustí po vyvolání signálu
    <signalname>clicked</signalname> widgetu 
    <classname>GtkButton</classname>. Také registrujeme funkci
    <literal>shutdown()</literal> jako obslu¾nou funkci signálu
    <signalname>destroy</signalname> obou oken, abychom mohli aplikaci øádnì
    ukonèit.
   </para>
  </sect2>

  <sect2 id="signals.connection.multiple">
   <title>Vícenásobná pøipojení</title>
   <simpara>
    V PHP-GTK mù¾ete k signálu zaregistrovat více ne¾ jednu funkci. To vám
    umo¾òuje spustit jako odpovìï na signál celou sadu funkcí.
   </simpara>
   <para>
    Kdy¾ pøipojujete k signálu více funkcí, volají se funkce v poøadí, v
    jakém byly zaregistrovány.
    <example>
     <title>Poøadí volání funkcí</title>
     <programlisting role="php">
<![CDATA[
<?php

function prvni($tlacitko) 
{
    print "Byla zavolána první funkce\n";
}

function druha($tlacitko) 
{
    print "Byla zavolána druhá funkce\n";
}

$okno = &new GtkWindow();
$okno->connect_object("destroy", array("gtk", 
"main_quit"));

$tlacitko = &new GtkButton("Klikni na mì!!");
$tlacitko->connect("clicked","prvni");
$tlacitko->connect("clicked","druha");
$okno->add($tlacitko);

$okno->show_all();

gtk::main();

?>
]]>
     </programlisting>
    </example>
    V tomto pøíkladu pøipojíme na signál 
    <signalname>clicked</signalname> tlaèítka rovnou dvì funkce. První
    volání metody <function class="GtkObject">connect</function> pøipojí k
    signálu <signalname>clicked</signalname> funkci
    <literal>prvni()</literal> a druhé zavolání pøipojí k signálu
    <signalname>clicked</signalname> funkci <literal>druha()</literal>.
   </para>
   <para>
    Výstup tohoto programu bude vypadat následovnì:
    <screen>
Byla zavolána první funkce
Byla zavolána druhá funkce
    </screen>
   </para>
  </sect2>
 </sect1>
 
 <sect1 id="signals.custom.params">
  <title>Pou¾ívání u¾ivatelských parametrù</title>
  <sect2 id="signals.custom.data">
   <title>Pøedávání u¾ivatelských dat jako parametru</title>
   <simpara>
    Kdy¾ <link linkend="signals.connection">pøipojujete</link> signál,
    mù¾ete pøidat volané funkci vlastní parametry navíc. Toto je u¾iteèné,
    potøebujete-li pøedávat volané funkci objekty ke zpracování.
   </simpara>
   <simpara>
    Napøíklad mù¾ete chtít zavøít rodièovské okno, do nìho¾ bylo pøidání
    tlaèítko stisknuté u¾ivatelem.
   </simpara>
   <simpara>
    Toho dosáhnete tak, ¾e k volání
    <function class="GtkObject">connect</function> pøidáte tøetí nepovinný
    parametr. Tento bude pøedán obslu¾né funkci jako dal¹í parametr.
   </simpara>
   <para>
    <example>
     <title>
      Pou¾ívání u¾ivatelských parametrù s metodou 
      <function class="GtkObject">connect</function>.
     </title>
     <programlisting role="php">
<![CDATA[
<?php

function stisknuti_tlacitka($tlacitko, $okno) 
{
    $okno->destroy();
    gtk::main_quit();
}

$okno = &new GtkWindow();

$tlacitko = &new GtkButton("konec");
$tlacitko->connect("clicked","stisknuti_tlacitka",
$okno);

$okno->add($tlacitko);
$okno->show_all();

gtk::main();

?>
]]>
     </programlisting>
    </example>
    V tomto pøíkladu vidíte, ¾e volané funkci pøedáváme nejen promìnnou
    <literal>$tlacitko</literal>, instanci tøídy 
    <classname>GtkButton</classname>,
    ale také promìnnou <literal>$okno</literal>, instanci
    tøídy <classname>GtkWindow</classname>. Tak mù¾eme na okno zavolat
    metodu <function class="GtkObject">destroy</function>.
   </para>
   <note>
    <simpara>
     U¾ivatelských parametrù mù¾ete pøedat, kolik jen budete chtít.
    </simpara>
   </note>
   <para>
    Tím, ¾e pøedáváme promìnnou <literal>$tlacitko</literal> jako
    identifikátor volajícího objektu a promìnnou
    <literal>$okno</literal> jako u¾ivatelský parametr, mù¾eme pou¾ít
    stejnou obslu¾nou funkci pro více
    <classname>GtkButton</classname> v jednom
    <classname>GtkWindow</classname>. Pov¹imnìte si, ¾e pojmenování
    parametrù v obslu¾né funkci nemá mimo tuto funkci význam; PHP-GTK vezme
    parametry metody connect* a pøedá je jako promìnné urèené v deklaraci
    obslu¾né funkce, tudí¾ ka¾dé pøipojení se stejnou strukturou parametrù
    mù¾e pou¾ít stejnou obslu¾nou funkci. Pøedvedeme si to na pøíkladu,
    který pou¾ívá jeden u¾ivatelský parametr, ale stejné zásady platí i pro
    více parametrù.
    <example>
     <title>Pou¾ití stejné funkce pro více ne¾ jedno okno</title>
     <programlisting role="php">
<![CDATA[
<?php

function stisknuti_tlacitka($tlacitko, $okno)
{
    $okno->set_title("oznaèeno");
}

$okno1 = &new GtkWindow();
$okno1->connect_object("destroy", array("gtk", 
"main_quit"));
$okno2 = &new GtkWindow();
$okno2->connect_object("destroy", array("gtk", 
"main_quit"));

$tlacitko1 = &new GtkButton("Klikni na mì");
$tlacitko2 = &new GtkButton("Nebo rad¹i na mì");

$tlacitko1->connect("clicked", "stisknuti_tlacitka", 
$okno1);
$tlacitko2->connect("clicked", "stisknuti_tlacitka", 
$okno2);

$okno1->add($tlacitko1);
$okno2->add($tlacitko2);

$okno1->show_all();
$okno2->show_all();

gtk::main();

?>
]]>
     </programlisting>
    </example>
   </para>
  </sect2>
 
  <sect2 id="signals.connect.object">
   <title>Pou¾ití metody connect_object*</title>
   <para>
    Jak <function class="GtkObject">connect_object</function>, tak
    <function class="GtkObject">connect_object_after</function> umo¾òují
    pøedat obslu¾né funkci jako první parametr jiný objekt ne¾ volající
    objekt. Pou¾ívá se to hlavnì pøi volání statických PHP-GTK funkcí, jako
    napøíklad funkce <function>gtk::main_quit</function>:
    <example>
     <title>
      Pou¾ití metody
      <function class="GtkObject">connect_object</function> 
      k urèení vestavìné funkce jako obslu¾né.
     </title>
     <programlisting role="php">
<![CDATA[
<?php

$okno = &new GtkWindow();
$okno->connect_object("destroy", array("gtk", 
"main_quit"));
$okno->show();

gtk::main();

?>
]]>
     </programlisting>
    </example>
    Takto mù¾ete registrovat jakoukoli statickou funkci nebo metodu
    pou¾itím syntaxe <literal>gtkobject::method</literal> vyjádøené polem.
   </para>
   <para>
    Také to znamená, ¾e mù¾ete mít jednu obslu¾nou funkci pro nìkolik
    signálù. Napø. chcete vytvoøit okno obsahující (v pøíslu¹ných
    kontejnerech) <classname>GtkMenuBar</classname>, 
    <classname>GtkToolbar</classname> a <classname>GtkButton</classname>. 
    Jakmile u¾ivatel zvolí <literal>Konec</literal> skrze kterýkoli z tìchto
    widgetù, zavolá se funkce vypni(), které se jako první parametr pøedá
    instance <classname>GtkWindow</classname>, díky èemu¾ mù¾eme okno zavøít
    z kteréhokoli widgetu. Obslu¾ná funkce a pøipojení bude vypadat nìjak
    takto:
    <example>
     <title>
      Pou¾ití metody
      <function class="GtkObject">connect_object</function> k pøedání
      jiného objektu jako prvního parametru.
     </title>
     <programlisting role="php">
<![CDATA[
<?php

function vypni($okno)
{
    $okno->destroy();
    gtk::main_quit();
}

$ukoncovaci_tlacitko->connect_object("clicked", 
"vypni", $okno);

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Metoda connect_after* umo¾òuje volat obslu¾nou funkci "po"
    zavolání standardní obslu¾né funkce pro tento signál. V nìkterých
    situacích se to mù¾e hodit; napø. kdy¾ chcete zavøít jen jedno z
    nìkolika oken. Metoda connect_after* v¹ak bude fungovat, jen pokud je
    signál v zdrojovém souboru GTK aktivován s pøíznakem
    <literal>GTK_RUN_LAST</literal>. Tento pøíznak má nastaven signál
    <signalname>destroy</signalname> a v¹echny
    <literal>'event'</literal> signály; jediný zpùsob, jak to
    zjistit, je buï otestovat signál v PHP-GTK nebo prozkoumat zdrojové
    soubory GTK.
    <example> 
     <title>Pou¾ití metody 
      <function class="GtkObject">connect_after</function>.
     </title>
     <programlisting role="php">
<![CDATA[
<?php

function ukoncovaci_rutina($okno) 
{
    print("Vypínám...\n");
    gtk::main_quit();
}

$okno1 = &new GtkWindow();
$okno1->set_title("Ukonèí hlavní smyèku");
$okno1->connect("destroy", "ukoncovaci_rutina");

$okno2 = &new GtkWindow();
$okno2->set_title("Zavøe toto okno");
$okno2->connect_after("destroy", "ukoncovaci_rutina");

$okno1->show();
$okno2->show();

gtk::main();

?>
]]>
     </programlisting>
    </example>
   </para>
   <simpara>
    Viz také: <classname>GtkObject</classname>, 
    <function class="GtkObject">connect_after</function>
    <function class="GtkObject">connect_object</function> a
    <function class="GtkObject">connect_object_after</function>.
   </simpara>
  </sect2>
 </sect1>

 <sect1 id="signals.events">
  <title>Signály a události</title>
  <simpara>
   <emphasis>GTK Signály, GDK události.</emphasis>
  </simpara>
  <simpara>
   Signály nejsou události a události nejsou signály. Signál je zpráva
   vyslaná instancí <classname>GtkObject</classname> jako reakce na nìjaký
   pøedurèený prvek v prostøedí, tj. èinnost u¾ivatele, nebo instrukci z
   funkce èi metody. Signály jsou v¾dy naprogramovány do skriptu, buï
   vnitønì v GTK nebo zvenku PHP-GTK programátorem.
  </simpara>
  <simpara>
   Události jsou, na druhou stranu, nepøetr¾itý tok zpráv ohlednì zmìn
   prostøedí ve spodní vrstvì zobrazovacího systému. Hlavní smyèka GTK je,
   mimo jiné, vytvoøena tokem událostí.
  </simpara>
  <note>
   <simpara>
    Nelze pøipojit obslu¾nou funkci pøímo na <classname>GdkEvent</classname>.
   </simpara>
  </note>
  <simpara>
   Jakýkoli widget, který má vlastní <classname>GdkWindow</classname>, mù¾e
   zachytávat pøíslu¹né události. Widgety bez
   <classname>GdkWindow</classname> - vytvoøené s pøíznakem
   <literal>GTK_NO_WINDOW</literal> - to dìlat nemohou, pokud nejsou
   umístìny do <classname>GtkEventBox</classname> - widgetu vytvoøeného pro
   tento specifický úèel. V urèitých pøípadech je u¾iteèné zachytávat
   události; zøejmým pøíkladem je vytvoøení instance  
   <classname>GtkToolTips</classname>, které se spou¹tí, kdy¾ daný widget
   zachytí událost <literal>GDK_ENTER_NOTIFY</literal>, a ukonèují, kdy¾
   stejný widget zachytí událost <literal>GDK_LEAVE_NOTIFY</literal>.
  </simpara>
  <simpara>
   Aèkoli není mo¾no pou¾ít událost ke spu¹tìní funkce stejným zpùsobem,
   jako u signálu, existuje nìkolik signálù vycházejících z
   <classname>GtkWidget</classname>, které jsou dohromady známé jako
   <literal>'event' signály</literal>.  Takto mù¾ete úèinnì
   popisovat události jako signály a spou¹tìt obslu¾né funkce pøi zachycení
   vìt¹iny <enumname>GdkEventTypes</enumname>. Samotný objekt 
   <classname>GtkTooltips</classname> pou¾ívá ke sledování svého widgetu
   metodu <function class="GktObject">connect_object</function> a v¹eobecný
   <signalname>event</signalname> signál.
  </simpara>
  <para>
   Koncepce událostí je tì¾ká na pochopení. Vyzkou¹ejte si, prosím,
   následující pøíklad, abyste vidìli tok událostí nad widgety v chodu.
   <example>
    <title>Pøedvedení toku událostí nad
     <classname>GtkButton</classname>
    </title>
    <programlisting role="php">
<![CDATA[
<?php

dl("php_gtk." . (strstr(PHP_OS, "WIN") ? "dll" : 
"so")) ||
die("Nelze nahrát PHP-GTK modul!\n");

function ukaz_typ_udalosti($tlacitko, $udalost, $text) 
{
    $typ_udalosti = $udalost->type;
    $insert = $text->get_length();
    $text->freeze();
    switch($type_udalosti) {
      case 2:
        $text->insert_text("GDK_EXPOSE\n", $insert);
      break;
      case 3:
        $text->insert_text("GDK_MOTION_NOTIFY\n", $insert);
      break;
      case 4:
        $text->insert_text("GDK_BUTTON_PRESS\n", $insert);
      break;
      case 5:
        $text->insert_text("GDK_2BUTTON_PRESS\n", $insert);
        $tlacitko->hide();
      break;
      case 7:
        $text->insert_text("GDK_BUTTON_RELEASE\n", $insert);
      break;
      case 8:
        $text->insert_text("GDK_KEY_PRESS\n", $insert);
      break;
      case 9:
        $text->insert_text("GDK_KEY_RELEASE\n", $insert);
      break;
      case 10:
        $text->insert_text("GDK_ENTER_NOTIFY\n", $insert);
      break;
      case 11:
        $text->insert_text("GDK_LEAVE_NOTIFY\n", $insert);
      break;
      case 12:
        $text->insert_text("GDK_FOCUS_CHANGE\n", $insert); 
      break;
      case 14:
        $text->insert_text("GDK_MAP\n", $insert);
      break;
      case 15:
        $text->insert_text("GDK_UNMAP\n", $insert);
        $tlacitko->destroy();
        $text->insert_text(
"\n* GDK UDÁLOSTI A GTK SIGNÁLY - tok na pozadí vs. zprávy na popøedí *
\n
* Vìt¹ina GdkEventTypes má protìj¹ek mezi GTK signály, známý jako 'event'
  signál, implementovaný v GtkWidget. Typy na obrazovce uvidíte, proto¾e
  GtkButton je naprogramován tak, aby vysílal obecný 'event' signál poka¾dé,
  kdy¾ zachytí nìkterou z GDK událostí, které vytváøí hlavní smyèku GTK.
  V ka¾dém pøípadì je zachycená GdkEvent pøedána jako parametr obslu¾né
  funkce, aby se ve funkci dala zjistit její èíselná hodnota. Podívejte se
  na konec textu a uvidíte sérií událostí zachycených bìhem va¹í nedávné
  interakce s widgetem GtkButton. *
\n
* Pov¹imnìte si, ¾e vìt¹ina GTK signálù ¾ádným zpùsobem NEODPOVÍDÁ GDK
  událostem! Napø. pøipojení signálu
                      \$tlacitko->connect('pressed', 'cokoli');
  nemá ¾ádný vztah k události GDK_BUTTON_PRESS, kterou generuje; tato
  událost reaguje na aktivitu tlaèítka my¹i a nikoli na signál 'pressed'. *  
\n", 0);
      break;
    }
    $text->thaw();
    return false;
}

$okno = &new GtkWindow();
$okno->set_position(GTK_WIN_POS_CENTER);
$okno->set_default_size((gdk::screen_width()/1.5), 
(gdk::screen_height()-20));
$okno->connect_object("destroy", array("gtk", 
"main_quit"));
$okno->realize();

$box = &new GtkVBox(false, 5);
$okno->add($box);
$scrlwin = &new GtkScrolledWindow();
$box->pack_start($scrlwin, true, true, 0);
$text = &new GtkText();
$scrlwin->add($text);

$tlacitko = &new GtkButton("2x kliknìte zde a dozvíte se více");
$tlacitko->add_events(GDK_ALL_EVENTS_MASK);
$tlacitko->connect("event", "ukaz_typ_udalosti", $text);
$box->pack_end($tlacitko, false, false, 5);

$okno->show_all();

gtk::main();

?>
]]>
    </programlisting>
   </example>
  </para>
 </sect1>

</chapter>
