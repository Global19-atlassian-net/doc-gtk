<?xml version="1.0" encoding="ISO-8859-2" ?>
<chapter id="tutorials.hellow">
 <title>Hello World</title>
 <simpara>
  První program, který napí¹ete v novém programovacím jazyce, obvykle bývá
  klasické 'hello world'. Abychom neporu¹ovali tradice, prvním pøíkladem v
  tomto manuálu bude 'hello world'.
 </simpara>
 <simpara>
  V pøíkladech pøedpokládáme jisté znalosti PHP samotného. Pøíklady jsou
  navr¾eny tak, aby u¾ivatel získal pøehled o pou¾ití PHP-GTK a
  prostøedcích, které pøiná¹í.
 </simpara>
 <simpara>
  V prvním prográmku vytvoøíme jednoduché okno s textem "Ahoj, svìte!".
 </simpara>
 <simpara>
  Nejprve se podíváme, jak takový program bude vypadat, a poté vysvìtlíme
  ka¾dý øádek programu.
 </simpara>
 <para>
  <example>
   <title>Výpis programu Hello World v PHP-GTK</title>
   <programlisting role="php">
if (!class_exists('gtk')) {
    if (strtoupper(substr(PHP_OS, 0,3) == 'WIN'))
    dl('php_gtk.dll');
  else
    dl('php_gtk.so');
}
    
function delete_event()
{
    return false;
}
    
function vypni()
{
    print(&quot;Vypínám...\n&quot;);
    gtk::main_quit();
}
    
function ahoj()
{
    global $okno;
    print &quot;Ahoj, svìte!\n&quot;;
    $okno-&gt;destroy();
}
    
$okno = &amp;new GtkWindow();
$okno-&gt;connect('destroy', 'vypni');
$okno-&gt;connect('delete-event', 'delete_event');
$okno-&gt;set_border_width(10);
    
$tlacitko = &amp;new GtkButton('Ahoj, svìte!');
$tlacitko-&gt;connect('clicked', 'ahoj');
$okno-&gt;add($tlacitko);
    
$okno-&gt;show_all();
    
gtk::main();
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Urèení PHP-GTK</title>
   <programlisting role="php">
if (!class_exists('gtk')) {
    if (strtoupper(substr(PHP_OS, 0,3) == 'WIN'))
    dl('php_gtk.dll');
 else
    dl('php_gtk.so');
}
   </programlisting>
  </example>
  Tìchto pár øádkù zkontroluje, zda u¾ je PHP-GTK roz¹íøení dostupné. A
  pokud ne, nahraje ho do pamìti. To zaøídí pøíkaz
  <literal>dl('php_gtk.dll');</literal> pro Windows nebo
  <literal>dl('php_gtk.so');</literal> pro Linux.
 </para>
 <para>
  <example>
   <title>Funkce delete_event()</title>
   <programlisting role="php">
function delete_event()
{
    return false;
}
   </programlisting>
  </example>
  Funkce <literal>delete_event()</literal> je ovladaè (viz ní¾e) signálu
  <signalname>delete-event</signalname>. Vrátí hodnotu
  <literal>false</literal>, èím¾ oznámí PHP-GTK, aby pou¾ilo standardní
  ovladaè události, co¾ je v tomto pøípadì metoda
  <function class="GtkObject">destroy()</function>. Pokud by funkce vrátila
  hodnotu <literal>true</literal>, PHP-GTK by zastavilo provádìní
  standardního ovladaèe. To je u¾iteèné, pokud chcete pou¾ít vlastní funkci
  namísto <function class="GtkObject">destroy()</function> - napøíklad k
  vytvoøení dialogového okna, kde u¾ivatel potvrdí, ¾e chce opravdu aplikaci
  ukonèit.
 </para>
 <simpara>
  Není vylo¾enì nutné vracet hodnotu <literal>false</literal>, aby se signál
  <signalname>delete-event</signalname> propojil s metodou
  <function class="GtkObject">destroy()</function>, proto¾e tento signál
  standardnì vrací hodnotu <literal>false</literal>. Není tedy vùbec nutné
  urèovat chování pro signál <signalname>delete-event</signalname>, pokud je
  signál <signalname>destroy</signalname> správnì obslou¾en.
 </simpara>
 <para>
  <example>
   <title>Funkce vypni()</title>
   <programlisting role="php">
function shutdown()
{
    print(&quot;Vypínám...\n&quot;);
    gtk::main_quit();
}
   </programlisting>
  </example>
  Funkce <literal>vypni()</literal> je ovladaè signálu
  <signalname>destroy</signalname>. Funkce vypí¹e na konzoli text
  <literal>&quot;Vypínám...\n&quot;</literal> a poté zavolá statickou funkci
  <function>gtk::main_quit()</function>.
 </para>
 <para>
  <example>
   <title>Funkce ahoj()</title>
   <programlisting role="php">
function ahoj()
{
    global $okno;
    print &quot;Ahoj, svìte!\n&quot;;
    $okno-&gt;destroy();
}
   </programlisting>
  </example>
  Funkce <literal>ahoj()</literal> je ovladaè signálu
  <signalname>clicked</signalname> tlaèítka. Nejprve urèí globální promìnnou
  <literal>$okno</literal>, aby bylo mo¾no pøistupovat k instanci objektu
  <classname>GtkWindow</classname> vytvoøené dále ve skriptu. Poté vypí¹e na
  konzoli text <literal>&quot;Ahoj, svìte!&quot;</literal> a nakonec zavolá
  metodu <function class="GtkObject">destroy()</function> na okno, co¾
  vyvolá signál <signalname>destroy</signalname>, který spustí funkci
  <literal>shutdown()</literal>.
 </para>
 <simpara>
  Dal¹í mo¾ností, jak mù¾e funkce <literal>ahoj()</literal> pøistupovat k
  promìnné <literal>$okno</literal>, je její pøedání jako
  <link linkend="signals.custom.params">parametru</link>.
 </simpara>
 <para>
  <example>
   <title>Nastavení okna</title>
   <programlisting role="php">
$okno = &amp;new GtkWindow();
$okno-&gt;connect('destroy', 'vypni');
$okno-&gt;connect('delete-event', 'delete_event');
$okno-&gt;set_border_width(10);
   </programlisting>
  </example>
  Dal¹í ètyøi øádky nastavují samotné okno. Nejprve vytvoøíme instanci
  <classname>GtkWindow</classname>. Poté dvakrát zavoláme metodu 
  <function class="GtkObject">connect()</function>, abychom zaregistrovali
  funkci <literal>vypni()</literal> jako ovladaè signálu
  <signalname>destroy</signalname> a funkci
  <literal>delete_event()</literal> jako ovladaè signálu
  <signalname>delete-event</signalname>. Nakonec zavoláme funkci
  <function class="GtkContainer">set_border_width()</function>, kterou
  nastavíme práve vytvoøené instanci <classname>GtkWindow</classname> 10
  pixelù ¹iroký okraj.
 </para>
 <para>
  <example>
   <title>Nastavení tlaèítka</title>
   <programlisting role="php">      
$tlacitko = &amp;new GtkButton('Ahoj, svìte!');
$tlacitko-&gt;connect('clicked', 'ahoj');
$ökno -&gt;add($tlacitko);

$okno-&gt;show_all();
   </programlisting>
  </example>
  Dal¹í tøi øádky skriptu vytvoøí a nastaví tlaèítko. Na prvním øádku
  vytvoøíme novou instanci widgetu <classname>GtkButton</classname>.
  Parametrem konstruktoru je text, který chceme zobrazit na tlaèítku - v
  na¹em pøípadì <literal>&quot;Ahoj, svìte!&quot;</literal>. Následnì
  zavoláme metodu <function class="GtkObject">connect()</function> a
  zaregistrujeme vý¹e definovanou funkci <literal>ahoj()</literal> jako
  ovladaè signálu <signalname>clicked</signalname>. Nakonec pøidáme tlaèítko
  do døíve vytvoøeného okna. Pou¾ijeme metodu
  <function class="GtkContainer">add()</function> z instance
  <literal>$okno</literal>. V posledním (ètvrtém) øádku zavoláme metodu
  <function class="GtkWidget">show_all()</function> instance
  <literal>$okno</literal> a tím se zobrazí v¹echny widgety, které daný
  objekt obsahuje (v na¹em pøípadì okno samotné a tlaèítko).
 </para>
 <para>
  <example>
   <title>Zavoláme gtk::main</title>
   <programlisting role="php">
gtk::main();
   </programlisting>
  </example>
  Poslední øádek skriptu volá statickou funkci
  gtk::<function>main()</function>. Tak oznámíme PHP-GTK, ¾e jsme skonèili s
  nastavováním prostøedí a je mo¾no spustit hlavní smyèku, která bude
  èekat na události spu¹tìné u¾ivatelem a v návaznosti na nì provádìt
  námi definované funkce.
 </para>
</chapter>

<!--

 * Local variables:
 * tab-width: 1
 * c-basic-offset: 1
 * End:
 * vim600: et sw=1 ts=1 tw=78 fdm=marker
 * vim<600: et sw=1 ts=1 tw=78
-->

