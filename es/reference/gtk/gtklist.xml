<?xml version="1.0" encoding="ISO-8859-1" ?>
<classentry id="gtk.gtklist">
 <classmeta>
  <classtitle>GtkList</classtitle>
  <classparent>GtkContainer</classparent>
  <shortdesc>
   Widget displaying a list of selectable items.
  </shortdesc>
  <desc>
   <simpara>
    A <classname>GtkList</classname> is a container widget that is designed
    to hold a simple list, the full range of which is displayed.  The items
    held in the list are selectable, with the default selection mode set as 
    <literal>GTK_SELECTION_SINGLE</literal>.  Each item in the list must be
    a <classname>GtkListItem</classname> widget.  Glade users will find that
    they need to code these manually in order to populate a list or combo box.
   </simpara>
   <simpara>
    The signal part of the function/signal pair for most of the methods given
    here is private in <classname>GtkList</classname>, but is also
    implemented in <classname>GtkListItem</classname>.  As this secondary
    implementation is also private, these signals are not covered in this
    manual.  Although those signals that have GTK keybindings will cause the
    appropriate signal to be publicly fired when their key combinations are
    used, there is no other way to emit this range of signals.  The
    keybindings are listed under <classname>GtkListItem</classname>; the
    signal prototypes share the relevant <classname>GtkList</classname> 
    method's parameters, should you need to connect to them.
   </simpara>
   <simpara>
    See also: <classname>GtkCList</classname>, 
    <classname>GtkCombo</classname>, 
    <classname>GtkListItem</classname>.
   </simpara>
  </desc>
 </classmeta>

 <constructor id="gtk.gtklist.constructor">
  <funcsynopsis>
   <funcprototype>
    <funcdef> <function>GtkList</function></funcdef>
    <paramdef>void</paramdef>
   </funcprototype>
  </funcsynopsis>
  <shortdesc>
   Creates a container for a simple list.
  </shortdesc>
  <desc>
   <para>
    Creating a <classname>GtkList</classname> widget is straightforward, 
    populating it slightly less so.  Each item added to the list container 
    <emphasis>must</emphasis> itself be contained in a 
    <classname>GtkListItem</classname>.  In its simplest and most common form,
    all that means is that the <classname>GtkListItem</classname> is created
    with a label, the text content of which will be displayed in the list.
    <example>
     <title>Constructing a GtkList</title>
     <programlisting role="php">
dl('php_gtk.' . (strstr(PHP_OS, 'WIN') ? 'dll' : 'so'));
    
function echo_it($list, $listitem) {
/* collect the text from the selected list item's label */
  $listlabel = $listitem-&gt;child;
/* filter list items according to child object type */
  if($listlabel-&gt;get_name() == 'GtkLabel') {
    $name = $listlabel-&gt;get();
    $label = &amp;new GtkLabel(&quot;You chose $name just now&quot;);
/* create a popup window and display a message relevant to selected item */
    $popup = &amp;new GtkWindow(GTK_WINDOW_POPUP);
    $popup-&gt;set_uposition((gdk::screen_width()/2)+50, 
(gdk::screen_height()/3));
    $popup-&gt;add($label);
    $popup-&gt;show_all();
/* connect the list item's own deselect signal (not the list's) */
    $listitem-&gt;connect_object('deselect', create_function('$popup', 
'$popup-&gt;destroy();'), $popup);
  }
  else gtk::main_quit();
}
    
$window = &amp;new GtkWindow(GTK_WINDOW_DIALOG);
$window-&gt;set_position(GTK_WIN_POS_CENTER);
$window-&gt;connect_object('destroy', array('gtk', 'main_quit'));
    
$list = &amp;new GtkList();
/* the contents of this array will populate the list */
$fill = array('Angela', 'Belinda', 'Carolyn', 'Danike', 'Etha', 'Fiona', 
'Gertraud', 'Heidi', 'Jessica', 'Kirstin', 'Lorinda', 'Marianne');
    
foreach(range(0, count($fill)-1) as $i) 
  $listitem[] = &amp;new GtkListItem($fill[$i]);
    
$list-&gt;append_items($listitem);
    
$enditem = &amp;new GtkListItem();
/* a list item is also a container */
$button = &amp;new GtkButton('Close');
$enditem-&gt;add($button);
/* there is no way to append() a single item - but GtkList is a container
widget, so it's okay to use add() */
$list-&gt;add($enditem);
$list-&gt;connect('select-child', 'echo_it');
$list-&gt;show_all();
    
$window-&gt;add($list);
$window-&gt;show_all();
    
gtk::main();
     </programlisting>
    </example>
   </para>
  </desc>
 </constructor>

 <methods>

  <method id="gtk.gtklist.method.append_items">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>append_items</function></funcdef>
     <paramdef>array</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Appends an array of list items to a list.
   </shortdesc>
   <desc>
    <simpara>
     This is a widget-specific method for adding an array of
     <classname>GtkListItem</classname>s to a <classname>GtkList</classname>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtklist.method.clear_items">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>clear_items</function></funcdef>
     <paramdef>int <parameter>start</parameter></paramdef>
     <paramdef>int <parameter>end</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Clears designated list items from list.
   </shortdesc>
   <desc>
    <simpara>
     Removes the list items between the positions given in the parameters, 
     from a <classname>GtkList</classname>.  The remaining items close up the
     gap, always moving closer to the top as there is no way to fix a child's
     list position.  Note that the list container itself is not resized to
     reflect these changes.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtklist.method.select_item">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>select_item</function></funcdef>
     <paramdef>int <parameter>item</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Causes the <signalname class="GtkList">select-child</signalname> signal
    to be emitted.
   </shortdesc>
   <desc>
    <simpara>
     The only difference between 
     <function class="GtkList">select_item()</function> and 
     <function class="GtkList">select_child()</function> is that the former
     takes the item's list position as a parameter rather than the 
     <classname>GtkListItem</classname> object itself.  In either case, the
     signal that is actually emitted is the list item's 
     <signalname class="GtkListItem">select</signalname> signal - these are
     just different ways of describing the same thing, providing alternative
     means of selection and connection.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtklist.method.unselect_item">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>unselect_item</function></funcdef>
     <paramdef>int <parameter>item</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Causes the <signalname class="GtkList">unselect-child</signalname> signal
    to be emitted.
   </shortdesc>
   <desc>
    <simpara>
     The only difference between 
     <function class="GtkList">unselect_item()</function> and 
     <function class="GtkList">unselect_child()</function> is that the former
     takes the item's list position as a parameter rather than the 
     <classname>GtkListItem</classname> object itself.  In either case, the
     signal that is actually emitted is the list item's 
     <signalname class="GtkListItem">deselect</signalname> signal - these are
     just different ways of describing the same thing, providing alternative
     means of de-selection and connection.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtklist.method.select_child">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>select_child</function></funcdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>child</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Causes the <signalname class="GtkList">select-child</signalname> signal
    to be emitted.
   </shortdesc>
   <desc>
    <simpara>
     The only difference between 
     <function class="GtkList">select_item()</function> and 
     <function class="GtkList">select_child()</function> is that the former
     takes the item's list position as a parameter rather than the 
     <classname>GtkListItem</classname> object itself.  In either case, the
     signal that is actually emitted is the list item's 
     <signalname class="GtkListItem">select</signalname> signal - these are
     just different ways of describing the same thing, providing alternative
     means of selection and connection.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtklist.method.unselect_child">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>unselect_child</function></funcdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>child</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Causes the <signalname class="GtkList">unselect-child</signalname> signal
    to be emitted.
   </shortdesc>
   <desc>
    <simpara>
     The only difference between 
     <function class="GtkList">unselect_item()</function> and 
     <function class="GtkList">unselect_child()</function> is that the former
     takes the item's list position as a parameter rather than the 
     <classname>GtkListItem</classname> object itself.  In either case, the
     signal that is actually emitted is the list item's 
     <signalname class="GtkListItem">deselect</signalname> signal - these are
     just different ways of describing the same thing, providing alternative
     means of de-selection and connection.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtklist.method.child_position">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>child_position</function></funcdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>child</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns item specified by list position.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkList">child_position()</function> returns the
    .list position currently holding the widget that was passed as the
     argument.  The widget needs to be passed by reference, i.e. using the
     form <literal>$widget</literal>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtklist.method.set_selection_mode">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_selection_mode</function></funcdef>
     <paramdef>
      <enumname>GtkSelectionMode</enumname> 
      <parameter>mode</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the selection mode.
   </shortdesc>
   <desc>
    <simpara>
     Sets one of the four possible <enumname>GtkSelectionMode</enumname> 
     enumerated values.
    </simpara>
    <simpara>
     The default setting is <literal>GTK_SELECTION_SINGLE</literal>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtklist.method.extend_selection">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>extend_selection</function></funcdef>
     <paramdef>
      <enumname>GtkScrollType</enumname> 
      <parameter>scroll_type</parameter>
     </paramdef>
     <paramdef>double <parameter>position</parameter></paramdef>
     <paramdef>bool <parameter>auto_start_selection</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Extends selected area to position given.
   </shortdesc>
   <desc>
    <simpara>
     This is quite a complex method that can only be used when the selection
     mode is set to <literal>GTK_SELECTION_EXTENDED</literal>.  It duplicates
     and resets the focus row (i.e. the row that is marked as selected) and
     highlights all the items between that and the anchor item.  It has
     different behaviours depending on whether or not the list has keyboard
     grab, so that putting it into a callback function does not have the same
     results as calling it from the main loop.
    </simpara>
    <simpara>
     Selection of all the items in the highlighted range requires that 
     <function class="GtkList">scroll_vertical()</function> is also set
     appropriately.
    </simpara>
    <simpara>
     In general, calling the 
     <function class="GtkList">extend_selection()</function> method
     will only select the last row with focus.  It needs to have 
     <function class="GtkList">toggle_add_mode()</function> set in order to
     do this when <function class="GtkList">scroll_vertical()</function> is
     set after the list widget has grab.
    </simpara>
    <simpara>
     As with <function class="GtkList">scroll_vertical()</function>, this
     method's <parameter>position</parameter> parameter is used only when
     the <enumname>GtkScrollType</enumname> value is set to 
     <literal>GTK_SCROLL_JUMP</literal>, and represents a percentage of the
     area covered by the scroll.  The final parameter negates the method's
     functionality completely if set to <literal>false</literal>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtklist.method.start_selection">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>start_selection</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Selects range from anchor to currently selected item.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkList">start_selection()</function> selects the range
     between the anchor item - <literal>0</literal> on first
     opening or the most recent selection thereafter - and the next selection
     that is made.  For instance, if you were to select item 4 on opening, the
     selection range would run as 4, 0, 1, 2, 3.  If you then selected item
     7 the new range would be 7, 4, 5, 6.  Further items can be included in
     the selection by dragging while the mouse button is still pressed down
     from selecting the original item.
    </simpara>
    <simpara>
     Note that this method can only be used if the list's selection mode is
     set to <literal>GTK_SELECTION_EXTENDED</literal>.
    </simpara>
    <simpara>
     See also:  <function class="GtkList">end_selection()</function>, 
     <function class="GtkList">end_drag_selection()</function>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtklist.method.end_selection">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>end_selection</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Curtails selection set with 
    <function class="GtkList">start_selection()</function>.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkList">end_selection()</function> ends a selection
     as it would be if made using 
     <function class="GtkList">start_selection()</function>.  It curtails
     the selection so that only the anchor and the item selected return
     a <signalname class="GtkListItem">select</signalname> signal.
    </simpara>
    <simpara>
     Note that this method can only be used if the list's selection mode is
     set to <literal>GTK_SELECTION_EXTENDED</literal>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtklist.method.select_all">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>select_all</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Selects all list items.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkList">select_all()</function> selects all the
     list items in a <classname>GtkList</classname>.  Note that there
     needs to be the possibility of multiple selection for this method to
     work; see <function class="GtkList">set_selection_mode()</function>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtklist.method.unselect_all">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>unselect_all</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Deselects all list items.
   </shortdesc>
   <desc>
    <simpara>
     The corollary to <function class="GtkList">select_all()</function>, this
     method can also be used to clear the initial focus when the selection
     mode has been set to <literal>GTK_SELECTION_BROWSE</literal>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtklist.method.scroll_horizontal">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>scroll_horizontal</function></funcdef>
     <paramdef>
      <enumname>GtkScrollType</enumname> 
      <parameter>scroll_type</parameter>
     </paramdef>
     <paramdef>double <parameter>position</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets associated horizontal scrollbar to a predetermined position.
   </shortdesc>
   <desc>
    <simpara>
     This method needs 
     <function class="GtkContainer">set_focus_hadjustment()</function> to be
     called on the appropriate scrollbar from the 
     <classname>GtkList</classname> in order for it to work.  It scrolls the
     list horizontally to a predetermined position according to the 
     <enumname>GtkScrollType</enumname>.
    </simpara>
    <simpara>
     The <parameter>position</parameter> parameter is only used where the
     enumerated value is <literal>GTK_SCROLL_JUMP</literal>, when 
     <literal>0.0</literal> sets the scroll to the (default) leftmost point
     and <literal>1.0</literal> to the rightmost.  Values between
     <literal>0.0</literal> and <literal>1.0</literal> describe the
     percentage of the distance scrolled, i.e. <literal>0.5</literal> would
     set the beginning of the scroll slider halfway across the area.
    </simpara>
    <simpara>
     Where any other <enumname>GtkScrollType</enumname> is set, the 
     <parameter>position</parameter> is required but is then ignored.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtklist.method.scroll_vertical">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>scroll_vertical</function></funcdef>
     <paramdef>
      <enumname>GtkScrollType</enumname> 
      <parameter>scroll_type</parameter>
     </paramdef>
     <paramdef>double <parameter>position</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets associated vertical scrollbar to a predetermined position.
   </shortdesc>
   <desc>
    <simpara>
     This method needs 
     <function class="GtkContainer">set_focus_vadjustment()</function> to be
     called on the appropriate scrollbar from the 
     <classname>GtkList</classname> in order for it to work.  It scrolls the
     list to a predetermined position according to the 
     <enumname>GtkScrollType</enumname> setting and, if a selection has been
     made and the list's selection mode allows it, will automatically select
     the child nearest to the new scroll position.
    </simpara>
    <simpara>
     The <parameter>position</parameter> parameter is only used where the
     enumerated value is <literal>GTK_SCROLL_JUMP</literal>, when 
     <literal>0.0</literal> sets the scroll to the topmost item and 
     <literal>1.0</literal> to the final item.  Values between
     <literal>0.0</literal> and <literal>1.0</literal> describe the
     percentage of the distance scrolled, i.e. <literal>0.5</literal> would
     set the scroll so that the last visible item is the one holding the
     halfway position in the list.
    </simpara>
    <simpara>
     Where any other <enumname>GtkScrollType</enumname> is set, the 
     <parameter>position</parameter> is required but is then ignored.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtklist.method.toggle_add_mode">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>toggle_add_mode</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Toggles whether further selections may be added in extended mode.
   </shortdesc>
   <desc>
    <simpara>
     When <function class="GtkList">toggle_add_mode()</function> has been
     called, the grab in a <literal>GTK_SELECTION_EXTENDED</literal> mode
     list will remain with the anchor item at the start of the selection, 
     regardless of where the focus falls, until another item is actually
     selected.  Effectively it switches the list to something very like 
     <literal>GTK_SELECTION_BROWSE</literal> mode.
    </simpara>
    <simpara>
     The item that currently has grab has a dashed line around it to signify
     its status, as well as the usual <literal>GTK_STATE_SELECTED</literal> 
     style.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtklist.method.toggle_focus_row">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>toggle_focus_row</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Toggles selection status of row with focus.
   </shortdesc>
   <desc>
    <simpara>
     If the row having current focus is marked as selected, calling 
     <function class="GtkList">toggle_focus_row()</function> will unselect
     it, and vice versa.  In both cases the appropriate signal is fired.
    </simpara>
    <simpara>
     This method would be pointless in a list set to 
     <literal>GTK_SELECTION_BROWSE</literal>, and so is not implemented there.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtklist.method.toggle_row">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>toggle_row</function></funcdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>item</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Toggles selection status of specified row.
   </shortdesc>
   <desc>
    <simpara>
     If the item specified in the parameter is marked as selected, calling 
     <function class="GtkList">toggle_row()</function> will unselect
     it, and vice versa.  In both cases the appropriate signal is fired.
    </simpara>
    <simpara>
     If the selection mode is <literal>GTK_SELECTION_BROWSE</literal>, the
     item will always be selected.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtklist.method.undo_selection">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>undo_selection</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    In extended mode, returns selection to its previous state.
   </shortdesc>
   <desc>
    <simpara>
     This method returns selection to its previous state if the list mode
     is set to <literal>GTK_SELECTION_EXTENDED</literal>.  It is not
     implemented in any other mode.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtklist.method.end_drag_selection">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>end_drag_selection</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Ends drag selection.
   </shortdesc>
   <desc>
    <simpara>
     This method is used extensively within GTK to complete a selection.  It
     removes the grab from the list, and also the internal timer associated
     with the drag action.  It is unlikely to be very useful at this level.
    </simpara>
   </desc>
  </method>

 </methods>

 <signals>

  <signal id="gtk.gtklist.signal.selection-changed">
   <signalname>selection-changed</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkList</classname> list</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when the selection property is changed.
   </shortdesc>
   <desc>
    <simpara>
     The <signalname class="GtkList">selection-changed</signalname> signal
     is emitted whenever there is a change in the list's 
     <propname class="GtkList">selection</propname> property, regardless of
     whether that change empties the array.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtklist.signal.select-child">
   <signalname>select-child</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkList</classname> list</paramdef>
     <paramdef><classname>GtkWidget</classname> child</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when a list item is selected.
   </shortdesc>
   <desc>
    <simpara>
     The <signalname class="GtkList">select-child</signalname> signal is
     emitted when a child is selected.  It carries the selected child as
     an argument.
    </simpara>
    <simpara>
     This signal is basically a wrapper for the 
     <signalname class="GtkListItem">select</signalname> signal emitted by
     the <classname>GtkListItem</classname> that is currently selected.  If
     you mix the two, the same item will emit the same signal twice in
     response to selection.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtklist.signal.unselect-child">
   <signalname>unselect-child</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkList</classname> list</paramdef>
     <paramdef><classname>GtkWidget</classname> child</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when a list item is deselected.
   </shortdesc>
   <desc>
    <simpara>
     The <signalname class="GtkList">unselect-child</signalname> signal is
     emitted when a child is deselected.  It carries the deselected child as
     an argument.
    </simpara>
    <simpara>
     This signal is basically a wrapper for the 
     <signalname class="GtkListItem">deselect</signalname> signal emitted by
     the <classname>GtkListItem</classname> that has just been deselected.  If
     you mix the two, the same item will emit the same signal twice in
     response to deselection.
    </simpara>
   </desc>
  </signal>

</signals>

 <properties>

  <prop id="gtk.gtklist.property.selection" type="ro">
   <propname>selection</propname>
   <proptype>array</proptype>
   <shortdesc>
    Array containing current selection information.
   </shortdesc>
   <desc>
    <simpara>
     The <propname class="GtkList">selection</propname> property is an
     array that contains any currently selected items.  If there is no current
     selection, the array will be empty.  If the selection mode does not allow
     multiple selection, 
     <programlisting role="php">$list-&gt;selection[0];</programlisting> will
     return the selected item.  If the selection mode allows multiple
     selection, there will be as many elements in the array as there are
     currently-selected objects.
    </simpara>
    <simpara>
     See also:  <function class="GtkContainer">children()</function>.
    </simpara>
   </desc>
  </prop>

 </properties>

</classentry>
