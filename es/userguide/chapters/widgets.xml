<?xml version="1.0" encoding="ISO-8859-1" ?>
<chapter id="gtk.widgets">
 <title>Widgets y Containers</title>

 <sect1 id="gtk.widgets.intro">
  <title>Introducción</title>
  <simpara>
   Este cápitulo explicará algunos conceptos de GTK+ y como usarlo.
  </simpara>
 </sect1>

 <sect1 id="gtk.widgets.whatare">
  <title>¿ Qué son los Widgets?</title>
  <simpara>
   <literal>widget</literal> es un termino utilizado en el mundo de X para
   cualquier interfase de usuario. Un  widget puede ser una caja de texto,
   una etiqueta, un marco, una ventana o cualquier otro componente
   de la GUI. Los  GTK widgets derivan todos de una clase base abstracta
   <classname>GtkWidget</classname>, y heredan métodos, señales y 
   propiedades implentadas.
  </simpara>
  <simpara>
   Desde el punto de vista de la programación un widget tiene cinco 
   partes en su ciclo de vida:
  </simpara>
  <para>
   <orderedlist>
    <listitem>
     <simpara>Creación</simpara>
     <simpara>
      En PHP-GTK esto es hecho creando un objeto, e.j. 
      <literal>$window = &amp;new GtkWindow();</literal>
     </simpara>
    </listitem>
    <listitem>
     <simpara>Colocación</simpara>
     <simpara>
      Este es el paso en el cual se suma un widget a un
      <link linkend="gtk.containers.whatare">container</link>. Esto se
      logra especificamente en  PHP-GTK usando la siguiente sintaxis 
      <literal>$container-&gt;add($widget);</literal>
     </simpara>
    </listitem>
    <listitem>
     <simpara>Conección de la señal</simpara>
     <simpara>
      En este paso se escribe la función de regreso para usar. Un 
      ejemplo de ello podria ser
      <literal>
       $widget-&gt;connect(&quot;event&quot;, &quot;my_focus_func&quot;);
      </literal>,
      donde &quot;event&quot; es un estado predefinifo como 
      <signalname>clicked</signalname> y &quot;my_focus_func&quot; es la
      llamada a la subrutina.
     </simpara>
    </listitem>
    <listitem>
     <simpara>exhibición</simpara>
     <simpara>
      Describe si el widget esta en la pantalla del usuario.
      Se realiza llamando a
      <literal>$widget-&gt;show();</literal> y finalizando con
      <literal>$widget-&gt;hide();</literal>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>Destrucción</simpara>
     <simpara>
      Esto ocurre cuando la función <function>gtk::main_quit()</function> 
      se llama. Todas las acciones necesarias para ello son manejadas internamente.
     </simpara>
    </listitem>
   </orderedlist>
  </para>
 </sect1>

 <sect1 id="gtk.containers.whatare">
  <title>¿ Qué son los Containers?</title>
  <simpara>
   Un container es simplemente un <link linkend="gtk.widgets.whatare">widget</link>
   que puede contener otro  widget.  La gran mayoria de widgets caen dentro de esta 
   clase; ejemplos obvios son <classname>GtkWindow</classname>, 
   <classname>GtkTable</classname> y <classname>GtkBox</classname>.  
   Ademas de esta propiedad son exactamente iguales a otros widgets, y pueden 
   sumarseles a otros containers como asi también el soporte de widgets hijos.  
   Son derivados de la clase base <classname>GtkContainer</classname>, 
   que es derivada de la clase <classname>GtkWidget</classname>.
  </simpara>
 </sect1>

</chapter>
