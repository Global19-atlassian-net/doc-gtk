<?xml version="1.0" encoding="ISO-8859-1" ?>
<refentry id="glade.functions">
 <refmeta>
  <refentrytitle>Misc Glade Functions</refentrytitle>
  <shortdesc>Prefix the functions with "libglade::".</shortdesc>
 </refmeta>
 
  <method id="glade.method.get_widget_name">
   <funcsynopsis>
    <funcprototype>
     <funcdef>string <function>get_widget_name</function></funcdef>
     <paramdef><classname>GtkWidget</classname> <parameter>widget</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the name of a widget from a glade file.
   </shortdesc>
   <desc>
    <simpara>
     Returns the name of a widget which has been loaded from 
     a glade file.
    </simpara>
    <simpara>
     If the widget has been created the "normal" way and not
     with glade, NULL is returned.
    </simpara>
    <para>
     In the example you could use a
     <programlisting role="php">
<![CDATA[
var_dump( libglade::get_widget_name( $btnClose));
]]>     
     </programlisting>
     which would return <returnvalue>string(8) "btnClose"</returnvalue>.
    </para>
   </desc>
  </method>

  <method id="glade.method.get_widget_long_name">
   <funcsynopsis>
    <funcprototype>
     <funcdef>string <function>get_widget_long_name</function></funcdef>
     <paramdef><classname>GtkWidget</classname> <parameter>widget</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the long name of a widget from a glade file.
   </shortdesc>
   <desc>
    <simpara>
     Returns the long name of a widget which has been loaded from 
     a glade file.
    </simpara>
    <simpara>
     If the widget has been created the "normal" way and not
     with glade, NULL is returned.
    </simpara>
    <para>
     In the example you could use a
     <programlisting role="php">
<![CDATA[
var_dump( libglade::get_widget_long_name( $btnClose));
]]>     
     </programlisting>
     which would return <returnvalue>string(24) "dlgHellow.vbox1.btnClose"</returnvalue>.
    </para>
   </desc>
  </method>

  <method id="glade.method.get_widget_tree">
   <funcsynopsis>
    <funcprototype>
     <funcdef><classname>GladeXML</classname> <function>get_widget_tree</function></funcdef>
     <paramdef><classname>GtkWidget</classname> <parameter>widget</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the glade object to a widget.
   </shortdesc>
   <desc>
    <simpara>
     Returns the glade object which created the given 
     <parameter>widget</parameter>.
    </simpara>
   </desc>
  </method>
  
  <method id="glade.method.xml_new_from_memory">
   <funcsynopsis>
    <funcprototype>
     <funcdef><classname>GladeXML</classname> <function>xml_new_from_memory</function></funcdef>
     <paramdef>string <parameter>buffer</parameter></paramdef>
     <paramdef>int <parameter>size</parameter></paramdef>
     <paramdef>string <parameter>root</parameter></paramdef>
     <paramdef>string <parameter>domain</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Creates a glade object from a string instead of a file.
   </shortdesc>
   <desc>
    <simpara>
     Creates a glade object from a string instead of a file.
     This can be used to e.g. dynamically load glade user interface
     definitions from a remote server without having to store them
     in a file.
    </simpara>
    <simpara>
     The function behaves exactly like the
     <classname>GladeXML</classname> constructor, except the fact that
     you pass a string (and the string length) to the function.
     Note that - other than the constructor - all parameters are
     required.
    </simpara>
   </desc>
  </method>

</refentry>
