<?xml version="1.0" encoding="ISO-8859-1" ?>
<classentry id="gtk.gtkmenu">
 <classmeta>
  <classtitle>GtkMenu</classtitle>
  <classparent>GtkMenuShell</classparent>
  <shortdesc>
   Popup container for menu items.
  </shortdesc>
  <desc>
   <simpara>
    <classname>GtkMenu</classname> is a menushell widget, designed
    to exclusively hold <classname>GtkMenuItem</classname>s.  It may be a
    standalone popup widget, or may be associated either with a higher-level 
    <classname>GtkMenuItem</classname> within a 
    <classname>GtkMenuBar</classname>, or with a 
    <classname>GtkOptionMenu</classname>.
   </simpara>
   <simpara>
    Note that a <classname>GtkMenu</classname> in any form is effectively a
    modal popup widget.  There are keybindings in place here specifically to
    counteract this apparent isolation, by allowing the 
    <literal>Up</literal>, <literal>Down</literal>, <literal>Left</literal> 
    and <literal>Right</literal> arrow keys to navigate multiple menus with
    regard to the relationships between those menus (i.e. parent and child, 
    next and previous).  These are fairly rudimentary in the current version
    of GTK+ used in PHP-GTK, but have been improved recently.
   </simpara>
   <simpara>
    See also: 
    <classname>GtkCombo</classname>, <classname>GtkCTree</classname>, 
    <classname>GtkItemFactory</classname>, <classname>GtkList</classname>, 
    <classname>GtkRadioButton</classname>, <classname>GtkToolbar</classname>.
   </simpara>
  </desc>
 </classmeta>

 <constructor id="gtk.gtkmenu.constructor">
  <funcsynopsis>
   <funcprototype>
    <funcdef> <function>GtkMenu</function></funcdef>
    <paramdef>void</paramdef>
   </funcprototype>
  </funcsynopsis>
  <shortdesc>
   Creates the structure to hold a menu's content.
  </shortdesc>
  <desc>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

$menu = &amp;new GtkMenu();

?>
]]>
     </programlisting>
    </informalexample>
    creates an empty popup container widget that will exclusively hold 
    <classname>GtkMenuItem</classname>s.  It may be instantiated alone as an
    event-driven popup menu (see the example below) or it can be associated
    with a higher-level <classname>GtkMenuItem</classname> as a submenu, or
    a <classname>GtkOptionMenu</classname> as a menu.  When it is associated
    with an object in this way, the menu will pop up in response to the
    object's activation.
   </para>
   <para>
    <example>
     <title>Creating a right-click popup menu</title>
     <programlisting role="php">
<![CDATA[
<?php

dl('php_gtk.' . (strstr(PHP_OS, 'WIN') ? 'dll' : 'so'));

function show_popup($event, $menu) {
if($event-&gt;button == 3) {
    $menu-&gt;popup(null, null, null, $event-&gt;button, $event-&gt;time);
}

$window = &amp;new GtkWindow();
$window-&gt;set_default_size(350, 450);
$window-&gt;connect_object('destroy', array('gtk', 'main_quit'));

$menu = &amp;new GtkMenu();
$accel = $menu-&gt;ensure_uline_accel_group();

$open = &amp;new GtkMenuItem(&quot;Open&quot;);
$open-&gt;lock_accelerators();
$menu-&gt;append($open);
$save = &amp;new GtkMenuItem(&quot;Save as ...&quot;);
$save-&gt;lock_accelerators();
$menu-&gt;append($save); 
$separator = &amp;new GtkMenuItem();
$separator-&gt;set_sensitive(false);
$menu-&gt;append($separator);

$exit = &amp;new GtkMenuItem(&quot;&quot;);
$accel_label = $exit-&gt;child;
$accel_key = $accel_label-&gt;parse_uline(&quot;E_xit&quot;);
$exit-&gt;add_accelerator('activate', $accel, $accel_key, GDK_CONTROL_MASK, 
GTK_ACCEL_VISIBLE);
$exit-&gt;lock_accelerators();
$exit-&gt;connect_object('activate', array('gtk', 'main_quit'));
$menu-&gt;append($exit);
$menu-&gt;show_all();

$window-&gt;add_events(GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK);
$window-&gt;connect_object('button-press-event', 'show_popup', $menu);
$window-&gt;show_all();

gtk::main();

?>
]]>
     </programlisting>
    </example>
   </para>
  </desc>
 </constructor>

 <methods>

 <!-- DELETED append(), prepend(), insert() as they are already covered in
 GtkMenuShell & are only wrappers here - sf jan 02 -->

  <method id="gtk.gtkmenu.method.popup">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>popup</function></funcdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter><optional>parent_menu_shell</optional></parameter>
     </paramdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter><optional>parent_menu_item</optional></parameter>
     </paramdef>
     <paramdef>
      <literal>GtkMenuPositionFunc</literal> 
      <parameter><optional>pos_function</optional></parameter>
     </paramdef>
     <paramdef>int <parameter>button</parameter></paramdef>
     <paramdef>int <parameter>activate_time</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Pops up a menu.
   </shortdesc>
   <desc>
    <simpara>
     The <function class="GtkMenu">popup</function> method looks fairly
     intimidating at the outset, but is actually quite straightforward to
     use.
    </simpara>
    <simpara>
     The first thing to be aware of is that the 
     <parameter>parent_menu_shell</parameter> and
     <parameter>parent_menu_item</parameter> parameters would generally
     only be used internally, to associate the popped-up menu with a given
     <classname>GtkMenuShell</classname> descendant, or 
     <classname>GtkMenuItem</classname>, or both.  In a freestanding popup
     menu, both parameters should be passed as <literal>null</literal>.
    </simpara>
    <para>
     The third parameter concerns the positioning of the popup menu, and
     has as its default the position of the mouse pointer.  In order to
     set a different position, you will need to set up a function that will
     return an array of the co-ordinates, and call it from the 
     <parameter>pos_function</parameter> parameter.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php

function position() {
$position = array(300, 200);
return $position;
}

$filemenu-&gt;popup(null, null, 'position', $event-&gt;button, 
$event-&gt;time);

?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     The fourth parameter refers to the mouse button emitting the
     <signalname class="GtkWidget">button-release-event</signalname> that
     will be compared with the button emitting the 
     <signalname class="GtkWidget">button-press-event</signalname> in
     order to set the timer in the final parameter.  This only works if
     you happen to be triggering the popup function with a button press,
     and the button pressed and button released are the same - in all other
     situations, the time element is ignored.  However, setting the 
     <parameter>button</parameter> parameter to <literal>1</literal> or 
     <literal>3</literal> will speed up the deactivation when the left or
     right mouse button is released respectively, regardless of the callback
     event.
    </simpara>
    <simpara>
     The final parameter, <parameter>activate_time</parameter>, sets the
     time conditions for the menu's deactivation.  If you have used a button
     press event and ensured that the initial press and later release have
     the same valid integer value, then setting the timer to 
     <literal>0</literal> will make the menu disappear as soon as the user
     releases the mouse-button that triggered it.  The safest setting for
     this parameter is 
     <programlisting>
<![CDATA[
<?php

$event-&gt;time

?>
]]>

     </programlisting> - 
     this being a setting that all <classname>GdkEvent</classname> 
     structures share; it causes the popup menu to react as you'd expect it
     to, and won't spring any surprises if you duplicate or otherwise adapt
     the original callback event.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkmenu.method.reposition">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>reposition</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Repositions menu.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkMenu">reposition</function> is used internally
     to reposition a <classname>GtkMenuItem</classname>'s submenu according
     to the results of the position function called in the 
     <function class="GtkMenu">popup</function> method.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkmenu.method.popdown">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>popdown</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Pops down menu.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkMenu">popdown</function> is used internally to
     de-reference a popup menu.  It is one of the methods that is called
     when a menu emits the 
     <signalname class="GtkMenuShell">deactivate</signalname> signal.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkmenu.method.get_active">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkWidget</classname> <function>get_active</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Gets currently selected <classname>GtkMenuItem</classname>.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkMenu">get_active</function> can be used to
     retrieve the currently selected <classname>GtkMenuItem</classname> 
     object through the menu.  Note that this method returns the menu item
     object itself, and is really only useful for comparison against a set
     of criteria.  In most instances it would be more efficient to connect
     the individual menu item's 
     <signalname class="GtkMenuItem">activate</signalname> signal.
    </simpara>
    <simpara>
     The <function class="GtkMenu">get_active</function> method is used
     internally in <classname>GtkOptionMenu</classname>'s 
     <function class="GtkOptionMenu">set_history</function> to compare
     the menu item currently selected by the user against that previously
     displayed.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkmenu.method.set_active">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_active</function></funcdef>
     <paramdef>int <parameter>index</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets active menu item.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkMenu">set_active</function> sets the 'active'
     <classname>GtkMenuItem</classname> in a <classname>GtkMenu</classname>. 
     Note that this is not the same thing as calling the 
     <function class="GtkItem">select</function> from the menu item, but is
     a way of adding to the given item's reference count from the menu.
    </simpara>
    <simpara>
     The <function class="GtkMenu">set_active</function> method is mainly
     used internally in GTK, as part of <classname>GtkOptionMenu</classname>'s 
     <function class="GtkOptionMenu">set_history</function> method.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkmenu.method.set_accel_group">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_accel_group</function></funcdef>
     <paramdef>
      <classname>GtkAccelGroup</classname> 
      <parameter>accel_group</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the <classname>GtkAccelGroup</classname> holding global accelerators.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkMenu">set_accel_group</function> sets the global
     accelerator group for a <classname>GtkMenu</classname>.  A 
     <classname>GtkAccelGroup</classname> set in this way should also be
     designated as toplevel.  This is achieved by calling 
     <function class="GtkWindow">add_accel_group</function> from the
     corresponding toplevel <classname>GtkWindow</classname>.
    </simpara>
    <simpara>
     Note that there is a bug in the win32 version of GTK+ currently used
     in PHP-GTK.  The accelerator key appears as it should, but does not
     connect to its designated signal where the accel group has been newly
     created and set in this way.  Also, much of the accelerator locking
     mechanism has been replaced in GTK2.  Future-friendly code can be
     created by using <classname>GtkItemFactory</classname> to create your
     menus; however, the same limitations in functionality currently apply.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkmenu.method.get_accel_group">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkAccelGroup</classname> 
      <function>get_accel_group</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Gets the <classname>GtkAccelGroup</classname> holding global
    accelerators.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkMenu">get_accel_group</function> returns the
     global accelerator group that is used in the calling 
     <classname>GtkMenu</classname>.
    </simpara>
    <simpara>
     Note that this method does not work as it should in the win32 version
     of GTK+ currently used by PHP-GTK.  Also, much of the accelerator
     lock mechanism has been replaced in GTK2.  Future-friendly code can be
     created by using <classname>GtkItemFactory</classname> to create your
     menus; however, the same limitations in functionality currently apply.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkmenu.method.get_uline_accel_group">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkAccelGroup</classname> 
      <function>get_uline_accel_group</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Gets the internally-used <classname>GtkAccelGroup</classname>, if there
    is one.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkMenu">get_uline_accel_group</function> returns
     the <classname>GtkAccelGroup</classname> used by GTK during the time
     that the <classname>GtkMenu</classname> is popped up.  It is used
     internally to allow the user to modify the key accelerators where
     they have not been locked.
    </simpara>
    <simpara>
     Note that this method does not work as it should in the win32 version
     of GTK+ currently used by PHP-GTK.  Also, this method has been
     eliminated from later versions of GTK+, and much of the accelerator
     lock mechanism replaced.  Future-friendly code can be created by using
     <classname>GtkItemFactory</classname> to create your menus; however,
     the same limitations in functionality currently apply.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkmenu.method.ensure_uline_accel_group">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkAccelGroup</classname> 
      <function>ensure_uline_accel_group</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Creates a <classname>GtkAccelGroup</classname> for internal menu use if
    one does not exist.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkMenu">ensure_uline_accel_group</function> returns
     the <classname>GtkAccelGroup</classname> used by GTK during the time
     that the calling <classname>GtkMenu</classname> is popped up, if one
     exists, and creates one for internal use if there is none.
    </simpara>
    <simpara>
     This is currently the only way to get accelerators working properly
     under win32.  It is also used internally for popup menus in 
     <classname>GtkItemFactory</classname>.  However, note that this method
     has been eliminated from later versions of GTK+.  The replacements in
     <classname>GtkItemFactory</classname> are purely internal; the new
     methods in <classname>GtkMenu</classname> are not.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkmenu.method.attach_to_widget">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>attach_to_widget</function></funcdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>attach_widget</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets attachment to specified widget.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkMenu">attach_to_widget</function> is mostly used
     internally to set up the relationship between the 'parent' - usually a 
     <classname>GtkMenuItem</classname> - and the 
     <classname>GtkMenu</classname> that is calling the method.
    </simpara>
    <simpara>
     This is not the same thing as setting a submenu for a menu item (use 
     <function class="GtkMenuItem">set_submenu</function> for that), but
     creates an underlying relationship that subsumes the reference count
     on the menu to that of the <parameter>attach_widget</parameter>.  The
     <classname>GtkWidget</classname> method 
     <function class="GtkWidget">set_parent</function> has very similar
     functionality, but is not appropriate here because the menu is itself
     a toplevel widget.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkmenu.method.detach">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>detach</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Detaches menu from associated widget.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkMenu">detach</function> detaches the calling 
     <classname>GtkMenu</classname> from its current parent widget.  This
     method is used internally when the menu is being destroyed.
    </simpara>
    <simpara>
     Calling the <function class="GtkMenu">detach</function> method after
     the menu has been set as a submenu, unsets that relationship in exactly
     the same way as <function class="GtkMenuItem">remove_submenu</function> 
     would.  The difference is that the attached widget does not necessarily
     need to be a <classname>GtkMenuItem</classname> for 
     <function class="GtkMenu">detach</function> to work.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkmenu.method.get_attach_widget">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkWidget</classname> 
      <function>get_attach_widget</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the widget currently attached.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkMenu">get_attach_widget</function> returns the
     object to which the calling <classname>GtkMenu</classname> is currently
     attached.  Use <function class="GtkWidget">get_name</function> to
     further identify the returned object, or else compare it with likely
     candidates.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkmenu.method.set_tearoff_state">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_tearoff_state</function></funcdef>
     <paramdef>bool <parameter>torn_off</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Toggles whether menu is torn off.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkMenu">set_tearoff_state</function> when set to
     <literal>true</literal> creates a non-resizeable, decorated, top-level
     window, sized to fit the menu contents and iconized in the task bar. 
     The torn-off menu does not need a further parent window, and can act as
     a standalone widget in its own right.
    </simpara>
    <simpara>
     Where the same menu has also been set as a submenu on an existing
     <classname>GtkMenuItem</classname> or as a popup, the menu data is
     displayed in the currently-visible menu shell.
    </simpara>
    <simpara>
     Note that the <classname>GtkMenu</classname> in this form is not and
     cannot be made modal.  It could be described as a persistent popup.
    </simpara>
    <para>
     It is not possible to connect directly to the tearoff window housing the
     menu, because it has not been exposed as a property in PHP-GTK - with
     good reason, as the reference counting has been juggled in GTK+ to make
     the widget possible in the first place.  In order to connect the window's
     delete event to something meaningful, you will need to do something like
     this:
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php

dl('php_gtk.' . (strstr(PHP_OS, 'WIN') ? 'dll' : 'so'));

function exit_activated($menu) {
$menu-&gt;destroy();
}

$menu = &amp;new GtkMenu();
$window = $filemenu-&gt;parent;
$window-&gt;ref();
$window-&gt;set_flags(GTK_HAS_GRAB);
$menu-&gt;connect_object('destroy', array('gtk', 'main_quit'));

/*  Append and connect your menu items here, but note that any exit item
 must call $menu-&gt;destroy() rather than the usual gtk::main_quit(), in
 order to avoid the main loop being quitted twice over  */

$exit = &amp;new GtkMenuItem(&quot;Exit&quot;);
$exit-&gt;connect_object('activate', 'exit_activated', $menu);

$menu-&gt;set_title(&quot;Tested!&quot;);
$menu-&gt;set_tearoff_state(true);
$menu-&gt;show_all();

gtk::main();

?>
]]>
      </programlisting>
     </informalexample>
     Notice that the <signalname class="GtkObject">destroy</signalname> 
     signal must be connected in this instance, and not the window's 
     <signalname class="GtkWidget">delete-event</signalname> signal.  This
     is because the parent window accessed is not the same window as has the
     window decorations, but is capable of accessing the internal destroy
     signal triggered by that window if it is given grab beforehand, and can
     propagate the event to all its children.
    </para>
    <simpara>
     You will also spot that this means the menu needs to be rebuilt any
     time it is called.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkmenu.method.set_title">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_title</function></funcdef>
     <paramdef>string <parameter>title</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the title for a torn off menu.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkMenu">set_title</function> sets the window title
     for a menu that has been detached from its parent through either a 
     <classname>GtkTearoffMenuItem</classname> widget or the 
     <function class="GtkMenu">set_tearoff_state</function> method.  As with
     all window titles, the text will be truncated to fit the area available.
    </simpara>
    <simpara>
     Note that the title needs to be set prior to the menu's becoming torn
     off.
    </simpara>
    <simpara>
     If the title is not set, the torn off menu will display in its title bar
     either the text in the parent <classname>GtkMenuItem</classname>'s label
     or, where there is none, the full file path.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkmenu.method.reorder_child">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>reorder_child</function></funcdef>
     <paramdef>
      <classname>GtkWidget</classname> <parameter>child</parameter>
     </paramdef>
     <paramdef>int <parameter>position</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Moves specified item to given position.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkMenu">reorder_child</function> moves the specified
     <classname>GtkMenuItem</classname> from its current position in the 
     <classname>GtkMenu</classname> to the position given.  All items prior
     to the new position remain unchanged, and the later items all move on
     one.
    </simpara>
    <simpara>
     The first position is <literal>0</literal>, and the final position can
     always be found by setting <literal>-1</literal>.
    </simpara>
   </desc>
  </method>

 </methods>

</classentry>
