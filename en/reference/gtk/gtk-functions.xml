<?xml version="1.0" encoding="ISO-8859-1" ?>
<refentry id="gtk.functions">
 <refmeta>
  <refentrytitle>GTK Functions</refentrytitle>
  <shortdesc>
   GTK functions not belonging to any class.
  </shortdesc>
 </refmeta>

  <method id="gtk.method.accel_group_get_default">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkAccelGroup</classname> 
      <function>gtk::accel_group_get_default</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Gets the toplevel window's default <classname>GtkAccelGroup</classname>.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.button_box_set_child_ipadding_default">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void 
      <function>gtk::button_box_set_child_ipadding_default</function>
     </funcdef>
     <paramdef>int <parameter>ipad_x</parameter></paramdef>
     <paramdef>int <parameter>ipad_y</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets <classname>GtkButtonBox</classname> default child internal padding.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.button_box_set_child_size_default">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void 
      <function>gtk::button_box_set_child_size_default</function>
     </funcdef>
     <paramdef>int <parameter>min_width</parameter></paramdef>
     <paramdef>int <parameter>min_height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets <classname>GtkButtonBox</classname> default minimum child size.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.check_version">
   <funcsynopsis>
    <funcprototype>
     <funcdef>string <function>gtk::check_version</function></funcdef>
     <paramdef>int <parameter>required_major</parameter></paramdef>
     <paramdef>int <parameter>required_minor</parameter></paramdef>
     <paramdef>int <parameter>required_micro</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Checks which version of GTK+ is being used.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.drag_finish">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::drag_finish</function></funcdef>
     <paramdef>
      <classname>GdkDragContext</classname> 
      <parameter>context</parameter>
     </paramdef>
     <paramdef>bool <parameter>success</parameter></paramdef>
     <paramdef>bool <parameter>del</parameter></paramdef>
     <paramdef>int <parameter>time</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.drag_get_source_widget">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkWidget</classname> 
      <function>gtk::drag_get_source_widget</function>
     </funcdef>
     <paramdef>
      <classname>GdkDragContext</classname> 
      <parameter>context</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.drag_set_default_icon">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::drag_set_default_icon</function></funcdef>
     <paramdef>
      <classname>GdkColormap</classname> 
      <parameter>colormap</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkPixmap</classname> 
      <parameter>pixmap</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkBitmap</classname> 
      <parameter>mask</parameter>
     </paramdef>
     <paramdef>int <parameter>hot_x</parameter></paramdef>
     <paramdef>int <parameter>hot_y</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.drag_set_icon_default">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::drag_set_icon_default</function></funcdef>
     <paramdef>
      <classname>GdkDragContext</classname> 
      <parameter>context</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.drag_set_icon_pixmap">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::drag_set_icon_pixmap</function></funcdef>
     <paramdef>
      <classname>GdkDragContext</classname> 
      <parameter>context</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkColormap</classname> 
      <parameter>colormap</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkPixmap</classname> 
      <parameter>pixmap</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkBitmap</classname> 
      <parameter>mask</parameter>
     </paramdef>
     <paramdef>int <parameter>hot_x</parameter></paramdef>
     <paramdef>int <parameter>hot_y</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.drag_set_icon_widget">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::drag_set_icon_widget</function></funcdef>
     <paramdef>
      <classname>GdkDragContext</classname> 
      <parameter>context</parameter>
     </paramdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
     <paramdef>int <parameter>hot_x</parameter></paramdef>
     <paramdef>int <parameter>hot_y</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.drag_dest_handle_event">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::drag_dest_handle_event</function></funcdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>toplevel</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkEvent</classname> 
      <parameter>event</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.drag_source_handle_event">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void 
      <function>gtk::drag_source_handle_event</function>
     </funcdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkEvent</classname> 
      <parameter>event</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.draw_arrow">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::draw_arrow</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
       <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkShadowType</enumname> 
      <parameter>shadow_type</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkArrowType</enumname> 
      <parameter>arrow_type</parameter>
     </paramdef>
     <paramdef>bool <parameter>fill</parameter></paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Draws an arrow.
   </shortdesc>
   <desc>
    <simpara>
     The chief advantage of drawing your own GTK arrow rather than using the 
     <classname>GtkArrow</classname> widget is that you can shape it, using
     the <parameter>width</parameter> and <parameter>height</parameter> 
     parameters.  The <parameter>fill</parameter> parameter refers to the
     color of the arrow, with <literal>false</literal> giving it the same
     color as the area it is drawn onto.  All positions and sizes are 
     absolute in terms of the underlying drawable.
    </simpara>
    <simpara>
     <literal>
      gtk::draw_arrow($style, $gdkwindow, GTK_STATE_NORMAL, GTK_SHADOW_OUT, 
      GTK_ARROW_RIGHT, false, $x, $y, $width, $height);
     </literal>
    </simpara>
   </desc>
  </method>

  <method id="gtk.method.draw_box">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::draw_box</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkShadowType</enumname> 
      <parameter>shadow_type</parameter>
     </paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Draws a box.
   </shortdesc>
   <desc>
    <simpara>
     This is the simplest way to draw a box, with or without a shadow. 
     Any coloring is completely dependant on the 
     <classname>GtkStyle</classname> that is passed as the first parameter. 
    </simpara>
    <simpara>
     <literal>
      gtk::draw_box($style, $gdkwindow, GTK_STATE_ACTIVE, GTK_SHADOW_IN, 
      $x, $y, $width, $height);
     </literal>
    </simpara>
   </desc>
  </method>

  <method id="gtk.method.draw_diamond">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::draw_diamond</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkShadowType</enumname> 
      <parameter>shadow_type</parameter>
     </paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.draw_hline">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::draw_hline</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>int <parameter>x1</parameter></paramdef>
     <paramdef>int <parameter>x2</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>
    <simpara>
     See also: <function>draw_vline</function>
    </simpara>
   </desc>
  </method>

  <method id="gtk.method.draw_oval">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::draw_oval</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkShadowType</enumname> 
      <parameter>shadow_type</parameter>
     </paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Not implemented.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.draw_shadow">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::draw_shadow</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkShadowType</enumname> 
      <parameter>shadow_type</parameter>
     </paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.draw_string">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::draw_string</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>string <parameter>string</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Draws text in a given <classname>GdkWindow</classname>
   </shortdesc>
   <desc>
    <simpara>
    Draws <parameter>string</parameter> in <parameter>window</parameter>.
    <parameter>style</parameter> is used to set the style of the text to be
    written. The upper left hand corner of <parameter>string</parameter> will
    begin <parameter>x</parameter> pixesl from the left edge of
    <parameter>window</parameter> and <parameter>y</parameter> pixels from the
    top of <parameter>window</parameter>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.method.draw_vline">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::draw_vline</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>int <parameter>y1</parameter></paramdef>
     <paramdef>int <parameter>y2</parameter></paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Draws a vertical line in a given <classname>GdkWindow</classname>
   </shortdesc>
   <desc>
    <simpara>
     Draws a vertical line in <parameter>window</parameter>. The line will be
     <parameter>x</parameter> pixels from the left edge of
     <parameter>window</parameter>, start <parameter>y1</parameter> pixels
     from the top edge of <parameter>window</parameter>, and end
     <parameter>y2</parameter> pixels from the top edge of
     <parameter>window</parameter>.  <parameter>style</parameter> will be used
     to define the style of the line.
    </simpara>
   </desc>
    <simpara>
     See also: <function>draw_hline</function>
    </simpara>
  </method>

  <method id="gtk.method.entry_new_with_max_length">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkWidget</classname> 
      <function>gtk::entry_new_with_max_length</function>
     </funcdef>
     <paramdef>int <parameter>max</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Creates a limited-character <classname>GtkEntry</classname>.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.events_pending">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>gtk::events_pending</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Tests whether there are <classname>GdkEvent</classname>s queueing.
   </shortdesc>
   <desc>
    <simpara>
     <function>gtk::events_pending</function> is useful when there is
     a function that needs to be carried out during a long-running process, 
     for example, updating a status bar during an SQL query.
    </simpara>
    <para>
     The way it would be used in such a situation is to have
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php

while(gtk::events_pending()) gtk::main_iteration();

?>
]]>
      </programlisting>
     </informalexample>
     after every update that is made to the GUI.  This causes the main loop
     to run once each time events are anticipated.
    </para>
    <simpara>
     See also:  <function>gtk::main_iteration</function>, 
     <function>gtk::main_iteration_do</function>, 
     <function>gtk::timeout_add</function>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.method.false">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>gtk::false</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns false.
   </shortdesc>
   <desc>
    <simpara>
     A static function that simply returns false.  By default this is
     <literal>null</literal>; you can force a <literal>0</literal> return
     by declaring it as a PHP <literal>(int)</literal> type.
    </simpara>
   </desc>
  </method>

  <method id="gtk.method.hbutton_box_get_layout_default">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <enumname>GtkButtonBoxStyle</enumname> 
      <function>gtk::hbutton_box_get_layout_default</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns <classname>GtkHButtonBox</classname> layout default.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.hbutton_box_get_spacing_default">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int 
      <function>gtk::hbutton_box_get_spacing_default</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns <classname>GtkHButtonBox</classname> spacing default.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.grab_add">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::grab_add</function></funcdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Endows a widget with keyboard grab.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.grab_get_current">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkWidget</classname> 
      <function>gtk::grab_get_current</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns widget that currently has keyboard grab.
   </shortdesc>
   <desc>
    <simpara>
     Returns the widget which currently has the keyboard grab.
     <literal>NULL</literal> is returned if there is no active
     grab.
    </simpara>
    <simpara>
     Widgets can grab the pointer and keyboard away from other widgets. 
     This essentially means that the widget becomes "modal"; input goes 
     only to that widget, and the focus can't be changed to another widget. 
     A typical reason to grab input is to create a modal dialog; 
     if a window has the grab, interaction with other windows is blocked.
    </simpara> 
   </desc>
  </method>

  <method id="gtk.method.grab_remove">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::grab_remove</function></funcdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Removes keyboard grab from a widget.
   </shortdesc>
   <desc>
    <simpara>
     Removes the keyboard grab from the given <parameter>widget</parameter>.
    </simpara>
    <simpara>
     If you don't know what a <emphasis>grab</emphasis> is, have a 
     look at <link linked="gtk.method.grab_get_current">grab_get_current</link>
     function.
    </simpara>
   </desc>
  </method>

  <method id="gtk.method.hbutton_box_set_layout_default">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void 
      <function>gtk::hbutton_box_set_layout_default</function>
     </funcdef>
     <paramdef>
      <enumname>GtkButtonBoxStyle</enumname> 
      <parameter>layout</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets layout default for <classname>GtkHButtonBox</classname>es.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.hbutton_box_set_spacing_default">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void 
      <function>gtk::hbutton_box_set_spacing_default</function>
     </funcdef>
     <paramdef>int <parameter>spacing</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets spacing default for <classname>GtkHButtonBox</classname>es.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.idle_add">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>gtk::idle_add</function></funcdef>
     <paramdef>
      <literal>GtkFunction</literal> 
      <parameter>function</parameter>
     </paramdef>
     <paramdef>mixed 
      <parameter><optional>data</optional></parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Causes the mainloop to call a function whenever no events are to be processed.
   </shortdesc>
   <desc>
    <simpara>
     Causes the mainloop to call the given function whenever no events with 
     higher priority are to be processed.
    </simpara>
    <simpara>
     The returned number is an unique handle which you should keep saved somewhere
     for the case you want to 
     <link linked="gtk.method.idle_remove">remove</link> the idle function.
    </simpara>
   </desc>
  </method>

  <method id="gtk.method.idle_remove">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::idle_remove</function></funcdef>
     <paramdef>int <parameter>idle_handler_id</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Removes the idle function with the given id.
   </shortdesc>
   <desc>
    <simpara>
     Removes the idle function with the given
     <parameter>idle_handler_id</parameter>. You get this id when
     <link linked="gtk.method.idle_add">adding</link> an idle function
    </simpara>
   </desc>
  </method>

  <method id="gtk.method.input_add">
   <funcsynopsis>
    <funcprototype>
     <funcdef>XXX <function>gtk::input_add</function></funcdef>
     <paramdef>XXX</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.input_remove">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::input_remove</function></funcdef>
     <paramdef>int <parameter>input_handler_id</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.item_factories_path_delete">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void 
      <function>gtk::item_factories_path_delete</function>
     </funcdef>
     <paramdef>string <parameter>ifactory_path</parameter></paramdef>
     <paramdef>string <parameter>path</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.item_factory_from_path">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkItemFactory</classname> 
      <function>gtk::item_factory_from_path</function>
     </funcdef>
     <paramdef>string <parameter>path</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.item_factory_from_widget">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkItemFactory</classname> 
      <function>gtk::item_factory_from_widget</function>
     </funcdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Get the <classname>GtkItemFactory</classname> that created a widget
   </shortdesc>
   <desc>
    Returns the <classname>GtkWidgetFactory</classname> that created
    <parameter>widget</parameter>.  
   </desc>
  </method>

  <method id="gtk.method.item_factory_parse_rc">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::item_factory_parse_rc</function></funcdef>
     <paramdef>string <parameter>file_name</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.item_factory_parse_rc_string">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void 
      <function>gtk::item_factory_parse_rc_string</function>
     </funcdef>
     <paramdef>string <parameter>rc_string</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.item_factory_path_from_widget">
   <funcsynopsis>
    <funcprototype>
     <funcdef>string 
      <function>gtk::item_factory_path_from_widget</function>
     </funcdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.main">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::main</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Runs the main loop.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.main_do_event">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::main_do_event</function></funcdef>
     <paramdef>
      <classname>GdkEvent</classname> 
      <parameter>event</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Processes a single <classname>GdkEvent</classname>.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.main_iteration">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>gtk::main_iteration</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Runs the main loop once and then blocks GTK until an event is pending.
   </shortdesc>
   <desc>
    <simpara>
     Runs the main loop once (e.g. updates the GUI) and blocks until 
     an event is pending.
    </simpara>
    <simpara>
     This is useful during long-running functions which block the whole
     application. Have a look at the example at
     <link linked="gtk.method.events_pending">events_pending</link>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.method.main_iteration_do">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>gtk::main_iteration_do</function></funcdef>
     <paramdef>bool 
      <parameter><optional>blocking = TRUE</optional></parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Runs the main loop once, with optional blocking.
   </shortdesc>
   <desc>
    <simpara>
     Runs the main loop once, with optional blocking.
    </simpara>
   </desc>
  </method>

  <method id="gtk.method.main_level">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>gtk::main_level</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the main loop nesting level.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.main_quit">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::main_quit</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Quits the main loop.
   </shortdesc>
   <desc>
   </desc>
  </method>

  <method id="gtk.method.paint_arrow">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::paint_arrow</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkShadowType</enumname> 
      <parameter>shadow_type</parameter>
     </paramdef>
     <paramdef>GdkRectangle <parameter>area</parameter></paramdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
     <paramdef>string <parameter>detail</parameter></paramdef>
     <paramdef>
      <enumname>GtkArrowType</enumname> 
      <parameter>arrow_type</parameter>
     </paramdef>
     <paramdef>bool <parameter>fill</parameter></paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.paint_box">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::paint_box</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkShadowType</enumname> 
      <parameter>shadow_type</parameter>
     </paramdef>
     <paramdef>GdkRectangle <parameter>area</parameter></paramdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
     <paramdef>string <parameter>detail</parameter></paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.paint_box_gap">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::paint_box_gap</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkShadowType</enumname> 
      <parameter>shadow_type</parameter>
     </paramdef>
     <paramdef>GdkRectangle <parameter>area</parameter></paramdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
     <paramdef>string <parameter>detail</parameter></paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
     <paramdef>
      <enumname>GtkPositionType</enumname> 
      <parameter>gap_side</parameter>
     </paramdef>
     <paramdef>int <parameter>gap_x</parameter></paramdef>
     <paramdef>int <parameter>gap_width</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.paint_check">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::paint_check</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkShadowType</enumname> 
      <parameter>shadow_type</parameter>
     </paramdef>
     <paramdef>GdkRectangle <parameter>area</parameter></paramdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
     <paramdef>string <parameter>detail</parameter></paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.paint_cross">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::paint_cross</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkShadowType</enumname> 
      <parameter>shadow_type</parameter>
     </paramdef>
     <paramdef>GdkRectangle <parameter>area</parameter></paramdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
     <paramdef>string <parameter>detail</parameter></paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.paint_diamond">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::paint_diamond</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkShadowType</enumname> 
      <parameter>shadow_type</parameter>
     </paramdef>
     <paramdef>GdkRectangle <parameter>area</parameter></paramdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
     <paramdef>string <parameter>detail</parameter></paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.paint_extension">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::paint_extension</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkShadowType</enumname> 
      <parameter>shadow_type</parameter>
     </paramdef>
     <paramdef>GdkRectangle <parameter>area</parameter></paramdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
     <paramdef>string <parameter>detail</parameter></paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
     <paramdef>
      <enumname>GtkPositionType</enumname> 
      <parameter>gap_side</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.paint_flat_box">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::paint_flat_box</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkShadowType</enumname> 
      <parameter>shadow_type</parameter>
     </paramdef>
     <paramdef>GdkRectangle <parameter>area</parameter></paramdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
     <paramdef>string <parameter>detail</parameter></paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Paints a flat box.
   </shortdesc>
   <desc>
    <simpara>
     Regardless of the <enumname>GtkShadowType</enumname> detailed here, 
     the effect is similar to the box drawn using 
     <function>gtk::draw_box</function> and 
     <literal>GTK_SHADOW_NONE</literal>.
    </simpara>
    <simpara>
     The <classname>GdkRectangle</classname> used should be in the same
     position and have the same dimensions as those passed in the function,
     as otherwise only the overlap between the two rectangles will be
     displayed, or nothing at all if there is no overlapping area. 
     The <parameter>detail</parameter> parameter actually does nothing here, 
     but is needed for back compatibility.  Passing it as 
     <literal>null</literal>, or as any string you feel, is okay.
    </simpara>
    <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
$rectangle = &new GdkRectangle($x, $y, $width, $height);
gtk::paint_flat_box($style, $gdkwindow, GTK_STATE_ACTIVE, GTK_SHADOW_NONE, 
$rectangle, $drawingarea, null, $x, $y, $width, $height);
]]>
      </programlisting>
     </informalexample>
    </para>
   </desc>
  </method>

  <method id="gtk.method.paint_focus">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::paint_focus</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>GdkRectangle <parameter>area</parameter></paramdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
     <paramdef>string <parameter>detail</parameter></paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    A quick way to draw focus-like shadow around a given rectangle.
   </shortdesc>
   <desc>
    <simpara>
     <function>gtk::paint_focus</function> is a convenience function
     that draws a dark shadow along the left and top sides of the given
     rectangle, making it appear as GTK widgets generally do when they
     have focus.
    </simpara>
    <simpara>
     This is the only function that uses the <parameter>detail</parameter> 
     parameter at all now; if you pass <literal>'set-mode'</literal> as
     that parameter, the shadow will appear as long dashes rather than as
     a continuous line.  Any other string is regarded the same as if it
     were <literal>null</literal>.
    </simpara>
    <simpara>
     The other parameters are on the whole self-explanatory.  The 
     <parameter>widget</parameter> parameter refers to the widget that is
     being drawn upon (usually a <classname>GtkDrawingArea</classname>).
    </simpara>
   </desc>
  </method>

  <method id="gtk.method.paint_handle">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::paint_handle</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkShadowType</enumname> 
      <parameter>shadow_type</parameter>
     </paramdef>
     <paramdef>GdkRectangle <parameter>area</parameter></paramdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
     <paramdef>string <parameter>detail</parameter></paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
     <paramdef>
      <enumname>GtkOrientation</enumname> 
      <parameter>orientation</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.paint_hline">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::paint_hline</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>GdkRectangle <parameter>area</parameter></paramdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
     <paramdef>string <parameter>detail</parameter></paramdef>
     <paramdef>int <parameter>x1</parameter></paramdef>
     <paramdef>int <parameter>x2</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.paint_option">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::paint_option</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkShadowType</enumname> 
      <parameter>shadow_type</parameter>
     </paramdef>
     <paramdef>GdkRectangle <parameter>area</parameter></paramdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
     <paramdef>string <parameter>detail</parameter></paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.paint_oval">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::paint_oval</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkShadowType</enumname> 
      <parameter>shadow_type</parameter>
     </paramdef>
     <paramdef>GdkRectangle <parameter>area</parameter></paramdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
     <paramdef>string <parameter>detail</parameter></paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Not implemented.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.paint_ramp">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::paint_ramp</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkShadowType</enumname> 
      <parameter>shadow_type</parameter>
     </paramdef>
     <paramdef>GdkRectangle <parameter>area</parameter></paramdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
     <paramdef>string <parameter>detail</parameter></paramdef>
     <paramdef>
      <enumname>GtkArrowType</enumname> 
      <parameter>arrow_type</parameter>
     </paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.paint_shadow">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::paint_shadow</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
      </paramdef>
     <paramdef>
      <enumname>GtkShadowType</enumname> 
      <parameter>shadow_type</parameter>
     </paramdef>
     <paramdef>GdkRectangle <parameter>area</parameter></paramdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
     <paramdef>string <parameter>detail</parameter></paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.paint_shadow_gap">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::paint_shadow_gap</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkShadowType</enumname> 
      <parameter>shadow_type</parameter>
     </paramdef>
     <paramdef>GdkRectangle <parameter>area</parameter></paramdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
     <paramdef>string <parameter>detail</parameter></paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
     <paramdef>
      <enumname>GtkPositionType</enumname> 
      <parameter>gap_side</parameter>
     </paramdef>
     <paramdef>int <parameter>gap_x</parameter></paramdef>
     <paramdef>int <parameter>gap_width</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.paint_slider">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::paint_slider</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkShadowType</enumname> 
      <parameter>shadow_type</parameter>
     </paramdef>
     <paramdef>GdkRectangle <parameter>area</parameter></paramdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
     <paramdef>string <parameter>detail</parameter></paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
     <paramdef>
      <enumname>GtkOrientation</enumname> 
      <parameter>orientation</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.paint_string">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::paint_string</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>GdkRectangle <parameter>area</parameter></paramdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
     <paramdef>string <parameter>detail</parameter></paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>string <parameter>string</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.paint_tab">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::paint_tab</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkShadowType</enumname> 
      <parameter>shadow_type</parameter>
     </paramdef>
     <paramdef>GdkRectangle <parameter>area</parameter></paramdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
     <paramdef>string <parameter>detail</parameter></paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.paint_vline">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::paint_vline</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state_type</parameter>
     </paramdef>
     <paramdef>GdkRectangle <parameter>area</parameter></paramdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
     <paramdef>string <parameter>detail</parameter></paramdef>
     <paramdef>int <parameter>y1</parameter></paramdef>
     <paramdef>int <parameter>y2</parameter></paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.preview_get_cmap">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkColormap</classname> 
      <function>gtk::preview_get_cmap</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.preview_get_visual">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkVisual</classname> 
      <function>gtk::preview_get_visual</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.preview_reset">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::preview_reset</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.preview_set_color_cube">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::preview_set_color_cube</function></funcdef>
     <paramdef>int <parameter>nred_shades</parameter></paramdef>
     <paramdef>int <parameter>ngreen_shades</parameter></paramdef>
     <paramdef>int <parameter>nblue_shades</parameter></paramdef>
     <paramdef>int <parameter>ngray_shades</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.preview_set_gamma">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::preview_set_gamma</function></funcdef>
     <paramdef>double <parameter>gamma</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.preview_set_install_cmap">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void 
      <function>gtk::preview_set_install_cmap</function></funcdef>
     <paramdef>int <parameter>install_cmap</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.preview_set_reserved">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::preview_set_reserved</function></funcdef>
     <paramdef>int <parameter>nreserved</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.quit_add">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>gtk::quit_add</function></funcdef>
     <paramdef>int
      <parameter>level</parameter>
     </paramdef>
     <paramdef>string
      <parameter>callback</parameter>
     </paramdef>
     <paramdef>mixed
      <parameter><optional>data</optional></parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Register a function to be called when a main loop level is exited.
   </shortdesc>
   <desc>
    <simpara>
     Registers the function <parameter>callback</parameter> to be called when
     main loop level <parameter>level</parameter> exits. If
     <parameter>data</parameter> is given, it will be passed to
     <parameter>callback</parameter> when called. Adding a function using
     <function>gtk::quit_add</function> is similar to connecting a method to the
     destroy signal for a gtk loop.
    </simpara>
    <simpara>
     <function>gtk::quit_add</function> returns an integer identifier which can be
     passed to <function>gtk::quit_remove</function> in order to prevent the
     function from being called.
    </simpara>
    <simpara>
     See also: <function>gtk::quit_remove</function>
    </simpara>
   </desc>
  </method>

  <method id="gtk.method.quit_remove">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::quit_remove</function></funcdef>
     <paramdef>int <parameter>quit_handler_id</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Unregister a function from being called when a main loop level is exited.
   </shortdesc>
   <desc>
    <simpara>
     Unregisters a function which was preivously registered by calling
     <function>gtk::quit_add</function>. <parameter>quit_handler_id</parameter> is
     the value returned from <function>gtk::quit_add</function>.
    </simpara>
    <simpara>
     See also: <function>quit_add</function>
    </simpara>
   </desc>
  </method>

  <method id="gtk.method.rc_add_default_file">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::rc_add_default_file</function></funcdef>
     <paramdef>string <parameter>filename</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Add a file to the list of files to be parsed at the end of gtk_init().
   </shortdesc>
   <desc>
    <simpara>
     Adds a file to the list of files to be parsed at the end of gtk_init().
     The default file to be parsed is <literal>~/.gtkrc</literal>. This file
     does not need to be added using <function>gtk::rc_add_default_file</function>
     in order to be parsed.
    </simpara>
    <simpara>
     See also: <function>gtk::rc_parse</function>
    </simpara>
   </desc>
  </method>

  <!-- The GTK docs say that this method shouldn't be used in applications.
  <method id="gtk.method.rc_find_module_in_path">
   <funcsynopsis>
    <funcprototype>
     <funcdef>string 
      <function>gtk::rc_find_module_in_path</function>
     </funcdef>
     <paramdef>string <parameter>module_file</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>
  -->
  
  <method id="gtk.method.rc_get_module_dir">
   <funcsynopsis>
    <funcprototype>
     <funcdef>string <function>gtk::rc_get_module_dir</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Return the directory that PHP-GTK looks for theme engines in.
   </shortdesc>
   <desc>
    <simpara>
     Returns the directory that PHP-GTK looks for theme engines in. The
     default theme directory is <literal>/usr/lib/gtk/themes/engines/</literal>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.method.rc_get_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkStyle</classname> 
      <function>gtk::rc_get_style</function>
     </funcdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>widget</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Return the <classname>GtkStyle</classname> that will be applied to the
    widget.
   </shortdesc>
   <desc>
    <simpara>
     Returns the <classname>GtkStyle</classname> that will be applied to
     <parameter>widget</parameter>.
    </simpara>
    <simpara>
     <function>gtk::rc_get_style</function> finds all rc styles that will be
     applied to <parameter>widget</parameter> and combines them into one
     <classname>GtkStyle</classname> widget representing the final appearance
     of the <parameter>widget</parameter>.
    </simpara>
    <para>
     <example>
      <title>Getting the rc style for a widget</title>
      <programlisting role="php">
<![CDATA[
<?php

// Create a backgound style to apply to buttons only.
$style = 'style "button" { bg[NORMAL] = "#ff6060" }';
gtk::rc_parse_string($style);

// Create a foreground style that applies to the entire application.
$style = 'style "window" { fg[NORMAL] = "#ffffff" }';
gtk::rc_parse_string($style);

// Create a window and add a button.
$window =& new GtkWindow();
$button =& new GtkButton('Example');
$window->add($button);

// Get the rc style
$rcStyle = gtk::rc_get_style($button);

// Output the style properties.
echo $rcStyle->fg . "\n";  // Will print #ffffff
echo $rcStyle->bg . "\n";  // Will print #ff6060

?>
]]>
      </programlisting>
     </example>
    </para> 
   </desc>
  </method>

  <!-- I don't think this fucntion really exists.
  <method id="gtk.method.rc_get_theme_dir">
   <funcsynopsis>
    <funcprototype>
     <funcdef>string <function>gtk::rc_get_theme_dir</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Return the directory that PHP-GTK looks for theme engines in.
   </shortdesc>
   <desc>
    <simpara>
     Returns the directory that PHP-GTK looks for theme engines in. The default
     theme directory is XXXX.
    </simpara>
    <simpara>
     See also: <function>rc_get_module_dir</function>
    </simpara>
   </desc>
  </method>
  -->

  <!-- I don't think this one does either. The only place that it is
  documented is right here. Not in GTK or PyGtk docs and not in gtk.defs or
  gtk.overrides
  <method id="gtk.method.rc_load_image">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkPixmap</classname> 
      <function>gtk::rc_load_image</function>
     </funcdef>
     <paramdef>
      <classname>GdkColormap</classname> 
      <parameter>colormap</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkColor</classname> 
      <parameter>transparent_color</parameter>
     </paramdef>
     <paramdef>string <parameter>filename</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>
  -->

  <method id="gtk.method.rc_parse">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::rc_parse</function></funcdef>
     <paramdef>string <parameter>filename</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Parses an application's rc file(s).
   </shortdesc>
   <desc>
    <simpara>
     Parses an application's rc file(s). <parameter>filename</parameter> is the
     name of the rc file to parse.
    </simpara>
    <simpara>
     RC files are PHP-GTK's method for setting the default look and feel for
     and application, class of widgets, or an individaul widget. When an
     application loads you can tell it to parse an rc file that acts similar
     to a style sheet for GTK objects. It defines how widgets should appear in
     their default state (before any user code alters their appearance). For 
     more details about rc files, including their format, see
     <ulink
     url="http://www.gtk.org/tutorial/ch-gtkrcfiles.html">http://www.gtk.org/tutorial/ch-gtkrcfiles.html</ulink>
    </simpara>
    <simpara>
     See also: <function>gtk::rc_parse_string</function>,
     <function>gtk::rc_add_default_file</function>,
     <function>gtk::rc_reparse_all</function>
    </simpara>
   </desc>
  </method>

  <method id="gtk.method.rc_parse_string">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::rc_parse_string</function></funcdef>
     <paramdef>string <parameter>rc_string</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Parse resource information directly from a string.
   </shortdesc>
   <desc>
    <simpara>
     Parse resource information directly from a string. This can be used
     to dynamically change colors and background images for whole
     widgets and widget classes at once.
    </simpara>
    <simpara>
     There is an example at 
     <link linked="gtk.gtktooltips.method.set_colors">GtkTooltips::set_colors</link>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.method.rc_reparse_all">
   <funcsynopsis>
    <funcprototype>
     <funcdef>bool <function>gtk::rc_reparse_all</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Reparse all of an application's rc files.
   </shortdesc>
   <desc>
    <simpara>
     Reparses all of an application's rc files if the modification time of any
     of the previously parse files has changed. This will reset the look and
     feel of the application to its original state. Any changes that were made
     to an individual widget's style will be lost.
    </simpara>
    <simpara>
     If the files were reread, <literal>true</literal> is returned.
    </simpara>
    <simpara>
     See also: <function>gtk::rc_parse</function>
    </simpara>
   </desc>
  </method>

  <method id="gtk.method.timeout_add">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>gtk::timeout_add</function></funcdef>
     <paramdef>int <parameter>interval</parameter></paramdef>
     <paramdef>
      <literal>GtkFunction</literal> 
      <parameter>function</parameter>
     </paramdef>
     <paramdef>mixed 
      <parameter><optional>data</optional></parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets up a function to be called at regular intervals.
   </shortdesc>
   <desc>
    <simpara>
     Registers <parameter>function</parameter> to be called periodically. 
     The function will be called repeatedly after <parameter>interval</parameter>
     milliseconds while it returns <literal>TRUE</literal>. When
     <parameter>function</parameter> no longer returns <literal>TRUE</literal> 
     the timeout is destroyed and will not be called again.
    </simpara>
    <simpara>
     You should save the returned number if you want to
     <function>gtk::timeout_remove</function> it.
    </simpara>
   </desc>
  </method>

  <method id="gtk.method.timeout_remove">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::timeout_remove</function></funcdef>
     <paramdef>int <parameter>timeout_handler_id</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Removes timeout.
   </shortdesc>
   <desc>
    <simpara>
     Removes the given timeout destroying all information about it.
    </simpara>
    <simpara>
     You get the <parameter>timeout_handler_id</parameter> when you
     <function>gtk::timeout_add</function> a function.
    </simpara>
   </desc>
  </method>

  <method id="gtk.method.true">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>gtk::true</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns true.
   </shortdesc>
   <desc>
    <simpara>
     This is a static function that simply returns <literal>1</literal>. 
     It has no other functionality.
    </simpara>
   </desc>
  </method>

  <method id="gtk.method.type_from_name">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>gtk::type_from_name</function></funcdef>
     <paramdef>string <parameter>name</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns object type from object name.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.type_name">
   <funcsynopsis>
    <funcprototype>
     <funcdef>string <function>gtk::type_name</function></funcdef>
     <paramdef>int <parameter>type</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns name of object.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.vbutton_box_get_layout_default">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <enumname>GtkButtonBoxStyle</enumname> 
      <function>gtk::vbutton_box_get_layout_default</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns <classname>GtkVButtonBox</classname> layout default.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.vbutton_box_get_spacing_default">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int 
      <function>gtk::vbutton_box_get_spacing_default</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns <classname>GtkVButtonBox</classname> spacing default.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.vbutton_box_set_layout_default">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void 
      <function>gtk::vbutton_box_set_layout_default</function>
     </funcdef>
     <paramdef>
      <enumname>GtkButtonBoxStyle</enumname> 
      <parameter>layout</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets layout default for <classname>GtkVButtonBox</classname>es.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.vbutton_box_set_spacing_default">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void 
      <function>gtk::vbutton_box_set_spacing_default</function>
     </funcdef>
     <paramdef>int <parameter>spacing</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets spacing default for <classname>GtkVButtonBox</classname>es.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.widget_get_default_colormap">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkColormap</classname> 
      <function>gtk::widget_get_default_colormap</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the application's default <classname>GdkColormap</classname>.
   </shortdesc>
   <desc>
    <simpara>
     Returns the application's default <classname>GdkColormap</classname>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.method.widget_get_default_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkStyle</classname> 
      <function>gtk::widget_get_default_style</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the application's default <classname>GtkStyle</classname>.
   </shortdesc>
   <desc>
    <simpara>
     Returns the default <classname>GtkStyle</classname> that is currently
     being used throughout an application.
    </simpara>
    <simpara>
     Use <function>gtk::widget_set_default_style</function> to change
     aspects of the default style.
    </simpara>
   </desc>
  </method>

  <method id="gtk.method.widget_get_default_visual">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkVisual</classname> 
      <function>gtk::widget_get_default_visual</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the application's default <classname>GdkVisual</classname>.
   </shortdesc>
   <desc>
    <simpara>
     Returns the application's default <classname>GdkVisual</classname>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.method.widget_pop_colormap">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::widget_pop_colormap</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.widget_pop_composite_child">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void 
<function>gtk::widget_pop_composite_child</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.widget_pop_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::widget_pop_style</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.widget_pop_visual">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::widget_pop_visual</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.widget_push_colormap">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::widget_push_colormap</function></funcdef>
     <paramdef>
      <classname>GdkColormap</classname> 
      <parameter>cmap</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.widget_push_composite_child">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void 
<function>gtk::widget_push_composite_child</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.widget_push_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::widget_push_style</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.widget_push_visual">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gtk::widget_push_visual</function></funcdef>
     <paramdef>
      <classname>GdkVisual</classname> 
      <parameter>visual</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.widget_set_default_colormap">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void 
      <function>gtk::widget_set_default_colormap</function>
     </funcdef>
     <paramdef>
      <classname>GdkColormap</classname> 
      <parameter>colormap</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets a <classname>GdkColormap</classname> as default for the application.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.widget_set_default_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void 
      <function>gtk::widget_set_default_style</function>
     </funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets a <classname>GtkStyle</classname> as default for the application.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.method.widget_set_default_visual">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void 
      <function>gtk::widget_set_default_visual</function>
     </funcdef>
     <paramdef>
      <classname>GdkVisual</classname> 
      <parameter>visual</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets a <classname>GdkVisual</classname> as default for the application.
   </shortdesc>
   <desc>

   </desc>
  </method>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
