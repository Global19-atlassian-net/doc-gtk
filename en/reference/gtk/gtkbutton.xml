<classentry id="gtk.gtkbutton">
 <classmeta>
  <classtitle>GtkButton</classtitle>
  <classparent>GtkBin</classparent>
  <shortdesc>
   A container widget that emits a signal when clicked on.
  </shortdesc>
  <desc>
   <simpara>
    The <classname>GtkButton</classname> widget is a container widget
    that can hold any valid child widget derived from 
    <classname>GtkWidget</classname>. The most commonly used child
    widget is a <classname>GtkLabel</classname>.  This is therefore built
    into the <link linkend="gtk.gtkbutton.constructor">constructor</link> 
    as an optional parameter.
   </simpara>
   <simpara>
    The <classname>GtkButton</classname> widget is mainly used to call
    some function when the button is pressed.
   </simpara>
  </desc>
 </classmeta>

 <constructor id="gtk.gtkbutton.constructor">
  <funcsynopsis>
   <funcprototype>
    <funcdef> <function>GtkButton</function></funcdef>
    <paramdef>string 
     <parameter><optional>label</optional></parameter>
    </paramdef>
   </funcprototype>
  </funcsynopsis>
  <shortdesc>
   Creates a button.
  </shortdesc>
  <desc>
   <simpara>
    This function creates and returns a <classname>GtkButton</classname>
    widget.  If the optional <parameter>label</parameter> is passed, the
    button will contain a <classname>GtkLabel</classname> widget with the
    given text.  If the parameter is left empty, there will be no child
    widget.
   </simpara>
   <para>
    Note that, as <classname>GtkButton</classname> is descended from
    <classname>GtkBin</classname>, it may contain only one child.
    <example>
     <title>Adding more than one widget to a 
<classname>GtkButton</classname></title>
      <programlisting role="php">
$window = &amp;new GtkWindow(GTK_WINDOW_DIALOG);
$window-&gt;set_position(GTK_WIN_POS_MOUSE);
$window-&gt;connect_object(&quot;destroy&quot;, array(&quot;gtk&quot;, 
&quot;main_quit&quot;));
$window-&gt;realize();

list ($gdkpixmap, $mask) = gdk::pixmap_create_from_xpm($window-&gt;window, 
null, &quot;test.xpm&quot;);
$pixmap = &amp;new GtkPixmap($gdkpixmap, $mask);

$label = &amp;new GtkLabel(&quot;Open&quot;);

$vbox = &amp;new GtkVBox();
$vbox-&gt;pack_start($pixmap);
$vbox-&gt;pack_start($label);

$button = &amp;new GtkButton();
$button-&gt;add($vbox);
$vbox-&gt;show_all();

$window-&gt;add($button);
$window-&gt;show_all();

gtk::main();
      </programlisting>
     </example>
    </para>
  </desc>
 </constructor>

 <methods>

  <method id="gtk.gtkbutton.method.pressed">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>pressed</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emits <signalname>pressed</signalname> signal.
   </shortdesc>
   <desc>
    <simpara>
     Makes the button emit the <signalname>pressed</signalname> signal.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkbutton.method.released">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>released</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emits <signalname>released</signalname> signal.
   </shortdesc>
   <desc>
    <simpara>
     Makes the button emit the <signalname>released</signalname> signal.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkbutton.method.clicked">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>clicked</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emits <signalname>clicked</signalname> signal.
   </shortdesc>
   <desc>
    <simpara>
     Makes the button emit the <signalname>clicked</signalname> signal.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkbutton.method.enter">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>enter</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emits <signalname>enter</signalname> signal.
   </shortdesc>
   <desc>
    <simpara>
     Makes the button emit the <signalname>enter</signalname> signal.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkbutton.method.leave">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>leave</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emits <signalname>leave</signalname> signal.
   </shortdesc>
   <desc>
    <simpara>
     Makes the button emit the <signalname>leave</signalname> signal.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkbutton.method.set_relief">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_relief</function></funcdef>
     <paramdef>
      <enumname>GtkReliefStyle</enumname> 
      <parameter>newstyle</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the button relief style.
   </shortdesc>
   <desc>
    <simpara>
     Sets the relief style of the button widget edges using one of the
     three <enumname>GtkReliefStyle</enumname> settings.  The default
     relief style is <literal>GTK_RELIEF_NORMAL</literal>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkbutton.method.get_relief">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <enumname>GtkReliefStyle</enumname> 
      <function>get_relief</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Gets the button relief style.
   </shortdesc>
   <desc>
    <simpara>
     Returns the current <enumname>GtkReliefStyle</enumname> setting for
     the button.
    </simpara>
   </desc>
  </method>

 </methods>

 <signals>

  <signal id="gtk.gtkbutton.signal.enter">
   <signalname>enter</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkButton</classname> button</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when the cursor is over the button.
   </shortdesc>
   <desc>
    <simpara>
     The <signalname class="GtkButton">enter</signalname> signal is emitted
     when the cursor enters the area of the screen where the button is
     positioned.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkbutton.signal.pressed">
   <signalname>pressed</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkButton</classname> button</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when the button is initially pressed.
   </shortdesc>
   <desc>
    <simpara>
     The <signalname>pressed</signalname> signal is emitted when the user
     presses down the mouse-button and the cursor is over the widget.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkbutton.signal.clicked">
   <signalname>clicked</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkButton</classname> button</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when the button is clicked.
   </shortdesc>
   <desc>
    <simpara>
     The <signalname>clicked</signalname> signal is emitted at the
     midpoint between pressing and releasing the mouse-button.  This
     is the most commonly used <classname>GtkButton</classname> signal,
     and holds an advantage over the other signals listed here in that
     it also responds to <literal>enter</literal> or 
     <literal>spacebar</literal> keypresses as though they were
     mouse-clicks, by default.  However, note that the 
     <signalname>clicked</signalname> signal will not fire when the
     user releases the mouse-button after the cursor has left the
     widget's region.
    </simpara>
    <para>
     Use one of the <function class="GtkObject">connect()</function> 
     methods in order to emit the signal and connect it to your function. 
     The connected function is known as the <literal>callback</literal> or 
     <literal>signal-handler</literal> function:
     <example>
      <title>Making a simple connection</title>
      <programlisting role="php">
function my_function() {
	echo &quot;The button was clicked\n&quot;;
}

$window = &amp;new GtkWindow();
$window-&gt;set_position(GTK_WIN_POS_MOUSE);
$window-&gt;connect_object(&quot;destroy&quot;, array(&quot;gtk&quot;, 
&quot;main_quit&quot;));

$button = &amp;new GtkButton(&quot;Click Me&quot;);
$button-&gt;connect(&quot;clicked&quot;, &quot;my_function&quot;);
$window-&gt;add($button);

$window-&gt;show_all();

gtk::main();
      </programlisting>
     </example>
     For further information about connecting signals, refer to the 
     <link linkend="gtk.signals.whatare">Signals and Callbacks</link> 
     chapter in the <link linkend="userguide">PHP-GTK Userguide</link>.
    </para>
   </desc>
  </signal>

  <signal id="gtk.gtkbutton.signal.released">
   <signalname>released</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkButton</classname> button</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when the button is released.
   </shortdesc>
   <desc>
    <simpara>
     The <signalname>released</signalname> signal is emitted when the
     user releases the mouse-button, regardless of cursor position.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkbutton.signal.leave">
   <signalname>leave</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkButton</classname> button</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when the cursor leaves the button area.
   </shortdesc>
   <desc>
    <simpara>
     The <signalname>leave</signalname> signal is emitted when the cursor
     leaves the area of the screen where the button is positioned.
    </simpara>
   </desc>
  </signal>
 </signals>

</classentry>
