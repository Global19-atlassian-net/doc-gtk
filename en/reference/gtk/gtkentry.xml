<?xml version="1.0" encoding="ISO-8859-1" ?>
<classentry id="gtk.gtkentry">
 <classmeta>
  <classtitle>GtkEntry</classtitle>
  <classparent>GtkEditable</classparent>
  <shortdesc>
   A single line text entry field.
  </shortdesc>
  <desc>
   <simpara>
    <classname>GtkEntry</classname> is a single line text field generally
    used where input is required from the user.  The minimum length of the
    entry field is set internally at 150 pixels; the maximum length is
    determined by the size of the container.  If the text entered is longer
    than the entry field, the widget will scroll so that the cursor position
    is visible.
   </simpara>
   <simpara>
    Both <classname>GtkEntry</classname> and <classname>GtkText</classname>
    have the potential to be edited by the user, and share a fairly large
    number of key bindings to that end.  These are listed under 
    <classname>GtkEditable</classname> for the sake of completeness; 
    however, note that they are replaced by a more intuitive set in GTK+ 2.0.
   </simpara>
   <note>
    <simpara>
     It will be immediately obvious that quite a few 
     <classname>GtkEntry</classname> methods are marked here as being
     deprecated in later GTK+ releases.  Please be aware that all editable
     classes are undergoing radical changes, and that deprecated methods may
     or may not be supportable in the future.  It would therefore be wise to
     avoid methods marked as deprecated, as far as is possible.
    </simpara>
   </note>
   <simpara>
    See also: <classname>GtkEditable</classname>, 
    <classname>GtkCombo</classname>, <classname>GtkList</classname>, 
    <classname>GtkCheckButton</classname>, 
    <classname>GtkToggleButton</classname>, 
    <classname>GtkRadioButton</classname>.
   </simpara>
  </desc>
 </classmeta>

 <constructor id="gtk.gtkentry.constructor">
  <funcsynopsis>
   <funcprototype>
    <funcdef> <function>GtkEntry</function></funcdef>
    <paramdef>void</paramdef>
   </funcprototype>
  </funcsynopsis>
  <shortdesc>
   Creates a single-line text entry widget.
  </shortdesc>
  <desc>
   <simpara>
    Creates a widget that will hold a single line of text, either set
    programmatically through <function class="GtkEntry">set_text</function> 
    or entered by the user.
   </simpara>
   <para>
    <example>
     <title>
      Retrieving text from a <classname>GtkEntry</classname> widget
     </title>
     <programlisting role="php">
<![CDATA[
<?php

dl('php_gtk.'.(strstr(PHP_OS, 'WIN') ? 'dll' : 'so'));

/* set up a function to collect the input from the entry and print it */
function get_input($entry) {
  $input=$entry->get_text();
  echo "$input\n";
  $entry->grab_focus();
  $entry->set_text("");
}

/* set up the window */
$window = &new GtkWindow();
$window->set_position(GTK_WIN_POS_MOUSE);
$window->connect_object('destroy', array('gtk', 'main_quit'));

/* add a box container to the window to allow more than one child widget */
$box = &new GtkVBox();
$window->add($box);

/* add a GtkEntry to the box and connect it to the callback function */
$entry = &new GtkEntry();
$entry->connect('activate', 'get_input');
$box->add($entry);

/* add a GtkButton to the box and use connect_object() so that it
   will pass the GtkEntry to the callback when it is clicked */
$button = &new GtkButton('Return or click me to echo input');
$button->connect_object('clicked', 'get_input', $entry);
$box->add($button);

/* display everything and set the main loop running */
$box->show_all();
$window->show_all();
gtk::main();

?>
]]>
     </programlisting>
    </example>
   </para>
  </desc>
 </constructor>

 <methods>

  <method id="gtk.gtkentry.method.set_text">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_text</function></funcdef>
     <paramdef>string <parameter>text</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets text content.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkEntry">set_text</function> sets a string of
     given text in the entry field.
    </simpara>
    <para>
     <informalexample>
      <programlisting>
<![CDATA[
$entry-gt;set_text("Programmed text entry");
]]>
      </programlisting>
     </informalexample>
    </para>
   </desc>
  </method>

  <method id="gtk.gtkentry.method.append_text">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>append_text</function></funcdef>
     <paramdef>string <parameter>text</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Adds text to the end of entered text.  *Deprecated in GTK2*
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkEntry">append_text</function> adds the given
     string to the end of any entered text.
    </simpara>
    <para>
     <informalexample>
      <programlisting>
<![CDATA[
$entry->append_text("</END>");
]]>
      </programlisting>
     </informalexample>
    </para>
   </desc>
  </method>

  <method id="gtk.gtkentry.method.prepend_text">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>prepend_text</function></funcdef>
     <paramdef>string <parameter>text</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Adds text to the start of entered text.  *Deprecated in GTK2*
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkEntry">prepend_text</function> adds the given
     string to the start of any entered text.
    </simpara>
    <para>
     <informalexample>
      <programlisting>
<![CDATA[
$entry->prepend_text("<START>");
]]>
      </programlisting>
     </informalexample>
    </para>
   </desc>
  </method>

  <method id="gtk.gtkentry.method.set_position">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_position</function></funcdef>
     <paramdef>int <parameter>position</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets cursor position.  *Deprecated in GTK2*
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkEntry">set_position</function> sets the
     cursor at the given character position within existing text in
     the entry field.  Use <literal>0</literal> to set the cursor at
     the beginning of the text, and <literal>-1</literal> to set it at
     the end.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkentry.method.get_text">
   <funcsynopsis>
    <funcprototype>
     <funcdef>string <function>get_text</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Retrieves entered text.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkEntry">get_text</function> retrieves the text
     entered into the <classname>GtkEntry</classname> widget, and also any
     appended or prepended text that may have been set but not displayed.
    </simpara>
    <note>
     <simpara>
      Contrary to rumour, this function is *not* marked as deprecated, either
      in the versions of GTK+ currently used by PHP-GTK or in recent
      development releases of GTK+.
     </simpara>
    </note>
   </desc>
  </method>

  <method id="gtk.gtkentry.method.select_region">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>select_region</function></funcdef>
     <paramdef>int <parameter>start</parameter></paramdef>
     <paramdef>int <parameter>end</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Selects text region.  *Deprecated in GTK2*
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkEntry">select_region</function> is used to
     select a region of existing text, generally for using with the cut,
     copy and paste methods found in <classname>GtkEditable</classname>.
    </simpara>
    <simpara>
     If you need to select the entire text entry, use the setting 
     <literal>(0, -1)</literal>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkentry.method.set_visibility">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_visibility</function></funcdef>
     <paramdef>bool <parameter>visible</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Toggles text visibility.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkEntry">set_visibility</function>, when set
     to <literal>false</literal>, provides a means of hiding sensitive
     input information on screen.  It replaces each character with a star.
    </simpara>
    <simpara>
     This function is mainly used for password entry.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkentry.method.set_editable">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_editable</function></funcdef>
     <paramdef>bool <parameter>editable</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Toggles text editability.  *Deprecated in GTK2*
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkEntry">set_editable</function> sets the
     entry field to be editable by the user, or otherwise.
    </simpara>
    <simpara>
     The default setting is <literal>true</literal>.  
    </simpara>
    <simpara>
     Note that setting <function class="GtkEntry">set_editable</function> 
     to <literal>true</literal> on top of the default setting can lead to
     some unexpected effects. 
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkentry.method.set_max_length">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_max_length</function></funcdef>
     <paramdef>int <parameter>max</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the maximum text length.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkEntry">set_max_length</function> sets the
     maximum number of characters that will be accepted in a text entry.
     Any further characters entered will not be displayed in the entry
     field, nor will they be capable of being retrieved with the 
     <function class="GtkEntry">get_text</function> function.
    </simpara>
   </desc>
  </method>

 </methods>

</classentry>
