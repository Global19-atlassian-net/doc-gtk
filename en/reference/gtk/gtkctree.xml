<?xml version="1.0" encoding="ISO-8859-1" ?>
<classentry id="gtk.gtkctree">
 <classmeta>
  <classtitle>GtkCTree</classtitle>
  <classparent>GtkCList</classparent>
  <shortdesc>
   Widget that displays a hierarchical tree.
  </shortdesc>
  <desc>

  </desc>
 </classmeta>

 <constructor id="gtk.gtkctree.constructor">
  <funcsynopsis>
   <funcprototype>
    <funcdef> <function>GtkCTree</function></funcdef>
    <paramdef>int <parameter>nColumns</parameter></paramdef>
    <paramdef>int <parameter>nTreeGraphicCol</parameter></paramdef>
    <paramdef><optional>array <parameter>arColTitles</parameter></optional></paramdef>
   </funcprototype>
  </funcsynopsis>
  <shortdesc>
   Creates a new <classname>CtkCTree</classname> object.
  </shortdesc>
  <desc>
   <simpara>
    Create a new <classname>CtkCTree</classname> object with a number
    of columns. The second parameter contains the index of the column
    in which the tree lines shall be visible (indent and +/-) and the third
    parameter can be an array with the column titles.
   </simpara>
   <para>
    Notice how much of the code here is actually the arrays of data needed
    to populate the <classname>GtkCTree</classname>.  It would probably be
    cleaner to keep your data generation in an include file.
    <example>
     <title>Setting up a <classname>GtkCTree</classname></title>
      <programlisting role="php">
<![CDATA[
<?php
if( !extension_loaded('gtk')) {	
    dl( 'php_gtk.' . PHP_SHLIB_SUFFIX); 
}

/* start of data generation arrays */
$widgets_ = array(
/*level 0*/
array('Object'),
/*level 1*/
array('Widget', 'Data', 'ItemFactory'),
/*level 2*/
array('Misc', 'Container', 'Calendar', 'DrawingArea', 'Editable', 'Ruler', 
'Range', 'Separator', 'Preview', 'Progress'),
array('Adjustment', 'Tooltips'),
/*level 3*/
array('Label', 'Arrow', 'Image', 'Pixmap'),
array('Bin', 'Box', 'CList', 'Fixed', 'Notebook', 'Paned', 'Layout', 'List', 
'MenuShell', 'Packer', 'Socket', 'Table', 'Toolbar', 'Tree'),
array('Curve'),
array('Entry', 'Text'),
array('HRuler', 'VRuler'),
array('Scale', 'Scrollbar'),
array('HSeparator', 'VSeparator'),
array('ProgressBar'),
/*level 4*/
array('AccelLabel', 'TipsQuery'),
array('Alignment', 'Frame', 'Button', 'Item', 'Window', 'EventBox', 
'HandleBox', 'ScrolledWindow', 'Viewport', 'Invisible'),
array('ButtonBox', 'HBox', 'VBox'),
array('CTree'),
array('FontSelection'),
array('HPaned', 'VPaned'),
array('MenuBar', 'Menu'),
array('SpinButton'),
array('HScale', 'VScale'),
array('HScrollbar', 'VScrollbar'),
/*level 5*/
array('AspectFrame'),
array('ToggleButton', 'OptionMenu'),
array('ListItem', 'MenuItem', 'TreeItem'),
array('ColorSelectionDialog', 'Dialog', 'FileSelection', 
'FontSelectionDialog', 'Plug'),
array('HButtonBox', 'VButtonBox'),
array('Combo', 'Statusbar'),
array('ColorSelection', 'GammaCurve'),
/*level 6*/
array('CheckButton'),
array('CheckMenuItem', 'TearoffMenuItem'),
array('InputDialog'),
/*level 7*/
array('RadioButton'),
array('RadioMenuItem')
);

$row = array(0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 5, 5, 5, 5, 5, 5, 7, 9, 9,
13, 13, 13, 13, 14, 14, 14, 23, 24, 25, 29, 30);

$class = array(0, 0, 1, 0, 1, 3, 4, 5, 6, 7, 9, 0, 0, 1, 2, 4, 5, 8, 0, 0, 1,
1, 2, 3, 4, 0, 1, 2, 0, 1, 1, 0, 0);
/* end of data generation arrays */

$window = &new GtkWindow();
$window->set_title('The GTK Class Hierarchy');
$window->set_position(GTK_WIN_POS_CENTER);
$window->set_default_size(300, (gdk::screen_height()-30));
$window->connect_object('destroy', array('gtk', 'main_quit'));

$scrolledwindow = &new GtkScrolledWindow();
$scrolledwindow->set_policy(GTK_POLICY_NEVER, GTK_POLICY_ALWAYS);
$window->add($scrolledwindow);

$ctree = &new GtkCTree(1, 0);
$ctree->set_line_style(GTK_CTREE_LINES_SOLID);

for($x = 0; $x < count($widgets_); $x++) {
  $sibling[$x] = array();
  switch($x) {
    case 0:
      $parent = null;
      break;
    default:
      $parent = $sibling[$row[$x-1]][$class[$x-1]];
    break;
  }
  for ($i = 0; $i < count($widgets_[$x]); $i++) {
    $widgets[0] = "Gtk".$widgets_[$x][$i];
    $sibling[$x][$i] = $ctree->insert_node($parent, $sibling[$x][], 
    $widgets, 5, null, null, null, null, false, true);
  }
}

$scrolledwindow->add($ctree);
$ctree->show();

$window->show_all();
gtk::main();

?>
]]>
     </programlisting>
    </example>
   </para>
  </desc>
 </constructor>

 <methods>

  <method id="gtk.gtkctree.method.insert_node">
   <funcsynopsis>
    <funcprototype>
     <funcdef><classname>GtkCTreeNode</classname> <function>insert_node</function></funcdef>
     <paramdef><classname>GtkCTreeNode</classname> <parameter>parent</parameter></paramdef>
     <paramdef><classname>GtkCTreeNode</classname> <parameter>sibling</parameter></paramdef>
     <paramdef>Array <parameter>labels</parameter></paramdef>
     <paramdef>int <parameter>pixmap_spacing</parameter></paramdef>
     <paramdef><classname>GdkPixmap</classname> <parameter>pixmap_closed</parameter></paramdef>
     <paramdef><classname>GdkBitmap</classname> <parameter>mask_closed</parameter></paramdef>
     <paramdef><classname>GdkPixmap</classname> <parameter>pixmap_open</parameter></paramdef>
     <paramdef><classname>GdkBitmap</classname> <parameter>mask_open</parameter></paramdef>
     <paramdef>boolean <parameter>is_leaf</parameter></paramdef>
     <paramdef>boolean <parameter>is_expanded</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Inserts a new node in the tree.
   </shortdesc>
   <desc>
    <simpara>
     This function creates a new node and inserts it into the tree. The first parameter
     is the parent node; if it's NULL the node will be the root. The "labels" parameter
     is an array of strings which are shown in the tree, for each column one. pixmap_spacing 
     is the spacing between the pixmap and the text.
    </simpara>
    <simpara>
     The sibling parameter determines the position of the new node. If it is NULL, 
     it will be appended to the parents childen as the last element. If the sibling is
     given, the new node will be inserted just before it.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.remove_node">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>remove_node</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Removes the given node from the tree
   </shortdesc>
   <desc>
    <simpara>
     Removes the given node from the tree. Children nodes are removed recursively.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.post_recursive">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>post_recursive</function></funcdef>
     <paramdef><classname>GtkCTreeNode</classname> <parameter>node</parameter></paramdef>
     <paramdef><classname>String</classname> <parameter>callback</parameter></paramdef>
     <paramdef><optional>??? <parameter>own_parameter</parameter></optional></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Recursively apply a function to all nodes of the tree at or below a certain node. 
   </shortdesc>
   <desc>
    <simpara>
     Recursively apply a function to all nodes of the tree at or below a certain node. 
     The function is called for each node after it has been called for that node's children.
    </simpara>
    <para>
     The callback parameter can be a function name as a string; this function will be called.
     If you want to use the function of an object, just use
     <programlisting role="php">array( &amp;$obj, "function")</programlisting>
    </para>
    <simpara>
     The third parameter is optional, it will be passed to the called function. You can
     have as many own parameters as you like.
    </simpara>
    <simpara>
     The calling function needs to implement at least 2 parameters: The first is the tree
     object, the second the specific node.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.post_recursive_to_depth">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>post_recursive_to_depth</function></funcdef>
     <paramdef><classname>GtkCTreeNode</classname> <parameter>node</parameter></paramdef>
     <paramdef>int <parameter>depth</parameter></paramdef>
     <paramdef><classname>String</classname> <parameter>callback</parameter></paramdef>
     <paramdef><optional>mixed <parameter>own_parameter</parameter></optional></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Recursively apply a function to nodes up to a certain depth 
   </shortdesc>
   <desc>
    <simpara>
     Recursively apply a function to nodes up to a certain depth. 
     The function is called for each node after it has been called for that node's children.
    </simpara>
    <simpara>
     The depth parameter determines, how many levels below the given node the function
     shall be applied. Note that a depth of "0" does nothing, the depth of "1" will
     apply the function just to the given node. Only "2" will apply the given function
     to the first level below the node.  If depth is negative, this function just calls 
     <link linkend="gtk.gtkctree.method.post_recursive">post_recursive</link>.
    </simpara>
    <para>
     The callback parameter can be a function name as a string; this function will be called.
     If you want to use the function of an object, just use
     <programlisting>array( &amp;$obj, "function")</programlisting>
    </para>
    <simpara>
     The fourth parameter is optional, it will be passed to the called function. You can
     have as many own parameters as you like.
    </simpara>
    <simpara>
     The calling function needs to implement at least 3 parameters: The first is the tree
     object, the second the specific node and the third contains the callback itself (String or
     array).
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.pre_recursive">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>pre_recursive</function></funcdef>
     <paramdef><classname>GtkCTreeNode</classname> <parameter>node</parameter></paramdef>
     <paramdef><classname>String</classname> <parameter>callback</parameter></paramdef>
     <paramdef><optional>??? <parameter>own_parameter</parameter></optional></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Recursively apply a function to all nodes of the tree at or below a certain node.
   </shortdesc>
   <desc>
    <simpara>
     Recursively apply a function to all nodes of the tree at or below a certain node. 
     The function is called for each node after it has been called for its parent.
    </simpara>
    <simpara>
     For a in-detail description, see 
     <link linkend="gtk.gtkctree.method.post_recursive">post_recursive</link>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.pre_recursive_to_depth">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>pre_recursive_to_depth</function></funcdef>
     <paramdef><classname>GtkCTreeNode</classname> <parameter>node</parameter></paramdef>
     <paramdef>int <parameter>depth</parameter></paramdef>
     <paramdef><classname>String</classname> <parameter>callback</parameter></paramdef>
     <paramdef><optional>??? <parameter>own_parameter</parameter></optional></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Recursively apply a function to nodes up to a certain depth.
   </shortdesc>
   <desc>
    <simpara>
     Recursively apply a function to nodes up to a certain depth. 
     The function is called for each node after it has been called for that node's children.    </simpara>
    <simpara>
     For a in-detail description, see 
     <link linkend="gtk.gtkctree.method.post_recursive_to_depth">post_recursive_to_depth</link>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.is_viewable">
   <funcsynopsis>
    <funcprototype>
     <funcdef>bool <function>is_viewable</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    This function checks whether the given node is viewable i.e. so that all of its parent nodes are expanded.
   </shortdesc>
   <desc>
    <simpara>
     This function checks whether the given node is viewable i.e. so that all of its parent nodes are expanded. 
     This is different from being actually visible: the node can be viewable but outside the scrolling area of the window.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.last">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkCTreeNode</classname> 
      <function>last</function>
     </funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the last child of the last child of the last child... of the given node.
   </shortdesc>
   <desc>
    <simpara>
     Returns the last child of the last child of the last child... of the given node.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.node_nth">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkCTreeNode</classname> 
      <function>node_nth</function>
     </funcdef>
     <paramdef>int <parameter>row</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the node in row X
   </shortdesc>
   <desc>
    <simpara>
     Returns the node which is in the given row. Count begins with 0 as usual.
    </simpara>
    <note>
     Only expanded, means <link linkend="gtk.gtkctree.method.is_viewable">viewable</link> nodes are counted!
    </note>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.find">
   <funcsynopsis>
    <funcprototype>
     <funcdef>bool <function>find</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>child</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Checks if child is on some level a child (grandchild...) of the node.
   </shortdesc>
   <desc>
    <simpara>
     Checks if child is on some level a child (grandchild...) of the node.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.find_by_row_data">
   <funcsynopsis>
    <funcprototype>
     <funcdef><classname>GtkCTreeNode</classname> <function>find_by_row_data</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
     <paramdef>??? <parameter>???</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    FIXME
   </shortdesc>
   <desc>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.find_all_by_row_data">
   <funcsynopsis>
    <funcprototype>
     <funcdef>Array <function>find_by_row_data</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
     <paramdef>??? <parameter>???</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    FIXME
   </shortdesc>
   <desc>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.is_ancestor">
   <funcsynopsis>
    <funcprototype>
     <funcdef>bool <function>is_ancestor</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>child</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Checks if node is an ancestor of child.
   </shortdesc>
   <desc>
    <simpara>
     Checks if node is an ancestor (parent, grandparent, grand...parent) of child.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.is_hot_spot">
   <funcsynopsis>
    <funcprototype>
     <funcdef>bool <function>is_hot_spot</function></funcdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Checks if the given coordinates lie on an expander button.
   </shortdesc>
   <desc>
    <simpara>
     Returns true if the given coordinates lie on an expander button.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.move">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>move</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>new_parent</parameter>
     </paramdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>new_sibling</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Move a node in the tree to another location.
   </shortdesc>
   <desc>
    <simpara>
     Move a node in the tree to another location.
    </simpara>
    <simpara>
     The parent node and the sibling are handled the same way as in
     <link linkend="gtk.gtkctree.method.insert_node">insert_node</link>
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.expand">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>expand</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Expand one node.
   </shortdesc>
   <desc>
    <simpara>
     Expand one node.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.expand_recursive">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>expand_recursive</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter><optional>node = NULL</optional></parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Expand one node and all nodes underneath.
   </shortdesc>
   <desc>
    <simpara>
     Expand one node and all nodes underneath.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.expand_to_depth">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>expand_to_depth</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
     <paramdef>int <parameter>depth</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Expand a node and its children up to the depth given.
   </shortdesc>
   <desc>
    <simpara>
     Expand a node and its children up to the depth given.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.collapse">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>collapse</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Collapse one node.
   </shortdesc>
   <desc>
    <simpara>
     Collapse one node.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.collapse_recursive">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>collapse_recursive</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter><optional>node = NULL</optional></parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Collapse one node and all its subnodes.
   </shortdesc>
   <desc>
    <simpara>
     Collapse one node and all its subnodes.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.collapse_to_depth">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>collapse_to_depth</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
     <paramdef>int <parameter>depth</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Collapse a node and its children up to the depth given.
   </shortdesc>
   <desc>
    <simpara>
     Collapse a node and its children up to the depth given.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.toggle_expansion">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>toggle_expansion</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Toggle a node, i.e. if it is collapsed, expand it and vice versa.
   </shortdesc>
   <desc>
    <simpara>
     Toggle a node, i.e. if it is collapsed, expand it and vice versa.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.toggle_expansion_recursive">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>toggle_expansion_recursive</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Toggle the expansion of a node and all its children.
   </shortdesc>
   <desc>
    <simpara>
     Toggle the expansion of a node and all its children.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.select">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>select</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Cause the given node to be selected and emit the appropriate signal.
   </shortdesc>
   <desc>
    <simpara>
     Cause the given node to be selected and emit the appropriate signal.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.select_recursive">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>select_recursive</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter><optional>node = NULL</optional></parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Cause the given node and its subnodes to be selected and emit the appropriate signal(s).
   </shortdesc>
   <desc>
    <simpara>
     Cause the given node and its subnodes to be selected and emit the appropriate signal(s).
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.unselect">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>unselect</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Unselect the given node and emit the appropriate signal.
   </shortdesc>
   <desc>
    <simpara>
     Unselect the given node and emit the appropriate signal.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.unselect_recursive">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>unselect_recursive</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter><optional>node = NULL</optional></parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Unselect the given node and its subnodes and emit the appropriate signal(s).
   </shortdesc>
   <desc>
    <simpara>
     Unselect the given node and its subnodes and emit the appropriate signal(s).
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.node_set_text">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>node_set_text</function></funcdef>
<!--     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>-->
     <paramdef>int <parameter>row</parameter></paramdef>
     <paramdef>int <parameter>column</parameter></paramdef>
     <paramdef>string <parameter>text</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Set the column text of the specific row.
   </shortdesc>
   <desc>
    <simpara>
     Set the column text of the specific row. The row number begins with
     0 and counts only <link linkend="gtk.gtkctree.method.is_viewable">viewable</link>
     rows.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.node_set_pixmap">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>node_set_pixmap</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
     <paramdef>int <parameter>column</parameter></paramdef>
     <paramdef>
      <classname>GdkPixmap</classname> 
      <parameter>pixmap</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkBitmap</classname> 
      <parameter>mask</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets an icon into a column of the node.
   </shortdesc>
   <desc>
    <simpara>
     Sets an icon into a column of the node. The normal text in that column
     is replaced by the icon and not visible anymore. Use the 
     <link linkend="gtk.gtkctree.method.node_set_pixtext">node_set_pixtext</link>
     function to add an extra text after that icon.
    </simpara>
    <simpara>
     If you once expand/collapse the node, the icon is gone because the
     open/closed icons you set at the
     <link linkend="gtk.gtkctree.method.insert_node">insert_node</link>
     are used then. To prevent this, use the 
     <link linkend="gtk.gtkctree.method.set_node_info">set_node_info</link>
     function.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.node_set_pixtext">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>node_set_pixtext</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
     <paramdef>int <parameter>column</parameter></paramdef>
     <paramdef>string <parameter>text</parameter></paramdef>
     <paramdef>int <parameter>spacing</parameter></paramdef>
     <paramdef>
      <classname>GdkPixmap</classname> 
      <parameter>pixmap</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkBitmap</classname> 
      <parameter>mask</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the pixmap and the corresponding text of a column of a row.
   </shortdesc>
   <desc>
    <simpara>
     Sets the pixmap and the corresponding text of a column of a row.
     The pixmap and mask parameters may not be NULL.
    </simpara>
    <simpara>
     If you once expand/collapse the node, the icon is gone because the
     open/closed icons you set at the
     <link linkend="gtk.gtkctree.method.insert_node">insert_node</link>
     are used then. To prevent this, use the 
     <link linkend="gtk.gtkctree.method.set_node_info">set_node_info</link>
     function. The text stays visible.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.set_node_info">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_node_info</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
     <paramdef>string <parameter>text</parameter></paramdef>
     <paramdef>int <parameter>spacing</parameter></paramdef>
     <paramdef>
      <classname>GdkPixmap</classname> 
      <parameter>pixmap_closed</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkBitmap</classname> 
      <parameter>mask_closed</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkPixmap</classname> 
      <parameter>pixmap_opened</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkBitmap</classname> 
      <parameter>mask_opened</parameter>
     </paramdef>
     <paramdef>bool <parameter>is_leaf</parameter></paramdef>
     <paramdef>bool <parameter>expanded</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Changes all the values set by the <link linkend="gtk.gtkctree.method.insert_node">insert_node</link> function.
   </shortdesc>
   <desc>
    <simpara>
    Changes all the values set by the <link linkend="gtk.gtkctree.method.insert_node">insert_node</link> function.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.node_set_shift">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>node_set_shift</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
     <paramdef>int <parameter>column</parameter></paramdef>
     <paramdef>int <parameter>vertical</parameter></paramdef>
     <paramdef>int <parameter>horizontal</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Shift the column of the given cell the given amounts in pixels.
   </shortdesc>
   <desc>
    <simpara>
     Shift the column of the given cell the given amounts in pixels.
    </simpara>
    <simpara>
     Moves the column display inside the area reserved for the display.
     E.g. when you set the vertical to 20 and the height of the row is just
     10, then the cell won't be visible any more.
    </simpara>
    <simpara>
     This function can be used to move the icon or the text a given amount left/right
     from the +/- symbols (horizontal).
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.node_set_selectable">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>node_set_selectable</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
     <paramdef>bool <parameter>selectable</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets whether this node can be selected by the user.
   </shortdesc>
   <desc>
    <simpara>
     Sets whether this node can be selected by the user. This is useful if
     you have separators in the tree which have no function except that they
     separate something and shall not be selectable by the user.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.node_get_selectable">
   <funcsynopsis>
    <funcprototype>
     <funcdef>bool <function>node_get_selectable</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Whether this node can be selected by the user.
   </shortdesc>
   <desc>
    <simpara>
     Whether this node can be selected by the user.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.node_get_cell_type">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <enumname>GtkCellType</enumname> 
      <function>node_get_cell_type</function>
     </funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
     <paramdef>int <parameter>column</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the type of the given cell.
   </shortdesc>
   <desc>
    <simpara>
     Returns the type of the given cell.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.node_get_text">
   <funcsynopsis>
    <funcprototype>
     <funcdef>String <function>node_get_text</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
     <paramdef>int <parameter>column</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the column text of a given row.
   </shortdesc>
   <desc>
    <simpara>
     Returns the column text of a given row.
    </simpara>
    <simpara>
     The column in which the expanders/lines are visible cannot use this 
     function (nTreeGraphic in the <link linkend="gtk.gtkctree.constructor">Constructor</link>). 
     You have to use 
     <link linkend="gtk.gtkctree.method.node_get_pixtext">node_get_pixtext</link>
     in this case.
    </simpara>
    <simpara>
     Note that this function can also not be used if you used the functions
     <link linkend="gtk.gtkctree.method.node_set_pixtext">node_set_pixtext</link> or
     <link linkend="gtk.gtkctree.method.node_set_pixtext">node_set_pixmap</link> to
     that column. You should use
     <link linkend="gtk.gtkctree.method.node_get_pixtext">node_get_pixtext</link>
     instead.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.node_get_pixtext">
   <funcsynopsis>
    <funcprototype>
     <funcdef>Array <function>node_get_pixtext</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
     <paramdef>int <parameter>column</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the column pixtext of a given row.
   </shortdesc>
   <desc>
    <para>
     Returns the column pixtext of a given row. The array has a length of
     4 and contains the following values:
     <itemizedlist>
      <listitem>0 - String - Pixtext</listitem>
      <listitem>1 - int - Spacing between icon and text</listitem>
      <listitem>2 - <classname>GdkPixmap</classname> Pixmap</listitem>
      <listitem>3 - <classname>GdkBitmap</classname> Pixmask</listitem>
     </itemizedlist>
    </para>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.get_node_info">
   <funcsynopsis>
    <funcprototype>
     <funcdef>Array <function>get_node_info</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    GGet information corresponding to a node.
   </shortdesc>
   <desc>
    <simpara>
     Get information corresponding to a node. Any of the return parameters can be null.
    </simpara>
    <simpara>
     The array has a size of 8 and contains the same values in the same order as you
     set them with <link linkend="gtk.gtkctree.method.insert_node">insert_node</link> 
     or <link linkend="gtk.gtkctree.method.set_node_info">set_node_info</link>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.node_set_row_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>node_set_row_style</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Set the style of a row.
   </shortdesc>
   <desc>
    <simpara>
     Set the style of a row.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.node_get_row_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkStyle</classname> 
      <function>node_get_row_style</function>
     </funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Get the style of a row.
   </shortdesc>
   <desc>
    <simpara>
     Get the style of a row.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.node_set_cell_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>node_set_cell_style</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
     <paramdef>int <parameter>column</parameter></paramdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Set the style of an individual cell.
   </shortdesc>
   <desc>
    <simpara>
     Set the style of an individual cell.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.node_get_cell_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkStyle</classname> 
      <function>node_get_cell_style</function>
     </funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
     <paramdef>int <parameter>column</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Get the style of an individual cell.
   </shortdesc>
   <desc>
    <simpara>
     Get the style of an individual cell.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.node_set_foreground">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>node_set_foreground</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkColor</classname> 
      <parameter>color</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Set the foreground color of a row.
   </shortdesc>
   <desc>
    <simpara>
     Set the foreground (text) color of a row.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.node_set_background">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>node_set_background</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkColor</classname> 
      <parameter>color</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Set the background color of a row.
   </shortdesc>
   <desc>
    <simpara>
     Set the background color of a row. This is useful in connection with
     <link linkend="gtk.gtkctree.method.node_set_selectable">node_set_selectable</link>
     so that the user can distinguish between selectable and not selectable rows. But then 
     don't forget to change the 
     <link linkend="gtk.gtkctree.method.node_set_foreground">foreground color</link> to
     a contrast color.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.node_set_row_data">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>node_set_row_data</function></funcdef>     
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
     <paramdef>Object <parameter>custom</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Associate a custom object with the row.
   </shortdesc>
   <desc>
    <simpara>
     Associate a custom object with the row.    
    </simpara>
    <simpara>
     If you have e.g. a file tree, then you could add the open file
     handles to the corresponding node.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.node_get_row_data">
   <funcsynopsis>
    <funcprototype>
     <funcdef>Object <function>node_get_row_data</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the custom object associated with the node.
   </shortdesc>
   <desc>
    <simpara>
     Returns the custom object 
     <link linkend="gtk.gtkctree.method.node_set_row_data">associated</link>
     with the node.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.node_moveto">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>node_moveto</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
     <paramdef>int <parameter>column</parameter></paramdef>
     <paramdef>double <parameter>row_align</parameter></paramdef>
     <paramdef>double <parameter>col_align</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    This function makes the given column of the given node visible by scrolling.
   </shortdesc>
   <desc>
    <simpara>
     This function makes the given column of the given node visible by scrolling.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.node_is_visible">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <enumname>GtkVisibility</enumname> 
      <function>node_is_visible</function>
     </funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    True if the node is currently inside the bounds of the window.
   </shortdesc>
   <desc>
    <simpara>
     True if the node is currently inside the bounds of the window. 
     Note that this function can return true even if the node is not viewable, if the node's ancestor is visible.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.set_indent">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_indent</function></funcdef>
     <paramdef>int <parameter>indent</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the number of pixels to shift the levels of the tree.
   </shortdesc>
   <desc>
    <simpara>
    Sets the number of pixels to shift the levels of the tree.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.set_spacing">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_spacing</function></funcdef>
     <paramdef>int <parameter>spacing</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the spacing between the tree graphic and the actual node content.
   </shortdesc>
   <desc>
    <simpara>
     Sets the spacing between the tree graphic and the actual node content.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.set_show_stub">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_show_stub</function></funcdef>
     <paramdef>bool <parameter>show_stub</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    FIXME
   </shortdesc>
   <desc>
    
   </desc>
  </method>

  <method id="gtk.gtkctree.method.set_line_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_line_style</function></funcdef>
     <paramdef>
      <enumname>GtkCTreeLineStyle</enumname> 
      <parameter>line_style</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Set the line style of the tree.
   </shortdesc>
   <desc>
    <simpara>
     Set the line style of the tree.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.set_expander_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_expander_style</function></funcdef>
     <paramdef>
      <enumname>GtkCTreeExpanderStyle</enumname> 
      <parameter>expander_style</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Set the expander style of the tree.
   </shortdesc>
   <desc>
    <simpara>
     Set the expander style of the tree.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.sort_node">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>sort_node</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter>node</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sort the children of a node.
   </shortdesc>
   <desc>
    <para>
     Sort the children of a node. The details of sorting can be set with
     the <classname>GtkCList</classname> functions
     <link linkend="gtk.gtkclist.method.set_sort_column">set_sort_column</link> 
     and
     <link linkend="gtk.gtkclist.method.set_sort_type">set_sort_type</link>.
    </para>
   </desc>
  </method>

  <method id="gtk.gtkctree.method.sort_recursive">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>sort_recursive</function></funcdef>
     <paramdef>
      <classname>GtkCTreeNode</classname> 
      <parameter><optional>node = NULL</optional></parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sort the descendants of a node.
   </shortdesc>
   <desc>
    <para>
     Sort the descendants of a node. The details of sorting can be set with
     the <classname>GtkCList</classname> functions
     <link linkend="gtk.gtkclist.method.set_sort_column">set_sort_colum</link> 
     and
     <link linkend="gtk.gtkclist.method.set_sort_type">set_sort_type</link>.
    </para>
   </desc>
  </method>

 </methods>

 
 
 
 <signals>

  <signal id="gtk.gtkctree.signal.tree-select-row">
   <signalname>tree-select-row</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef><classname>GtkCTree</classname> <parameter>widget</parameter></paramdef>
     <paramdef><classname>GtkCTreeNode</classname> <parameter>node</parameter></paramdef>
     <paramdef>int <parameter>unknown</parameter></paramdef>
     <paramdef><optional>??? <parameter>userparam1</parameter></optional></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emitted when a row is selected.
   </shortdesc>
   <desc>
    <simpara>
     Emitted when a row is selected.
    </simpara>
    <simpara>
     The use of the third parameter is not known, only that is has something 
     to do with the selection mode.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkctree.signal.tree-unselect-row">
   <signalname>tree-unselect-row</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef><classname>GtkCTree</classname> <parameter>widget</parameter></paramdef>
     <paramdef><classname>GtkCTreeNode</classname> <parameter>node</parameter></paramdef>
     <paramdef>int <parameter>unknown</parameter></paramdef>
     <paramdef><optional>??? <parameter>userparam1</parameter></optional></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emitted when a node is unselected.
   </shortdesc>
   <desc>
    <simpara>
     Emitted when a node is unselected.
    </simpara>
    <simpara>
     The use of the third parameter is not known, only that is has something 
     to do with the selection mode.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkctree.signal.tree-expand">
   <signalname>tree-expand</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef><classname>GtkCTree</classname> <parameter>widget</parameter></paramdef>
     <paramdef><classname>GtkCTreeNode</classname> <parameter>node</parameter></paramdef>
     <paramdef><optional>??? <parameter>userparam1</parameter></optional></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emitted when a node is expanded.
   </shortdesc>
   <desc>
    <simpara>
     Emitted when a node is expanded.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkctree.signal.tree-collapse">
   <signalname>tree-collapse</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef><classname>GtkCTree</classname> <parameter>widget</parameter></paramdef>
     <paramdef><classname>GtkCTreeNode</classname> <parameter>node</parameter></paramdef>
     <paramdef><optional>??? <parameter>userparam1</parameter></optional></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emitted when a node is collapsed.
   </shortdesc>
   <desc>
    <simpara>
     Emitted when a node is collapsed.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkctree.signal.tree-move">
   <signalname>tree-move</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef><classname>GtkCTree</classname> <parameter>widget</parameter></paramdef>
     <paramdef><classname>GtkCTreeNode</classname> <parameter>node</parameter></paramdef>
     <paramdef><classname>GtkCTree</classname> <parameter>new_parent</parameter></paramdef>
     <paramdef><classname>GtkCTreeNode</classname> <parameter>new_sibling</parameter></paramdef>
     <paramdef><optional>??? <parameter>userparam1</parameter></optional></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emitted when a node is moved.
   </shortdesc>
   <desc>
    <simpara>
     Emitted when a node is moved.
    </simpara>
   </desc>
  </signal>

 </signals> 
 
 
 
 
 <properties>

  <prop id="gtk.gtkctree.property.clist" type="ro">
   <propname>clist</propname>
   <proptype>GtkCTree</proptype>
   <shortdesc>
    FIXME
   </shortdesc>
   <desc>
   </desc>
  </prop>

  <prop id="gtk.gtkctree.property.row_list" type="ro">
   <propname>row_list</propname>
   <proptype>Array</proptype>
   <shortdesc>
    Array of <link linkend="gtk.gtkctree.method.is_viewable">viewable</link> nodes.
   </shortdesc>
   <desc>
    <simpara>
     Array of <link linkend="gtk.gtkctree.method.is_viewable">viewable</link> nodes. 
     This means that if a node is not <link linkend="gtk.gtkctree.method.expand">expanded</link>,
     its children won't occur on that list.
    </simpara>
   </desc>
  </prop>

  <prop id="gtk.gtkctree.property.selection" type="ro">
   <propname>selection</propname>
   <proptype>Array</proptype>
   <shortdesc>
    Array of selected rows (nodes).
   </shortdesc>
   <desc>
    <simpara>
     Array of selected rows (nodes).
    </simpara>
   </desc>
  </prop>
  
 </properties>
  
</classentry>
