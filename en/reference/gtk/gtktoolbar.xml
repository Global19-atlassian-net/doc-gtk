<?xml version="1.0" encoding="ISO-8859-1" ?>
<classentry id="gtk.gtktoolbar">
 <classmeta>
  <classtitle>GtkToolbar</classtitle>
  <classparent>GtkContainer</classparent>
  <shortdesc>
   Container that creates bars of buttons and other widgets.
  </shortdesc>
  <desc>
   <simpara>
    Horizontal or vertical container for bars of buttons and other widgets.
   </simpara>
   <simpara>
    Toolbars are used to give the user access to often used functions like
    "New document", "Open", "Save" and such. The toolbar can show buttons of
    text and icons as well as only one of both, which can be set during runtime.
   </simpara>
  </desc>
 </classmeta>

 <constructor id="gtk.gtktoolbar.constructor">
  <funcsynopsis>
   <funcprototype>
    <funcdef> <function>GtkToolbar</function></funcdef>
    <paramdef><enumname>GtkOrientation</enumname> <parameter>orientation</parameter></paramdef>
    <paramdef><enumname>GtkToolbarStyle</enumname> <parameter>style</parameter></paramdef>
   </funcprototype>
  </funcsynopsis>
  <shortdesc>
   Creates a new toolbar instance.
  </shortdesc>
  <desc>
   <simpara>
    Creates a new toolbar instance. Since php-gtk doesn't give access to the
    <literal>insert_element</literal> function, the toolbar in php-gtk is not half
    as usable as the original Gtk version. 
   </simpara>
   <simpara>
    The original toolbar creates buttons with icons and text automatically 
    in a way <classname>GtkItemFactory</classname>
    allows it. In php-gtk, you have to create every single button yourself.
   </simpara>
   <example>
    <title>A detachable toolbar</title>
    <programlisting role="php">
<![CDATA[
<?php
if( !extension_loaded('gtk')) {	
	dl( 'php_gtk.' . PHP_SHLIB_SUFFIX); 
}

function toolbarClicked( $objButton, $strType) {
	echo 'clicked ' . $strType . "\r\n";
}

$window	= &new GtkWindow();
$window->set_title( 'plug controller');
$window->set_default_size( 400, 50);
$window->connect_object('destroy', array('gtk', 'main_quit'));
$vbox = &new GtkVBox();

$toolbar	= &new GtkToolbar( GTK_ORIENTATION_HORIZONTAL, GTK_TOOLBAR_BOTH);

$btnNew		= &new GtkButton( 'new');
$btnOpen	= &new GtkButton( 'open');
$btnNew->connect( 'clicked', 'toolbarClicked', 'new');
$btnOpen->connect( 'clicked', 'toolbarClicked', 'open');

$toolbar->append_widget( $btnNew, 'Creates a new document', 'Private new text');
$toolbar->add( $btnOpen);

$handlebox = &new GtkHandleBox();
$handlebox->add( $toolbar);
$vbox->pack_start_defaults( $handlebox);

$label	= &new GtkLabel( 'I should be below the toolbar');
$vbox->pack_start_defaults( $label);

$window->add( $vbox);
$window->show_all();

gtk::main();
?>
]]>
    </programlisting>
   </example>
  </desc>
 </constructor>

 <methods>

  <method id="gtk.gtktoolbar.method.add">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>add</function></funcdef>
     <paramdef><classname>GtkWidget</classname> <parameter>widget</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
   Appends an existing widget to the toolbar.
   </shortdesc>
   <desc>
   <simpara>
    Appends an existing widget to the toolbar. This function overwrites the
    <function class="GtkContainer">add</function> method of <classname>GtkContainer</classname>
    in the way that a call to <function class="GtkToolbar">append_widget</function>
    is made with <literal>NULL</literal> as tooltip parameters.
   </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.append_space">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>append_space</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Adds a spacer element to the end.
   </shortdesc>
   <desc>
    <simpara>
     Adds a spacer element to the end. Just calls 
     <function class="GtkToolbar">insert_space</function> with the 
     position parameter set to the number of widgets.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.prepend_space">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>prepend_space</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Adds a spacer element before the first item.
   </shortdesc>
   <desc>
    <simpara>
     Adds a spacer element before the first item. Just calls 
     <function class="GtkToolbar">insert_space</function> with the 
     position parameter set to 0.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.insert_space">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>insert_space</function></funcdef>
     <paramdef>int <parameter>position</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Inserts a spacer element at the given position.
   </shortdesc>
   <desc>
    <simpara>
     Inserts a spacer element at the given position to make a
     visible gap between 2 groups of toolbar items. The minimum
     value is 0, and the maximum is the number of items which
     are attached to the toolbar.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.append_widget">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>append_widget</function></funcdef>
     <paramdef><classname>GtkWidget</classname> <parameter>widget</parameter></paramdef>
     <paramdef>string <parameter>tooltip_text</parameter></paramdef>
     <paramdef>string <parameter>tooltip_private_text</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
     Adds a widget to the end.
   </shortdesc>
   <desc>
    <simpara>
     Adds a widget to the end. Just calls 
     <function class="GtkToolbar">insert_widget</function> with the 
     position parameter set to the number of widgets.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.prepend_widget">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>prepend_widget</function></funcdef>
     <paramdef><classname>GtkWidget</classname> <parameter>widget</parameter></paramdef>
     <paramdef>string <parameter>tooltip_text</parameter></paramdef>
     <paramdef>string <parameter>tooltip_private_text</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Adds a widget before the first item.
   </shortdesc>
   <desc>
    <simpara>
     Adds a widget before the first item. Just calls 
     <function class="GtkToolbar">insert_widget</function> with the 
     position parameter set to 0.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.insert_widget">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>insert_widget</function></funcdef>
     <paramdef><classname>GtkWidget</classname> <parameter>widget</parameter></paramdef>
     <paramdef>string <parameter>tooltip_text</parameter></paramdef>
     <paramdef>string <parameter>tooltip_private_text</parameter></paramdef>
     <paramdef>int <parameter>position</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Inserts a widget at the given position.
   </shortdesc>
   <desc>
    <simpara>
     Inserts a widget at the given <parameter>position</parameter>. The
     position minimum value is 0, and the maximum is the number of items
     on this toolbar.
    </simpara>
    <simpara>
     The <parameter>tooltip_text</parameter> is the one being visible when
     the mouse hovers over the element. The <parameter>tooltip_private_text</parameter>
     is for context-sensitive help about this widget.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.set_orientation">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_orientation</function></funcdef>
     <paramdef><enumname>GtkOrientation</enumname> <parameter>orientation</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the toolbar orientation to horizontal or vertical.
   </shortdesc>
   <desc>
    <simpara>
     Sets the toolbar orientation to horizontal or vertical.
    </simpara>
    <simpara>
    The <signalname class="GtkToolbar">orientation-changed</signalname> 
     signal is emitted when this function is called.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.set_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_style</function></funcdef>
     <paramdef><enumname>GtkToolbarStyle</enumname> <parameter>style</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the text/icon style.
   </shortdesc>
   <desc>
    <simpara>
     Sets the text/icon style of the toolbar. This setting is 
     applied to all buttons on the toolbar, except for the widgets
     added via the <function class="GtkToolbar">insert_widget</function>
     function. See <function class="GtkToolbar">set_button_relief</function>
     for more details on this problem.
    </simpara>
    <simpara>
     You could write your own method which changes the styles of all the widgets
     by connecting the toolbar to the <signalname class="GtkToolbar">style-changed</signalname>
     signal.
    </simpara>
    <simpara>
     Every application should let the user decide if he wants
     to have icons, text or both displayed in the toolbar.
    </simpara>
    <simpara>
     Note that the toolbar can grow quite large if you use
     text+icons the same time. Pay attention to this when creating
     your application.
    </simpara>
    <simpara>
     The <signalname class="GtkToolbar">style-changed</signalname> 
     signal is emitted when this function is called.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.set_space_size">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_space_size</function></funcdef>
     <paramdef>int <parameter>space_size</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the width/height which a space takes.
   </shortdesc>
   <desc>
    <simpara>
     Sets the width (horitontal orientation) or height (vertical orientation)
     which a spacer takes for display. The width of the line is not affected
     by this setting.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.set_space_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_space_style</function></funcdef>
     <paramdef><enumname>GtkToolbarSpaceStyle</enumname> <parameter>space_style</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the space style: line or invisible.
   </shortdesc>
   <desc>
    <simpara>
     Sets the style of the spacers: Invisible, with only empty space being
     displayed for the spacer or line, which draws a thin vertical (horizontal
     orientation) or horizontal (vertical orientation) in the center of the spacer.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.set_tooltips">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_tooltips</function></funcdef>
     <paramdef>int <parameter>enable</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Enables or disables the display of tooltips
   </shortdesc>
   <desc>
    <simpara>
     Enables or disables the display of tooltips on all the widgets
     on the toolbar.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.set_button_relief">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_button_relief</function></funcdef>
     <paramdef><enumname>GtkReliefStyle</enumname> <parameter>relief</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the relief style for buttons on the toolbar
   </shortdesc>
   <desc>
    <simpara>
     Sets the relief style for buttons on the toolbar. This <emphasis>does not</emphasis>
     affect widgets added via the <function class="GtkToolbar">insert_widget</function>,
     equal if they are buttons or not. 
    </simpara>
    <simpara>
     In-depth information: It works only with widgets created directly by the 
     <literal>insert_element</literal> gtk function. Since php-gtk doesn't give
     access to this, there is no way to get it work.
    </simpara>
    <simpara>
     It works if you use glade for the creation of the toolbar which itself uses
     the <literal>insert_element</literal> function. All buttons on toolbars created
     with glade are affected by <literal>set_button_relief</literal>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.get_button_relief">
   <funcsynopsis>
    <funcprototype>
     <funcdef><enumname>GtkReliefStyle</enumname> <function>get_button_relief</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the button relief style.
   </shortdesc>
   <desc>
    <simpara>
     Returns the current <enumname>GtkReliefStyle</enumname> which can be set with
     <function class="GtkToolbar">set_button_relief</function> method.
    </simpara>
   </desc>
  </method>

 </methods>
 
 
 <signals>

  <signal id="gtk.gtktoolbar.signal.style-changed">
   <signalname>style-changed</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef><classname>GtkToolbar</classname> <parameter>widget</parameter></paramdef>
     <paramdef><enumname>GtkToolbarStyle</enumname> <parameter>style</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emitted when the style has changed.
   </shortdesc>
   <desc>
    <simpara>
     Emitted when the style has changed. Connect the toolbar with signal to your own function
     if you want to implement the style changing for widgets added via the
     <function class="GtkToolbar">insert_widget</function> function.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtktoolbar.signal.orientation-changed">
   <signalname>orientation-changed</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef><classname>GtkToolbar</classname> <parameter>widget</parameter></paramdef>
     <paramdef><enumname>GtkOrientation</enumname> <parameter>orientation</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emitted when the orientation has changed.
   </shortdesc>
   <desc>
    <simpara>
     Emitted when the <link linkend="gtk.gtktoolbar.method.set_orientation">orientation</link>
     has changed.
    </simpara>
   </desc>
  </signal>

</signals> 
 
 

</classentry>
