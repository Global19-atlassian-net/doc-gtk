<?xml version="1.0" encoding="ISO-8859-1" ?>
<classentry id="gtk.gtktoolbar">
 <classmeta>
  <classtitle>GtkToolbar</classtitle>
  <classparent>GtkContainer</classparent>
  <shortdesc>
   Container that creates bars of buttons and other widgets.
  </shortdesc>
  <desc>
   <simpara>
    Horizontal or vertical container for bars of buttons and other widgets.
   </simpara>
   <simpara>
    Toolbars are used to give the user access to often used functions like
    "New document", "Open", "Save" and such. The toolbar can show buttons of
    text and icons as well as only one of both, which can be set during runtime.
   </simpara>
   <note>
    <simpara>
     The methods <function class="GtkToolbar">insert_element</function>,
     <function class="GtkToolbar">append_element</function>,
     <function class="GtkToolbar">prepend_element</function>,
     <function class="GtkToolbar">insert_item</function>,
     <function class="GtkToolbar">append_item</function> and
     <function class="GtkToolbar">prepend_item</function> 
     as well as all the properties
     are available since PHP-Gtk 1.0.1 only. 
    </simpara>
   </note>
  </desc>
 </classmeta>

 <constructor id="gtk.gtktoolbar.constructor">
  <funcsynopsis>
   <funcprototype>
    <funcdef> <function>GtkToolbar</function></funcdef>
    <paramdef><enumname>GtkOrientation</enumname> <parameter>orientation</parameter></paramdef>
    <paramdef><enumname>GtkToolbarStyle</enumname> <parameter>style</parameter></paramdef>
   </funcprototype>
  </funcsynopsis>
  <shortdesc>
   Creates a new toolbar instance.
  </shortdesc>
  <desc>
   <simpara>
    Creates a new toolbar instance.
   </simpara>
   <example>
    <title>A detachable toolbar</title>
    <programlisting role="php">
<![CDATA[
<?php
if( !extension_loaded('gtk')) {	
	dl( 'php_gtk.' . PHP_SHLIB_SUFFIX); 
}

function toolbarClicked( $objButton, $strType)
{
	echo 'clicked ' . $strType . "\r\n";
}

$window	= &new GtkWindow();
$window->set_title( 'toolbar test');
$window->set_default_size( 400, 70);
$window->connect_object('destroy', array('gtk', 'main_quit'));
$vbox = &new GtkVBox();

$systemimage = array(
'13 13 5 2',
'  c None s None',
'. c topShadowColor m white c lightblue',
'X s iconColor1 m black c black',
'o s bottomShadowColor m black c #646464646464',
'O s selectColor m white c red',
"                          ",
"          . . .           ",
"      . . X X X o o       ",
"    . X X X X X X X o     ",
"    . X X X X X X X o     ",
"  . X X X X O X X X X o   ",
"  . X X X O O O X X X o   ",
"  . X X X X O X X X X o   ",
"    . X X X X X X X o     ",
"    . X X X X X X X o     ",
"      o o X X X o o       ",
"          o o o           ",
"                          "
);
$window->realize();
list($pixmap, $mask) = Gdk::pixmap_create_from_xpm_d($window->window, null, $systemimage);
$pixmapwid = &new GtkPixmap($pixmap, $mask);

$toolbar = &new GtkToolbar( GTK_ORIENTATION_HORIZONTAL, GTK_TOOLBAR_BOTH);
$toolbar->set_button_relief( GTK_RELIEF_NONE);
$toolbar->set_space_style( GTK_TOOLBAR_SPACE_LINE);

$toolbar->append_item( 'new', 'Creates a new document', "Closes the active document\r\nand creates an empty new one", 
	null, 'toolbarClicked', 'new' );
$toolbar->append_item( 'open', 'Opens an existing document', null, null, 'toolbarClicked', 'open' );
$toolbar->append_space();
$toolbar->append_item( 'save', 'Saves the document', 'Saves the document on the harddisk', $pixmapwid, 'toolbarClicked', 'save' );
$toolbar->append_item( 'saveas', 'Saves the document with another filename', null, null, 'toolbarClicked', 'saveas' );

$handlebox = &new GtkHandleBox();
$handlebox->add( $toolbar);
$vbox->pack_start_defaults( $handlebox);

$label	= &new GtkLabel( 'I should be below the toolbar');
$vbox->pack_start_defaults( $label);

$window->add( $vbox);
$window->show_all();

gtk::main();
?>
]]>
    </programlisting>
   </example>
  </desc>
 </constructor>

 <methods>

  <method id="gtk.gtktoolbar.method.add">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>add</function></funcdef>
     <paramdef><classname>GtkWidget</classname> <parameter>widget</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
   Appends an existing widget to the toolbar.
   </shortdesc>
   <desc>
   <simpara>
    Appends an existing widget to the toolbar. This function overwrites the
    <function class="GtkContainer">add</function> method of <classname>GtkContainer</classname>
    in the way that a call to <function class="GtkToolbar">append_widget</function>
    is made with <literal>NULL</literal> as tooltip parameters.
   </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.append_space">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>append_space</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Adds a spacer element to the end.
   </shortdesc>
   <desc>
    <simpara>
     Adds a spacer element to the end. Just calls 
     <function class="GtkToolbar">insert_space</function> with the 
     position parameter set to the number of widgets.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.prepend_space">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>prepend_space</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Adds a spacer element before the first item.
   </shortdesc>
   <desc>
    <simpara>
     Adds a spacer element before the first item. Just calls 
     <function class="GtkToolbar">insert_space</function> with the 
     position parameter set to 0.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.insert_space">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>insert_space</function></funcdef>
     <paramdef>int <parameter>position</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Inserts a spacer element at the given position.
   </shortdesc>
   <desc>
    <simpara>
     Inserts a spacer element at the given position to make a
     visible gap between 2 groups of toolbar items. The minimum
     value is 0, and the maximum is the number of items which
     are attached to the toolbar.
    </simpara>
    <simpara>
     In the end, insert_space calls 
     <function class="GtkToolbar">insert_item</function> with
     the type parameter set to <literal>space</literal>.
    </simpara>
   </desc>
  </method>

  
  <!-- the base of all... *_element -->
  <method id="gtk.gtktoolbar.method.append_element">
   <funcsynopsis>
    <funcprototype>
     <funcdef><classname>GtkWidget</classname> <function>append_element</function></funcdef>
     <paramdef><enumname>GtkToolbarChildType</enumname> <parameter>widget_type</parameter></paramdef>
     <paramdef><classname>GtkWidget</classname> <parameter>widget</parameter></paramdef>
     <paramdef>string <parameter>button_text</parameter></paramdef>
     <paramdef>string <parameter>tooltip_text</parameter></paramdef>
     <paramdef>string <parameter>tooltip_private_text</parameter></paramdef>
     <paramdef><classname>GtkPixmap</classname> <parameter>icon</parameter></paramdef>
     <paramdef>string <parameter>callback</parameter></paramdef>
     <paramdef>mixed <parameter><optional>userparam</optional></parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
     Adds a new toolbar element button to the end.
   </shortdesc>
   <desc>
    <simpara>
     Adds a new toolbar element to the end. Just calls 
     <function class="GtkToolbar">insert_element</function> with the 
     position parameter set to the number of widgets.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.prepend_element">
   <funcsynopsis>
    <funcprototype>
     <funcdef><classname>GtkWidget</classname> <function>prepend_element</function></funcdef>
     <paramdef><enumname>GtkToolbarChildType</enumname> <parameter>widget_type</parameter></paramdef>
     <paramdef><classname>GtkWidget</classname> <parameter>widget</parameter></paramdef>
     <paramdef>string <parameter>button_text</parameter></paramdef>
     <paramdef>string <parameter>tooltip_text</parameter></paramdef>
     <paramdef>string <parameter>tooltip_private_text</parameter></paramdef>
     <paramdef><classname>GtkPixmap</classname> <parameter>icon</parameter></paramdef>
     <paramdef>string <parameter>callback</parameter></paramdef>
     <paramdef>mixed <parameter><optional>userparam</optional></parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Adds a new toolbar element before the first item.
   </shortdesc>
   <desc>
    <simpara>
     Adds a new toolbar element before the first item. Just calls 
     <function class="GtkToolbar">insert_element</function> with the 
     position parameter set to 0.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.insert_element">
   <funcsynopsis>
    <funcprototype>
     <funcdef><classname>GtkWidget</classname> <function>insert_element</function></funcdef>
     <paramdef><enumname>GtkToolbarChildType</enumname> <parameter>widget_type</parameter></paramdef>
     <paramdef><classname>GtkWidget</classname> <parameter>widget</parameter></paramdef>
     <paramdef>string <parameter>button_text</parameter></paramdef>
     <paramdef>string <parameter>tooltip_text</parameter></paramdef>
     <paramdef>string <parameter>tooltip_private_text</parameter></paramdef>
     <paramdef><classname>GtkWidget</classname> <parameter>icon</parameter></paramdef>
     <paramdef>int <parameter>position</parameter></paramdef>
     <paramdef>string <parameter>callback</parameter></paramdef>
     <paramdef>mixed <parameter><optional>userparam</optional></parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Inserts a new toolbar element at the given position.
   </shortdesc>
   <desc>
    <simpara>
     Inserts a new toolbar element at the given <parameter>position</parameter>. 
     This is the base function for all other insert/append/prepend functions.
    </simpara>
    <simpara>
     The <parameter>widget_type</parameter> determines which type of widget
     shall be inserted/created. <parameter>widget</parameter> has to be set
     if <parameter>widget_type</parameter> is set to <literal>GTK_TOOLBAR_CHILD_WIDGET</literal>.
     All other types require a <literal>null</literal> as <parameter>widget</parameter>
     because they are created by the function.
    </simpara>
    <simpara>
     <parameter>button_text</parameter> specifies the text (&quot;label&quot;) to be visible
     on the button, <parameter>tooltip_text</parameter> is the tooltip text which will
     be visible when the user hovers the button for a specific time. 
     <parameter>tooltip_private_text</parameter> is the text being visible using
     a <classname>GtkTipsQuery</classname>. See <classname>GtkTooltips</classname>
     for more details on this topic.
    </simpara>
    <simpara>
     <parameter>icon</parameter> is a widget, preferably a <classname>GtkPixmap</classname>
     which shall be used as an icon. The icon is used when the <classname>GtkToolbarStyle</classname>
     is <link linkend="gtk.gtktoolbar.method.set_style">set</link> to <literal>icon</literal> or
     <literal>both</literal>  (only with widgets created by <literal>insert_element</literal>). 
     You can use every type of widget, but take care that
     the toolbar button can be identified by it when the style is <literal>icon</literal> only.
     If the icon is set to <literal>null</literal>, the text will still be visible.
    </simpara>
    <simpara>
     The <parameter>position</parameter> parameter can be in the range from 0 (insert
     as first element) to the number of widgets (append after the last) 
     being on the toolbar. This can be determined by doing a
     <literal>count( $toolbar-&gt;children())</literal>, but just an 
     <function class="GtkToolbar">append_element</function> should be more
     easy.
    </simpara>
    <simpara>
     Last parameter is <parameter>callback</parameter>, the function to be called
     when the widget is clicked. You can pass a number of self-defined extra 
     parameters to the callback function by appending them after the callback parameter.
    </simpara>
    <example>
     <title>Using the insert_element toolbar function</title>
     <programlisting role="php">
<![CDATA[
list($pixmap, $mask) = Gdk::pixmap_create_from_xpm($window->window, null, 'icon-new.xpm');
$newicon = &new GtkPixmap($pixmap, $mask);

$toolbar->insert_element(
GTK_TOOLBAR_CHILD_BUTTON,
'New',
'Create a new document',
"Closes the current document and\r\ncreates a new, empty one.",
$newicon,
0,
'toolbarClicked',
'new'
);
]]>
     </programlisting>
    </example>
   </desc>
  </method>


  <!-- **_item -->
  <method id="gtk.gtktoolbar.method.append_item">
   <funcsynopsis>
    <funcprototype>
     <funcdef><classname>GtkButton</classname> <function>append_item</function></funcdef>
     <paramdef>string <parameter>button_text</parameter></paramdef>
     <paramdef>string <parameter>tooltip_text</parameter></paramdef>
     <paramdef>string <parameter>tooltip_private_text</parameter></paramdef>
     <paramdef><classname>GtkPixmap</classname> <parameter>icon</parameter></paramdef>
     <paramdef>string <parameter>callback</parameter></paramdef>
     <paramdef>mixed <parameter><optional>userparam</optional></parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
     Adds a new button to the end.
   </shortdesc>
   <desc>
    <simpara>
     Adds a new button to the end. Just calls 
     <function class="GtkToolbar">insert_element</function> with the 
     position parameter set to the number of widgets and the widget
     type set to <literal>button</literal>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.prepend_item">
   <funcsynopsis>
    <funcprototype>
     <funcdef><classname>GtkButton</classname> <function>prepend_item</function></funcdef>
     <paramdef>string <parameter>button_text</parameter></paramdef>
     <paramdef>string <parameter>tooltip_text</parameter></paramdef>
     <paramdef>string <parameter>tooltip_private_text</parameter></paramdef>
     <paramdef><classname>GtkPixmap</classname> <parameter>icon</parameter></paramdef>
     <paramdef>string <parameter>callback</parameter></paramdef>
     <paramdef>mixed <parameter><optional>userparam</optional></parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Adds a new button before the first item.
   </shortdesc>
   <desc>
    <simpara>
     Adds a widget before the first item. Just calls 
     <function class="GtkToolbar">insert_element</function> with the 
     position parameter set to 0 and the widget
     type set to <literal>button</literal>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.insert_item">
   <funcsynopsis>
    <funcprototype>
     <funcdef><classname>GtkButton</classname> <function>insert_item</function></funcdef>
     <paramdef>string <parameter>button_text</parameter></paramdef>
     <paramdef>string <parameter>tooltip_text</parameter></paramdef>
     <paramdef>string <parameter>tooltip_private_text</parameter></paramdef>
     <paramdef><classname>GtkPixmap</classname> <parameter>icon</parameter></paramdef>
     <paramdef>int <parameter>position</parameter></paramdef>
     <paramdef>string <parameter>callback</parameter></paramdef>
     <paramdef>mixed <parameter><optional>userparam</optional></parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Inserts a new button at the given position.
   </shortdesc>
   <desc>
    <simpara>
     Inserts a new button at the given <parameter>position</parameter>. 
     Just calls <function class="GtkToolbar">insert_element</function> 
     with the the widget type set to <literal>button</literal>.
    </simpara>
   </desc>
  </method>
 
   
  <!-- append|prepend|insert_widget -->
  <method id="gtk.gtktoolbar.method.append_widget">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>append_widget</function></funcdef>
     <paramdef><classname>GtkWidget</classname> <parameter>widget</parameter></paramdef>
     <paramdef>string <parameter>tooltip_text</parameter></paramdef>
     <paramdef>string <parameter>tooltip_private_text</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
     Adds a widget to the end.
   </shortdesc>
   <desc>
    <simpara>
     Adds a widget to the end. Just calls 
     <function class="GtkToolbar">insert_widget</function> with the 
     position parameter set to the number of widgets.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.prepend_widget">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>prepend_widget</function></funcdef>
     <paramdef><classname>GtkWidget</classname> <parameter>widget</parameter></paramdef>
     <paramdef>string <parameter>tooltip_text</parameter></paramdef>
     <paramdef>string <parameter>tooltip_private_text</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Adds a widget before the first item.
   </shortdesc>
   <desc>
    <simpara>
     Adds a widget before the first item. Just calls 
     <function class="GtkToolbar">insert_widget</function> with the 
     position parameter set to 0.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.insert_widget">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>insert_widget</function></funcdef>
     <paramdef><classname>GtkWidget</classname> <parameter>widget</parameter></paramdef>
     <paramdef>string <parameter>tooltip_text</parameter></paramdef>
     <paramdef>string <parameter>tooltip_private_text</parameter></paramdef>
     <paramdef>int <parameter>position</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Inserts a widget at the given position.
   </shortdesc>
   <desc>
    <simpara>
     Inserts a widget at the given <parameter>position</parameter>. The
     position minimum value is 0, and the maximum is the number of items
     on this toolbar.
    </simpara>
    <simpara>
     The <parameter>tooltip_text</parameter> is the one being visible when
     the mouse hovers over the element. The <parameter>tooltip_private_text</parameter>
     is for context-sensitive help about this widget.
    </simpara>
   </desc>
  </method>

  
  <!-- non-inserting functions -->
  <method id="gtk.gtktoolbar.method.set_orientation">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_orientation</function></funcdef>
     <paramdef><enumname>GtkOrientation</enumname> <parameter>orientation</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the toolbar orientation to horizontal or vertical.
   </shortdesc>
   <desc>
    <simpara>
     Sets the toolbar orientation to horizontal or vertical.
    </simpara>
    <simpara>
    The <signalname class="GtkToolbar">orientation-changed</signalname> 
     signal is emitted when this function is called.
    </simpara>
    <simpara>
     You can read the current orientation with the 
     <propname class="GtkToolbar">orientation</propname> property.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.set_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_style</function></funcdef>
     <paramdef><enumname>GtkToolbarStyle</enumname> <parameter>style</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the text/icon style.
   </shortdesc>
   <desc>
    <simpara>
     Sets the text/icon style of the toolbar. This setting is 
     applied to all buttons on the toolbar, except for the widgets
     added via the <function class="GtkToolbar">insert_widget</function>
     function.
    </simpara>
    <simpara>
     You could write your own method which changes the styles of all the widgets
     by connecting the toolbar to the <signalname class="GtkToolbar">style-changed</signalname>
     signal.
    </simpara>
    <simpara>
     Every application should let the user decide if he wants
     to have icons, text or both displayed in the toolbar.
    </simpara>
    <simpara>
     Note that the toolbar can grow quite large if you use
     text+icons the same time. Pay attention to this when creating
     your application.
    </simpara>
    <simpara>
     The <signalname class="GtkToolbar">style-changed</signalname> 
     signal is emitted when this function is called.
    </simpara>
    <simpara>
     You can read the current style with the 
     <propname class="GtkToolbar">style</propname> property.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.set_space_size">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_space_size</function></funcdef>
     <paramdef>int <parameter>space_size</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the width/height which a space takes.
   </shortdesc>
   <desc>
    <simpara>
     Sets the width (horitontal orientation) or height (vertical orientation)
     which a spacer takes for display. The width of the line is not affected
     by this setting.
    </simpara>
    <simpara>
     You can read the current space size with the 
     <propname class="GtkToolbar">space_size</propname> property.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.set_space_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_space_style</function></funcdef>
     <paramdef><enumname>GtkToolbarSpaceStyle</enumname> <parameter>space_style</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the space style: line or invisible.
   </shortdesc>
   <desc>
    <simpara>
     Sets the style of the spacers: Invisible, with only empty space being
     displayed for the spacer or line, which draws a thin vertical (horizontal
     orientation) or horizontal (vertical orientation) in the center of the spacer.
    </simpara>
    <simpara>
     You can read the current space style with the 
     <propname class="GtkToolbar">space_style</propname> property.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.set_tooltips">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_tooltips</function></funcdef>
     <paramdef>int <parameter>enable</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Enables or disables the display of tooltips
   </shortdesc>
   <desc>
    <simpara>
     Enables or disables the display of tooltips on all the widgets
     on the toolbar.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.set_button_relief">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_button_relief</function></funcdef>
     <paramdef><enumname>GtkReliefStyle</enumname> <parameter>relief</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the relief style for buttons on the toolbar
   </shortdesc>
   <desc>
    <simpara>
     Sets the relief style for buttons on the toolbar. This <emphasis>does not</emphasis>
     affect widgets added via the <function class="GtkToolbar">insert_widget</function>,
     equal if they are buttons or not. 
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktoolbar.method.get_button_relief">
   <funcsynopsis>
    <funcprototype>
     <funcdef><enumname>GtkReliefStyle</enumname> <function>get_button_relief</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the button relief style.
   </shortdesc>
   <desc>
    <simpara>
     Returns the current <enumname>GtkReliefStyle</enumname> which can be set with
     <function class="GtkToolbar">set_button_relief</function> method.
    </simpara>
   </desc>
  </method>

 </methods>
 
 
 
 
 <signals>

  <signal id="gtk.gtktoolbar.signal.style-changed">
   <signalname>style-changed</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef><classname>GtkToolbar</classname> <parameter>widget</parameter></paramdef>
     <paramdef><enumname>GtkToolbarStyle</enumname> <parameter>style</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emitted when the style has changed.
   </shortdesc>
   <desc>
    <simpara>
     Emitted when the style has changed. Connect the toolbar with this signal 
     to your own function if you want to implement the style changing 
     for widgets added via the
     <function class="GtkToolbar">insert_widget</function> function.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtktoolbar.signal.orientation-changed">
   <signalname>orientation-changed</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef><classname>GtkToolbar</classname> <parameter>widget</parameter></paramdef>
     <paramdef><enumname>GtkOrientation</enumname> <parameter>orientation</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emitted when the orientation has changed.
   </shortdesc>
   <desc>
    <simpara>
     Emitted when the <link linkend="gtk.gtktoolbar.method.set_orientation">orientation</link>
     has changed.
    </simpara>
   </desc>
  </signal>

</signals> 
 

 <properties>

  <prop id="gtk.gtktoolbar.property.orientation" type="ro">
   <propname>orientation</propname>
   <proptype><enumname>GtkOrientation</enumname></proptype>
   <shortdesc>
    Returns the orientation (horizontal or vertical) of the toolbar
   </shortdesc>
   <desc>
    <simpara>
     Returns the orientation (horizontal or vertical) of the toolbar
    </simpara>
    <simpara>
     It can be set with <function class="GtkToolbar">set_orientation</function>.
    </simpara>
   </desc>
  </prop>

  <prop id="gtk.gtktoolbar.property.space_size" type="ro">
   <propname>space_size</propname>
   <proptype>int</proptype>
   <shortdesc>
    Returns the width/height which a space takes.
   </shortdesc>
   <desc>
    <simpara>
     Returns the width/height which a space takes.
    </simpara>
    <simpara>
     It can be set with <function class="GtkToolbar">set_space_size</function>.
    </simpara>
   </desc>
  </prop>

  <prop id="gtk.gtktoolbar.property.space_style" type="ro">
   <propname>space_style</propname>
   <proptype><enumname>GtkToolbarSpaceStyle</enumname></proptype>
   <shortdesc>
    Returns the current space style of the toolbar.
   </shortdesc>
   <desc>
    <simpara>
     Returns the current space style of the toolbar (line or invisible).
    </simpara>
    <simpara>
     It can be set with <function class="GtkToolbar">set_space_style</function>.
    </simpara>
   </desc>
  </prop>

  <prop id="gtk.gtktoolbar.property.style" type="ro">
   <propname>style</propname>
   <proptype><enumname>GtkToolbarStyle</enumname></proptype>
   <shortdesc>
    Returns the current toolbar style.
   </shortdesc>
   <desc>
    <simpara>
     Returns the current toolbar style (icons only, text only, both).
    </simpara>
    <simpara>
     It can be set with <function class="GtkToolbar">set_style</function>.
    </simpara>
   </desc>
  </prop>

 </properties>

</classentry>
