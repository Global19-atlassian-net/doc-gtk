<?xml version="1.0" encoding="ISO-8859-1" ?>
<classentry id="gtk.gtkarrow">
 <classmeta>
  <classtitle>GtkArrow</classtitle>
  <classparent>GtkMisc</classparent>
  <shortdesc>
   An arrow pointing in one of the four cardinal directions.
  </shortdesc>
  <desc>
   <simpara>
    The <classname>GtkArrow</classname> widget is a drawn triangle that
    has its "nose" pointing in the direction specified during
    construction.  The look of the arrow is varied through the choice
    of <enumname>GtkShadowType</enumname>, and it inherits from the 
    <classname>GtkMisc</classname> class the ability to have its own
    padding and alignment properties altered directly, both of which
    can also have a surprisingly big impact on the arrow's appearance.
   </simpara>
  </desc>
 </classmeta>

 <constructor id="gtk.gtkarrow.constructor">
  <funcsynopsis>
   <funcprototype>
    <funcdef> <function>GtkArrow</function></funcdef>
    <paramdef>
     <enumname>GtkArrowType</enumname> 
     <parameter>arrow_type</parameter>
    </paramdef>
    <paramdef>
     <enumname>GtkShadowType</enumname> 
     <parameter>shadow_type</parameter>
    </paramdef>
   </funcprototype>
  </funcsynopsis>
  <shortdesc>
   Displays an arrow pointing in one of the four cardinal directions.
  </shortdesc>
  <desc>
   <simpara>
    For a simple widget, there are a lot of options in the construction
    of the <classname>GtkArrow</classname> - twenty different combinations
    in all.
   </simpara>
   <simpara>
    It may not be immediately obvious that the 
    <classname>GtkArrow</classname> is made up entirely of lines of shadow. 
    As a result of this, the <enumname>GtkShadowType</enumname> option 
    <literal>GTK_SHADOW_NONE</literal> actually creates an invisible arrow - 
    a potentially useful option to have, given that the parameters of the
    arrow can be redefined at any point using the
    <function class="GtkArrow">set</function> method.
   </simpara>
   <para>
    The syntax to create a right-pointing, etched arrow would be:
    <informalexample>
     <programlisting>
<![CDATA[
$arrow = &new GtkArrow(GTK_ARROW_RIGHT, GTK_SHADOW_ETCHED_IN);
]]>
     </programlisting>
    </informalexample>
   </para>
   <example>
    <title>A list of <classname>GtkArrow</classname>s</title>
    <programlisting role="php">
<![CDATA[
<?php
if( !extension_loaded('gtk')) {	
	dl( 'php_gtk.' . PHP_SHLIB_SUFFIX); 
}

$window = &new GtkWindow();
$window->set_default_size( 600, 500);
$window->connect_object('destroy', array('gtk', 'main_quit'));

$table	= &new GtkTable( 5, 6);

$color = &new GdkColor( '#FF0000');

$arTxtArrowTypes = array( 'GTK_ARROW_UP', 'GTK_ARROW_DOWN', 'GTK_ARROW_LEFT', 'GTK_ARROW_RIGHT');
$arTxtShadowTypes = array( '', 'GTK_SHADOW_NONE', 'GTK_SHADOW_IN', 'GTK_SHADOW_OUT', 'GTK_SHADOW_ETCHED_IN', 'GTK_SHADOW_ETCHED_OUT');
for( $nA = 0; $nA < 6; $nA++) {
	$label	= &new GtkLabel( $arTxtShadowTypes[$nA]);
	$table->attach( $label, 0, 1, $nA, $nA+1);
	
    for( $nB = 0; $nB < 5; $nB++) {
		if( $nA == 0) {
			$widget	= &new GtkLabel( $arTxtArrowTypes[$nB]);
		} else {
			$widget = &new GtkArrow( $nB, $nA-1);
			$style = $widget->style;
			$style->bg[GTK_STATE_NORMAL] = $color;
//			$widget->set_style( $style);
		}
		$table->attach( $widget, $nB+1, $nB+2, $nA, $nA+1, GTK_EXPAND|GTK_FILL, GTK_EXPAND|GTK_FILL);
	}
}

$window->add( $table);
$window->show_all();
gtk::main();
?>
]]>
    </programlisting>
   </example>
  </desc>
 </constructor>

 <methods>

  <method id="gtk.gtkarrow.method.set">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set</function></funcdef>
     <paramdef>
      <enumname>GtkArrowType</enumname> 
      <parameter>arrow_type</parameter>
     </paramdef>
     <paramdef>
      <enumname>GtkShadowType</enumname> 
      <parameter>shadow_type</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets new parameter values for an existing <classname>GtkArrow</classname>.
   </shortdesc>
   <desc>
    <simpara>
     This method redefines the parameters for an existing 
     <classname>GtkArrow</classname>.  It would typically be used within a
     callback function where the arrow was required to point in another
     direction, change its appearance and/or vanish.
    </simpara>
   </desc>
  </method>

 </methods>

 <properties>

  <prop id="gtk.gtkarrow.property.arrow_type" type="ro">
   <propname>arrow_type</propname>
   <proptype><enumname>GtkArrowType</enumname></proptype>
   <shortdesc>
    Direction of arrow's nose.
   </shortdesc>
   <desc>
    <simpara>
     The <propname class="GtkArrow">arrow_type</propname> property is a 
     <enumname>GtkArrowType</enumname> enumerated value which can be
     queried to test in which direction the arrow is currently pointing.
    </simpara>
   </desc>
  </prop>

  <prop id="gtk.gtkarrow.property.shadow_type" type="ro">
   <propname>shadow_type</propname>
   <proptype><enumname>GtkShadowType</enumname></proptype>
   <shortdesc>
    Appearance of arrow.
   </shortdesc>
   <desc>
    <simpara>
     The <propname class="GtkArrow">shadow_type</propname> property is a 
     <enumname>GtkShadowType</enumname> enumerated value which can be
     queried to test the current style of the arrow's appearance.
    </simpara>
   </desc>
  </prop>

 </properties>

</classentry>
