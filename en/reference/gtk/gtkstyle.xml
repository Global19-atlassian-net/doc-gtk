<?xml version="1.0" encoding="ISO-8859-1" ?>
<classentry id="gtk.gtkstyle">
 <classmeta>
  <classtitle>GtkStyle</classtitle>
  <classparent></classparent>
  <shortdesc>
   A class that determines the appearance of widgets.
  </shortdesc>
  <desc>
   <para>
    <classname>GtkStyle</classname> is a structure that is used to define
    the colors displayed in any widget, or across an application.  Being a 
    <classname>GtkWidget</classname> property, it is accessible through all
    objects that take up screen space, using the syntax:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$style = $widget->style;
?>
]]>
     </programlisting>
    </informalexample>
    It is also possible to create a new GtkStyle object in the normal way,
    e.g.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$style = &new GtkStyle();
?>
]]>
     </programlisting>
    </informalexample>
    or to take the default application style:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$style = gtk::widget_get_default_style();
?>
]]>
     </programlisting>
    </informalexample>
    in order to change the style across an application.
   </para>
   <simpara>
    Setting a style across an application can also be achieved by using
    rc files.  There are two in the PHP-GTK test directory which are used
    in <filename>gtk.php</filename>.
   </simpara>
   <!--TODO - write userguide chapter on rc files -sf mar 02 -->
   <simpara>
    The style functions are generally not buggy, the only known exception
    being where the <propname class="GtkStyle">text</propname> and 
    <propname class="GtkStyle">base</propname> properties are intended to
    describe text and its normally-white background.  In some cases this
    has not worked, and you may find that you need to use 
    <propname class="GtkStyle">fg</propname> to color the text.
   </simpara>
   <note>
    <simpara>
     In all cases where the property type is given as 
     <literal>array</literal>, what is being referred to is an array
     consisting of the five <enumname>GtkStateType</enumname> states.
    </simpara>
   </note>
  </desc>
 </classmeta>

 <constructor id="gtk.gtkstyle.constructor">
  <funcsynopsis>
   <funcprototype>
    <funcdef> <function>GtkStyle</function></funcdef>
    <paramdef>void</paramdef>
   </funcprototype>
  </funcsynopsis>
  <shortdesc>
   Creates a new style for a widget.
  </shortdesc>
  <desc>
   <para>
    There are several ways to define the style across an application, but
    only two ways to directly set the style on a given widget.
    <example>
     <title>Writing to a widget's style property.</title>
     <programlisting role="php">
<![CDATA[
<?php
if( !extension_loaded('gtk')) {	
	dl( 'php_gtk.' . PHP_SHLIB_SUFFIX); 
}

$window = &new GtkWindow();
$window->set_position(GTK_WIN_POS_CENTER);
$window->connect_object('destroy', array('gtk', 'main_quit'));

/* set up a few buttons just to prove we're only changing one of them */
$bbox = &new GtkVButtonBox();
$window->add($bbox);

for($i = 0; $i < 8; $i++) {
  $button[$i] = &new GtkButton("This is Button $i");
  $bbox->pack_start($button[$i], false);
  $button[$i]->show();
}

/* method 1 : set up a new style and define the parts you want to define. 
   The remaining style elements retain the application's default settings. */
$newstyle = &new GtkStyle();
$cyan = &new GdkColor('#00FFFF');
$newstyle->fg[GTK_STATE_PRELIGHT] = $cyan;
$label = $button[5]->child;
$label->set_style($newstyle);

/* gdk::color_parse() uses a color that is defined on your system to fill
   a GdkColor structure.  It can be more convenient than manually creating
   a new GdkColor, particularly if you're only assigning the color once. */
$newstyle->bg[GTK_STATE_NORMAL] = gdk::color_parse('ivory');
$button[5]->set_style($newstyle);

/* method 2 : copy the existing style from a widget and alter it.  Defining
   a new style would overwrite the existing non-default style settings. */
$style2 = $label->style;
$newstyle2 = $style2->copy();
$font = 
gdk::font_load('-unknown-Arial-bold-r-normal--*-160-*-*-p-0-iso8859-1');
$newstyle2->font = $font;
$label->set_style($newstyle2);

$window->show_all();

gtk::main();
?>
]]>
     </programlisting>
    </example>
   </para>
  </desc>
 </constructor>

 <methods>

  <method id="gtk.gtkstyle.method.copy">
   <funcsynopsis>
    <funcprototype>
     <funcdef>GtkStyle <function>copy</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Copies an existing style.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkStyle">copy</function> takes an existing style
     and copies it wholesale, including any prior modifications that have
     been made to it.
    </simpara>
   </desc>
  </method>

 </methods>

 <properties>

  <prop id="gtk.gtkstyle.property.black" type="rw">
   <propname>black</propname>
   <proptype><classname>GdkColor</classname></proptype>
   <shortdesc>
    The color being used as black.
   </shortdesc>
   <desc>
    <simpara>
     Returns the a <classname>GdkColor</classname> object representing the
     black color.
    </simpara>
    <programlisting role="php">
<![CDATA[
$style	= &new GtkStyle;
$style->bg[GTK_STATE_NORMAL]	= $style->black;
]]>
    </programlisting>
    <para>
     You can even overwrite the color with your own:
     <programlisting role="php">
<![CDATA[
$style	= &new GtkStyle;
$red	= &new GdkColor('#FF0000');
$style->white	= $red;
]]>
     </programlisting>
    </para>
   </desc>
  </prop>

  <prop id="gtk.gtkstyle.property.white" type="rw">
   <propname>white</propname>
   <proptype><classname>GdkColor</classname></proptype>
   <shortdesc>
    The color being used as white.
   </shortdesc>
   <desc>
    <simpara>
     Returns the a <classname>GdkColor</classname> object representing the
     white color.
    </simpara>
    <programlisting role="php">
<![CDATA[
$style	= &new GtkStyle();
$style->fg[GTK_STATE_NORMAL]	= $style->white;
]]>
    </programlisting>
   </desc>
  </prop>

  <prop id="gtk.gtkstyle.property.font" type="rw">
   <propname>font</propname>
   <proptype><classname>GdkFont</classname></proptype>
   <shortdesc>
    The font.
   </shortdesc>
   <desc>
    <simpara>
     Returns or sets the current font of the style.
    </simpara>
    <programlisting role="php">
<![CDATA[
$style	= &new GtkStyle();
$style->font = gdk::font_load( '-bitsteam-bitstream vera sans mono-bold-r-normal-*-24-*-*-*-*-*-*-*');
]]>
    </programlisting>
   </desc>
  </prop>

  <prop id="gtk.gtkstyle.property.black_gc" type="rw">
   <propname>black_gc</propname>
   <proptype><classname>GdkGC</classname></proptype>
   <shortdesc>
    Graphics information for the black color.
   </shortdesc>
   <desc>
    <simpara>
     The <classname>GdkGC</classname> object for the 
     <propname class="GtkStyle">black</propname> color.
    </simpara>
   </desc>
  </prop>

  <prop id="gtk.gtkstyle.property.white_gc" type="rw">
   <propname>white_gc</propname>
   <proptype><classname>GdkGC</classname></proptype>
   <shortdesc>
    Graphics information for the white color.
   </shortdesc>
   <desc>
    <simpara>
     The <classname>GdkGC</classname> object for the 
     <propname class="GtkStyle">white</propname> color.
    </simpara>
   </desc>
  </prop>

  <prop id="gtk.gtkstyle.property.colormap" type="rw">
   <propname>colormap</propname>
   <proptype><classname>GdkColormap</classname></proptype>
   <shortdesc>
    The colormap currently being used.
   </shortdesc>
   <desc>
    <simpara>
     Sets or returns the <classname>GdkColormap</classname> used by this style.
    </simpara>
   </desc>
  </prop>

  <prop id="gtk.gtkstyle.property.fg" type="rw">
   <propname>fg</propname>
   <proptype>Array</proptype>
   <shortdesc>
    Foreground colors.
   </shortdesc>
   <desc>
    <simpara>
     Returns an array of 5 foreground <classname>GdkColor</classname>s used for the 
     <link linkend="gtk.enum.gtkstatetype">different states</link>
     a widget can reach. 
    </simpara>
    <programlisting role="php">
<![CDATA[
$newstyle = &new GtkStyle();
$cyan = &new GdkColor('#00FFFF');
$newstyle->fg[GTK_STATE_PRELIGHT] = $cyan;
]]>
    </programlisting>
   </desc>
  </prop>

  <prop id="gtk.gtkstyle.property.bg" type="rw">
   <propname>bg</propname>
   <proptype>Array</proptype>
   <shortdesc>
    Background colors.
   </shortdesc>
   <desc>
    <simpara>
     Returns an array of 5 background <classname>GdkColor</classname>s used for the 
     <link linkend="gtk.enum.gtkstatetype">different states</link>
     a widget can reach. 
    </simpara>
    <programlisting role="php">
<![CDATA[
$newstyle = &new GtkStyle();
$newstyle->bg[GTK_STATE_PRELIGHT] = $newstyle->white;
]]>
    </programlisting>
   </desc>
  </prop>

  <prop id="gtk.gtkstyle.property.light" type="rw">
   <propname>light</propname>
   <proptype>Array</proptype>
   <shortdesc>

   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </prop>

  <prop id="gtk.gtkstyle.property.dark" type="rw">
   <propname>dark</propname>
   <proptype>Array</proptype>
   <shortdesc>

   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </prop>

  <prop id="gtk.gtkstyle.property.mid" type="rw">
   <propname>mid</propname>
   <proptype>Array</proptype>
   <shortdesc>
    Midway between light and dark.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </prop>

  <prop id="gtk.gtkstyle.property.text" type="rw">
   <propname>text</propname>
   <proptype>Array</proptype>
   <shortdesc>
    Colors for a text widget.
   </shortdesc>
   <desc>
    <simpara>
     Returns an array of 5 text <classname>GdkColor</classname>s used for the 
     <link linkend="gtk.enum.gtkstatetype">different states</link>
     a widget can reach. 
    </simpara>
   </desc>
  </prop>

  <prop id="gtk.gtkstyle.property.base" type="rw">
   <propname>base</propname>
   <proptype>Array</proptype>
   <shortdesc>
    Text background.
   </shortdesc>
   <desc>
    <simpara>
     Returns an array of 5 text background <classname>GdkColor</classname>s used for the 
     <link linkend="gtk.enum.gtkstatetype">different states</link>
     a widget can reach. 
    </simpara>
   </desc>
  </prop>

  <prop id="gtk.gtkstyle.property.fg_gc" type="rw">
   <propname>fg_gc</propname>
   <proptype>Array</proptype>
   <shortdesc>
    Graphics information for the foreground colors.
   </shortdesc>
   <desc>
    <simpara>
     Returns an array of 5 foreground <classname>GdkGC</classname> objects,
     one for each <link linkend="gtk.enum.gtkstatetype">state</link> a
     widget can reach. 
    </simpara>
   </desc>
  </prop>

  <prop id="gtk.gtkstyle.property.bg_gc" type="rw">
   <propname>bg_gc</propname>
   <proptype>Array</proptype>
   <shortdesc>
    Graphics information for the background colors.
   </shortdesc>
   <desc>
    <simpara>
     Returns an array of 5 background <classname>GdkGC</classname> objects,
     one for each <link linkend="gtk.enum.gtkstatetype">state</link> a
     widget can reach. 
    </simpara>
   </desc>
  </prop>

  <prop id="gtk.gtkstyle.property.light_gc" type="rw">
   <propname>light_gc</propname>
   <proptype>Array</proptype>
   <shortdesc>

   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </prop>

  <prop id="gtk.gtkstyle.property.dark_gc" type="rw">
   <propname>dark_gc</propname>
   <proptype>Array</proptype>
   <shortdesc>

   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </prop>

  <prop id="gtk.gtkstyle.property.mid_gc" type="rw">
   <propname>mid_gc</propname>
   <proptype>Array</proptype>
   <shortdesc>

   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </prop>

  <prop id="gtk.gtkstyle.property.text_gc" type="rw">
   <propname>text_gc</propname>
   <proptype>Array</proptype>
   <shortdesc>
    Graphics information for the text foreground colors.
   </shortdesc>
   <desc>
    <simpara>
     Returns an array of 5 text foreground <classname>GdkGC</classname> objects,
     one for each <link linkend="gtk.enum.gtkstatetype">state</link> a
     widget can reach. 
    </simpara>
   </desc>
  </prop>

  <prop id="gtk.gtkstyle.property.base_gc" type="rw">
   <propname>base_gc</propname>
   <proptype>Array</proptype>
   <shortdesc>
    Graphics information for the text background colors.
   </shortdesc>
   <desc>
    <simpara>
     Returns an array of 5 text background <classname>GdkGC</classname> objects,
     one for each <link linkend="gtk.enum.gtkstatetype">state</link> a
     widget can reach. 
    </simpara>
   </desc>
  </prop>

  <prop id="gtk.gtkstyle.property.bg_pixmap" type="rw">
   <propname>bg_pixmap</propname>
   <proptype>Array</proptype>
   <shortdesc>
    Background pixmaps.
   </shortdesc>
   <desc>
    <simpara>
     Returns an array of 5 pixmaps, one for each 
     <link linkend="gtk.enum.gtkstatetype">state</link> a
     widget can reach. You can set it the following way:
    </simpara>
    <programlisting role="php">
<![CDATA[
$bookicon = array("16 16 6 1",
"       c None s None",".      c black","X      c red","o      c yellow","O      c #808080",
"#      c white","                ","       ..       ","     ..XX.      ","   ..XXXXX.     ",
" ..XXXXXXXX.    ",".ooXXXXXXXXX.   ","..ooXXXXXXXXX.  ",".X.ooXXXXXXXXX. ",".XX.ooXXXXXX..  ",
" .XX.ooXXX..#O  ","  .XX.oo..##OO. ","   .XX..##OO..  ","    .X.#OO..    ","     ..O..      ",
"      ..        ","                ");
$transparent = &new GdkColor(0, 0, 0);
list( $pixmap, $mask) = Gdk::pixmap_create_from_xpm_d($window->window, $transparent, $bookicon);

$style	= &new GtkStyle;
$style->bg_pixmap[GTK_STATE_NORMAL]	= $pixmap;
]]>
    </programlisting>
   </desc>
  </prop>

 </properties>

</classentry>
