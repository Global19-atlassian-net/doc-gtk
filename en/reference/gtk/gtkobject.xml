<classentry id="gtk.gtkobject">
 <classmeta>
  <classtitle>GtkObject</classtitle>
  <classparent></classparent>
  <shortdesc>The base class of the PHP-GTK class hierachy.</shortdesc>
  <desc>
   <para>
    <classname>GtkObject</classname> is the base class of the PHP-GTK object 
    hierachy. It implements the functionality that every object below it in 
    the tree has. This object should not be directly constructed from PHP-GTK
    but is documented here for reference reasons.
   </para>
  </desc>
 </classmeta>

 <methods>

  <method id="gtk.gtkobject.method.flags">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>flags</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Fetch the current objects flags.
   </shortdesc>
   <desc>
    <para>
     This method returns the objects flags and defined in the enum 
     <enumname>GtkObjectFlags</enumname>. The return value can be used 
     to find information about the objects current state.
    </para>
    <simpara>
     See also: <function>set_flags</function>, <function>unset_flags</function>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkobject.method.set_flags">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_flags</function></funcdef>
     <paramdef>int <parameter>flags</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets various flags on the object.
   </shortdesc>
   <desc>
    <simpara>
     This method allows you to set the flags defined in the 
     <enumname>GtkObjectFlags</enumname> enum. The flags can be
     set to reflect an objects current state.
    </simpara>
    <simpara>
     See also: <function>flags</function>, <function>unset_flags</function>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkobject.method.unset_flags">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>unset_flags</function></funcdef>
     <paramdef>int <parameter>flags</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Unset certain flags on the object.
   </shortdesc>
   <desc>
    <para>
     This method allows the programmer to unset various flags, as defined
     in the <enumname>GtkObjectFlags</enumname> enum. These flags can be 
     changed to reflect the objects current state.
    </para>
    <simpara>
     See also: <function>flags</function>, <function>set_flags</function>
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkobject.method.default_construct">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>default_construct</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    The default object constructor.
   </shortdesc>
   <desc>
    <simpara>
     This constructor is called when arguments have the 
     <optionname>GTK_ARG_CONSTRUCT</optionname> flag set within 
     <enumname>GtkArgFlags</enumname>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkobject.method.constructed">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>constructed</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Mark object as constructed.
   </shortdesc>
   <desc>
    <simpara>
     This method allows precise control over the construction
     process. It marks an object as being constructed, this
     stops any further constructors being called on the object.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkobject.method.sink">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>sink</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Decrease the initial reference count by 1.
   </shortdesc>
   <desc>
    <simpara>
     This method allows the programmer to decrease the objects 
     reference count by 1, this only occurs the first time the
     sink method is called.
    </simpara>
    <simpara>
     This might be used when an object that is floating is created.
     When the object is assigned a parent then it is 
     <function>sunk</function>, but, the parent now also has a reference
     to the object so its reference count is now <literal>1</literal>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkobject.method.ref">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>ref</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Increase the reference count on an object.
   </shortdesc>
   <desc>
    <simpara>
     Increase the reference count on an object.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkobject.method.unref">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>unref</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Decrease a reference count on an object.
   </shortdesc>
   <desc>
    <simpara>
     Decrease a reference count on an object.
    </simpara>
    <note>
     <simpara>
      If you decrease the refcount to <literal>0</literal>
      then the object will be destroyed.
     </simpara>
    </note>
   </desc>
  </method>

  <method id="gtk.gtkobject.method.destroy">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>destroy</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Call an objects shutdown handler.
   </shortdesc>
   <desc>
    <simpara>
     This method causes the objects shutdown handler to be called.
     The objects memory wont be freed though until the object's 
     reference count is <literal>0</literal>.
    </simpara>
    <simpara>
     See Also: <function>unref</function>
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkobject.method.get_arg">
   <funcsynopsis>
    <funcprototype>
     <funcdef>XXX <function>get_arg</function></funcdef>
     <paramdef>XXX</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkobject.method.set_arg">
   <funcsynopsis>
    <funcprototype>
     <funcdef>XXX <function>set_arg</function></funcdef>
     <paramdef>XXX</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkobject.method.set_data">
   <funcsynopsis>
    <funcprototype>
     <funcdef>XXX <function>set_data</function></funcdef>
     <paramdef>XXX</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>
  
  <method id="gtk.gtkobject.method.remove_data">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>remove_data</function></funcdef>
     <paramdef>string <parameter>key</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Removes data from the objects data associations.
   </shortdesc>
   <desc>
   </desc>
  </method>

  <method id="gtk.gtkobject.method.get_data">
   <funcsynopsis>
    <funcprototype>
     <funcdef>XXX <function>get_data</function></funcdef>
     <paramdef>XXX</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>
  

  <method id="gtk.gtkobject.method.remove_no_notify">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>remove_no_notify</function></funcdef>
     <paramdef>string <parameter>key</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Remove data without invoking the associations destroy handler.
   </shortdesc>
   <desc>
   </desc>
  </method>

  <method id="gtk.gtkobject.method.emit_stop">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>emit_stop</function></funcdef>
     <paramdef>int <parameter>signal_id</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
   </shortdesc>
   <desc>
   </desc>
  </method>

  <method id="gtk.gtkobject.method.emit_stop_by_name">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>emit_stop_by_name</function></funcdef>
     <paramdef>string <parameter>name</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
   </shortdesc>
   <desc>
   </desc>
  </method>

  <method id="gtk.gtkobject.method.connect">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>connect</function></funcdef>
     <paramdef>string <parameter>signal</parameter></paramdef>
     <paramdef>string <parameter>function</parameter></paramdef>
     <paramdef>void 
      <optional><parameter>custom</parameter></optional>
     </paramdef>     
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Connects a signal and a callback.
   </shortdesc>
   <desc>
    <simpara>
     Connects a function to a signal so it is called when the signal is emitted
     by a widget.
    </simpara>
    <simpara>
     The function takes two or three arguments. The first parameter,
     <parameter>signal</parameter> is the textual name of the signal, the
     second parameter, <parameter>function</parameter> is the name of the
     function that should be used as a callback. The third parameter,
     <parameter>custom</parameter> is optional and can be used to pass extra
     data to the callback. Please see the Userguide section of the manual for
     more information on this.
    </simpara>
    <simpara>
     See Also: <function class="GtkObject">connect_after</function>,
     <function class="GtkObject">connect_object</function>, 
     <function class="GtkObject">connect_object_after</function>
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkobject.method.connect_after">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>connect_after</function></funcdef>
     <paramdef>string <parameter>signal</parameter></paramdef>
     <paramdef>string <parameter>function</parameter></paramdef>
     <paramdef>void 
      <optional><parameter>custom</parameter></optional>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Connects a signal and a callback to be called after any others.
   </shortdesc>
   <desc>
    <simpara>
     Connects a function to a signal so it is called when the signal is emitted
     by a widget. The callback is guaranteed to be called after the normal and
     default handlers.
    </simpara>
    <simpara>
     The function takes two or three arguments. The first parameter,
     <parameter>signal</parameter> is the textual name of the signal, the
     second parameter, <parameter>function</parameter> is the name of the
     function that should be used as a callback. The third parameter,
     <parameter>custom</parameter> is optional and can be used to pass extra
     data to the callback. Please see the Userguide section of the manual for
     more information on this.
    </simpara>
    <simpara>
     See Also: <function class="GtkObject">connect</function>,
     <function class="GtkObject">connect_object</function>, 
     <function class="GtkObject">connect_object_after</function>
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkobject.method.connect_object">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>connect_object</function></funcdef>
     <paramdef>string <parameter>signal</parameter></paramdef>
     <paramdef>string <parameter>function</parameter></paramdef>
     <paramdef>Object <parameter>param</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Pass a different object to the callback.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkObject">connect_object</function> allows the passing
     of a different object to a callback than the one for emitting the signal
     in the first place.
    </simpara>
    <simpara>
     The <parameter>signal</parameter> parameter is the
     textual name of the signal we want to connect to, the
     <parameter>function</parameter> parameter is the textual name of the
     function we want to connect to the signal and the
     <parameter>param</parameter> parameter is the object we want to pass as
     the first parameter to the callback.
    </simpara>
    <simpara>
     The function returns the signal_id.
    </simpara>
    <simpara>
     See Also: <function class="GtkObject">connect</function>, 
     <function class="GtkObject">connect_after</function>,
     <function class="GtkObject">connect_object_after</function>
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkobject.method.connect_object_after">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>connect_object_after</function></funcdef>
     <paramdef>string <parameter>signal</parameter></paramdef>
     <paramdef>string <parameter>function</parameter></paramdef>
     <paramdef>Object <parameter>param</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Pass a different object to the callback, register the callback last.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkObject">connect_object_after</function> allows the 
     passing of a different object to a callback than the one for emitting
     the signal in the first place. By using the 
     <function class="GtkObject">connect_object_after</function> you can
     ensure that all normal handlers, and the default handler are called
     first.
    </simpara>
        <simpara>
     The <parameter>signal</parameter> parameter is the
     textual name of the signal we want to connect to, the
     <parameter>function</parameter> parameter is the textual name of the
     function we want to connect to the signal and the
     <parameter>param</parameter> parameter is the object we want to pass as
     the first parameter to the callback.
    </simpara>
    <simpara>
     The function returns the signal_id.
    </simpara>
    <simpara>
     See Also: <function class="GtkObject">connect</function>, 
     <function class="GtkObject">connect_after</function>,
     <function class="GtkObject">connect_object</function>
    </simpara>
   </desc>
  </method>
  
  <method id="gtk.gtkobject.method.disconnect">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>disconnect</function></funcdef>
     <paramdef>int <parameter>handler_id</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
   </shortdesc>
   <desc>
   </desc>
  </method>

  <method id="gtk.gtkobject.method.signal_handler_block">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>signal_handler_block</function></funcdef>
     <paramdef>int <parameter>handler_id</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
   </shortdesc>
   <desc>
   </desc>
  </method>

  <method id="gtk.gtkobject.method.signal_handler_unblock">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>signal_handler_unblock</function></funcdef>
     <paramdef>int <parameter>handler_id</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
   </shortdesc>
   <desc>
   </desc>
  </method>

  <method id="gtk.gtkobject.method.signal_handler_pending">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>signal_handler_pending</function></funcdef>
     <paramdef>int <parameter>signal_id</parameter></paramdef>
     <paramdef>bool <parameter>may_be_blocked</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
   </shortdesc>
   <desc>
   </desc>
  </method>

  <method id="gtk.gtkobject.method.signal_handler_pending_by_id">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>signal_handler_pending_by_id</function></funcdef>
     <paramdef>int <parameter>handler_id</parameter></paramdef>
     <paramdef>bool <parameter>may_be_blocked</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
   </shortdesc>
   <desc>
   </desc>
  </method>

  <method id="gtk.gtkobject.method.emit">
   <funcsynopsis>
    <funcprototype>
     <funcdef>XXX <function>emit</function></funcdef>
     <paramdef>XXX</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>
  
  <method id="gtk.gtkobject.method.signal_handlers_destroy">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>signal_handlers_destroy</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
   </shortdesc>
   <desc>
   </desc>
  </method>

 </methods>

</classentry>
<!--
 * Local variables:
 * tab-width: 1
 * c-basic-offset: 1
 * End:
 * vim600: et sw=1 ts=1 tw=78 fdm=marker
 * vim<600: et sw=1 ts=1 tw=78
-->
