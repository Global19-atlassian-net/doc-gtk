<classentry id="gtk.gtkdialog">
 <classmeta>
  <classtitle>GtkDialog</classtitle>
  <classparent>GtkWindow</classparent>
  <shortdesc>Widget that eases creation of popup dialogs.</shortdesc>
  <desc>
   <simpara>
    <classname>GtkDialog</classname> is used to create a popup window
    for presenting or requesting small amounts of information.  It is
    composed of two containers separated by a 
    <classname>GtkHSeparator</classname>.  The top container is a 
    <classname>GtkVBox</classname>, and would typically contain 
    <classname>GtkLabel</classname> and 
    <classname>GtkEntry</classname> widgets to present the user with
    information and allow input.  The bottom container is a 
    <classname>GtkHBox</classname> and would usually contain dialog
    buttons, e.g. <literal>OK</literal>, <literal>Cancel</literal>,
    <literal>Help</literal> and so on.
   </simpara>
   <simpara>
    Note that widgets should not be added to the 
    <classname>GtkDialog</classname> itself but to the containers, which
    can be accessed as <propname class="GtkDialog">vbox</propname> 
    and <propname class="GtkDialog">action_area</propname> respectively.
   </simpara>
   <simpara>
    Dialogs can be made modal (in effect freezing input to the rest of
    the application) by calling the <classname>GtkWindow</classname> 
    method <function class="GtkWindow">set_modal()</function> on the 
    <classname>GtkDialog</classname> object.
   </simpara>
   <simpara>
    <!--
    All of this can be moved to the set_modal() field in gtkwindow.xml
    when it comes together - please don't simply delete this para! - sf 
    -->
    Note that making a <classname>GtkDialog</classname> modal does not
    stop execution of the code that calls it. In the example below, the
    call to 'echo' will still get executed even though the main application
    may not respond to user input.  To stop execution of the code the 
    <classname>GtkDialog</classname> must contain a call to a nested
    gtk::<function>main()</function> function.  Execution will then
    continue when the corresponding gtk::<function>main_quit()</function>
    function is called.
   </simpara>
   <para>
    <example>
     <title>Using <function class="GtkWindow">set_modal()</function></title>
     <programlisting role="php">
$dialog = &amp;new GtkDialog(); 
$dialog-&gt;set_modal(TRUE); 
echo &quot;This message will still be printed \n&quot;;
     </programlisting>
    </example>
   </para>
  </desc>
 </classmeta>

 <constructor id="gtk.gtkdialog.constructor">
  <funcsynopsis>
   <funcprototype>
    <funcdef> <function>GtkDialog</function></funcdef>
    <paramdef>void<parameter></parameter></paramdef>
   </funcprototype>
  </funcsynopsis>
  <shortdesc>
   Creates the basis for a popup dialog window.
  </shortdesc>
  <desc>
   <para>
    Creates the basis for a dialog window.
    <example>
     <title>Creating a dialog window</title>
     <programlisting role="php">
$dialog = &amp;new GtkDialog();
$dialog-&gt;set_policy(true, false, false);
$dialog-&gt;set_position(GTK_WIN_POS_CENTER);
$dialog-&gt;connect_object(&quot;destroy&quot;, array(&quot;gtk&quot;, 
&quot;main_quit&quot;));

$dialog_vbox = $dialog-&gt;vbox; 
$dialog_action_area = $dialog-&gt;action_area; 

$user_info_label = &amp;new GtkLabel(&quot;Some Important Information&quot;);
$dialog_vbox-&gt;pack_start($user_info_label); 

$ok_button = &amp;new GtkButton(&quot;OK&quot;);
$dialog_action_area-&gt;pack_start($ok_button);

gtk::main();
     </programlisting>
    </example>
   </para>
  </desc>
 </constructor>

 <properties>

  <property id="gtk.gtkdialog.property.vbox" type="ro">
   <propname>vbox</propname>
   <proptype>GtkWidget</proptype>
   <shortdesc>
    Upper container.
   </shortdesc>
   <desc>
    <simpara>
     <propname class="GtkDialog">vbox</propname> is the 
     <classname>GtkVBox</classname> at the top of the 
     <classname>GtkDialog</classname> widget.  The programmer would
     typically add widgets such as <classname>GtkLabel</classname> and 
     <classname>GtkEntry</classname> here for the purpose of exchanging
     information with the end user.
    </simpara>
   </desc>
  </property>

  <property id="gtk.gtkdialog.property.action_area" type="ro">
   <propname>action_area</propname>
   <proptype>GtkWidget</proptype>
   <shortdesc>
    Lower container.
   </shortdesc>
   <desc>
    <simpara>
     <propname class="GtkDialog">action_area</propname> is the
     <classname>GtkHBox</classname> at the bottom of the 
     <classname>GtkDialog</classname> widget, below the 
     <classname>GtkHSeparator</classname>.  This is where the programmer
     would usually add one or two <classname>GtkButton</classname>s, 
     connecting these to functions that terminate the dialog and/or act
     upon the information gathered through it.
    </simpara>
   </desc>
  </property>

 </properties>

</classentry>
