<?xml version="1.0" encoding="ISO-8859-1" ?>
<classentry id="gtk.gtkdrawingarea">
 <classmeta>
  <classtitle>GtkDrawingArea</classtitle>
  <classparent>GtkWidget</classparent>
  <shortdesc>
   Widget for custom user interface elements.
  </shortdesc>
  <desc>
   <simpara>
    A <classname>GtkDrawingArea</classname> is a widget whose 
    <classname>GdkWindow</classname> can be drawn to.  You could use it to
    create a new user interface element, or an updateable graph, or pretty
    much anything, using the GDK and GTK draw and paint functions.
   </simpara>
   <simpara>
    Because it is in itself so featureless, everything has to be added to
    a <classname>GtkDrawingArea</classname>.  It will not respond to key or
    button press events, unless you give it the ability to do so using 
    <function class="GtkWidget">set_events</function> or 
    <function class="GtkWidget">add_events</function>.  It cannot have
    keyboard focus, unless you set the <literal>GTK_CAN_FOCUS</literal> 
    flag.   It does not regard what is drawn upon it as a clue to sizing, so
    you have to size it.  If you want it to react to resizing, you will need
    to connect it to an appropriate callback via the 
    <signalname class="GtkWidget">configure-event</signalname> signal in
    order to do so.  It has no defining behaviour, beyond the ability to
    manufacture configure events when it is allocated a new size.  It's
    basically a completely empty widget.
   </simpara>
   <note>
    <simpara>
     <emphasis>
      Redraws should be created through an 
      <signalname class="GtkWidget">expose-event</signalname> handler.
     </emphasis>
    </simpara>
   </note>
  </desc>
 </classmeta>

 <constructor id="gtk.gtkdrawingarea.constructor">
  <funcsynopsis>
   <funcprototype>
    <funcdef> <function>GtkDrawingArea</function></funcdef>
    <paramdef>void</paramdef>
   </funcprototype>
  </funcsynopsis>
  <shortdesc>
   Constructs a blank, drawable widget.
  </shortdesc>
  <desc>
   <para>
    <example>
     <title>Drawing to a <classname>GtkDrawingArea</classname></title>
     <programlisting role="php">
<![CDATA[
<?php

dl('php_gtk.'.(strstr(PHP_OS, 'WIN') ? 'dll' : 'so'));

function draw_it($drawingarea, $event, $style, $gdkwindow) {
  /* access the GdkWindow's colormap to associate a color with a GdkGC */
  $colormap = $gdkwindow-&gt;colormap;
  $yellow = $gdkwindow-&gt;new_gc();
  $yellow-&gt;foreground = $colormap-&gt;alloc('yellow');
  $red = $gdkwindow-&gt;new_gc();
  $red-&gt;foreground = $colormap-&gt;alloc('red');
  $red-&gt;line_width = 7;

  /* set up fonts.  The first font here is set as part of the drawingarea's
     style property so that it will be used in gtk::draw_string(). */
  $font = 
  gdk::font_load('-unknown-Arial-bold-r-normal--*-120-*-*-p-0-iso8859-1');
  $style-&gt;font = $font;
  $font2 = 
  gdk::font_load('-unknown-Arial-bold-r-normal--*-720-*-*-p-0-iso8859-1');

  /* call the appropriate drawing functions */
  gdk::draw_rectangle($gdkwindow, $style-&gt;white_gc, true, 0, 0, 200, 220);
  gdk::draw_rectangle($gdkwindow, $yellow, true, 50, 50, 100, 100);
  gdk::draw_string($gdkwindow, $font2, $style-&gt;white_gc, 75, 130, '?');
  gdk::draw_line($gdkwindow, $red, 20, 20, 180, 180);
  gdk::draw_line($gdkwindow, $red, 20, 180, 180, 20);
  gtk::draw_string($style, $gdkwindow, GTK_STATE_NORMAL, 12, 210, 
                   'SAY       TO SQUARE EGGS!');
  gdk::draw_string($gdkwindow, $font, $red, 42, 210, 'NO');
}

function press_it($drawingarea, $event, $style, $gdkwindow) {
  /* make the drawingarea look like it has been pressed down */
  $rectangle = &amp;new GdkRectangle(0, 0, 200, 220);
  gtk::paint_focus($style, $gdkwindow, $rectangle, $drawingarea, null, 0, 0, 
                    200, 220);
}

function redraw_it($drawingarea, $event) {
  /* trigger a new expose event */
  $drawingarea-&gt;queue_draw();
}

/* set up the main window that will hold the drawing area */
$window = &amp;new GtkWindow();
$window-&gt;set_position(GTK_WIN_POS_CENTER);
$window-&gt;connect_object('destroy', array('gtk', 'main_quit'));

/* set up the drawing area.  Sizing is taken from the parent, unless set. 
   We need to add events so that the drawingarea is sensitive to the mouse,
   using set_events() to do this because the widget is not realized yet. */
$drawingarea = &amp;new GtkDrawingArea();
$drawingarea-&gt;size(200, 220);
$drawingarea-&gt;set_events(GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK);
$window-&gt;add($drawingarea);

/* once the drawing area has been added to the window we can realize() it, 
   which means that we can now access its properties */
$drawingarea-&gt;realize();
$style = $drawingarea-&gt;style;
$gdkwindow = $drawingarea-&gt;window;

/* drawing should always follow an expose event */
$drawingarea-&gt;connect('expose-event', 'draw_it', $style, $gdkwindow);
$drawingarea-&gt;connect('button-press-event', 'press_it', $style, 
$gdkwindow);
$drawingarea-&gt;connect('button-release-event', 'redraw_it');

$window-&gt;show_all();
gtk::main();

?>
]]>
     </programlisting>
    </example>
   </para>
  </desc>
 </constructor>

 <methods>

  <method id="gtk.gtkdrawingarea.method.size">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>size</function></funcdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the size of the drawing area.
   </shortdesc>
   <desc>
    <simpara>
     A <classname>GtkDrawingArea</classname> has no default size set.  If
     none is given, it will default to the size allocated to it by its parent
     window.  Note that the size set using this method is treated as the
     drawingarea's size request, and may be overridden in some situations.
    </simpara>
   </desc>
  </method>

 </methods>

</classentry>
