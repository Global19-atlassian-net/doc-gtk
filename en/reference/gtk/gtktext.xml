<?xml version="1.0" encoding="ISO-8859-1" ?>
<classentry id="gtk.gtktext">
 <classmeta>
  <classtitle>GtkText</classtitle>
  <classparent>GtkEditable</classparent>
  <shortdesc>
   Editable text-display widget.
  </shortdesc>
  <desc>
   <simpara>
    <classname>GtkText</classname> provides a scrolling widget with a white
    background which can have text strings passed to it programmatically or
    directly from the keyboard (if it is set to be editable).  There are a
    number of keybindings for the editing features; these are listed under 
    <classname>GtkEditable</classname>, as they are generally shared by the
    <classname>GtkEntry</classname> widget.
   </simpara>
   <simpara>
    <classname>GtkText</classname> is one of two widgets marked as 
    <literal>BROKEN</literal> throughout the 1.3 series of GTK+ releases,
    and is being replaced entirely by a new set of text and editing widgets
    in GTK 2.0.  If you can avoid using it, do so.  If you can't, be aware
    that it has issues which are never going to be fixed.
   </simpara>
   <simpara>
    One of these issues is that the horizontal 
    <classname>GtkAdjustment</classname> does not work in the 
    <classname>GtkText</classname> widget, and that trying to declare it as
    anything other than <literal>NULL</literal> causes the application to
    stall.  There is no problem with the vertical adjustment, and a vertical
    scrollbar associated with the text widget will work just fine.
   </simpara>
   <simpara>
    Another feature is that it cannot cope with very frequent text updates
    for long, that being when you're most likely to generate a string that
    is too big for its XWindow to handle.  You may find it better to use a 
    <classname>GtkCList</classname> if you are using it to display
    the output for any form of network monitoring, for example.
   </simpara>
   <simpara>
    There is also a problem with the linewrap when the 
    <classname>GtkText</classname> widget is utilised under Windows, causing
    it to display 'little black boxes' at every soft wrap.  You can get
    around this by using PHP's <literal>wordwrap()</literal> function to
    create a line-end within the GTK line-end, but bear in mind that PHP
    uses a given number of characters to determine the length of the line, 
    whereas GTK uses pixels to configure the relationship between the font
    size, the line-end, and the container's border.
   </simpara>
   <simpara>
    See also:  <classname>GtkEditable</classname>, 
    <classname>GdkFont</classname>, 
    <classname>GtkFontSelectionDialog</classname>.
   </simpara>
   <simpara>
    A final note: the signal <literal>set_scroll_adjustments</literal> has
    not been covered here as it is purely used internally to allow the text
    widget to communicate with scrolling-aware container widgets.
   </simpara>
  </desc>
 </classmeta>

 <constructor id="gtk.gtktext.constructor">
  <funcsynopsis>
   <funcprototype>
    <funcdef> <function>GtkText</function></funcdef>
    <paramdef>
     <classname>GtkAdjustment</classname> 
     <parameter><optional>hadj = NULL</optional></parameter>
    </paramdef>
    <paramdef>
     <classname>GtkAdjustment</classname> 
     <parameter><optional>vadj = NULL</optional></parameter>
    </paramdef>
   </funcprototype>
  </funcsynopsis>
  <shortdesc>
   Creates a scrollable text widget.
  </shortdesc>
  <desc>
   <simpara>
    Creates a text widget that is by default scrollable up and down
    using the bound keys given below, when there is enough text present. 
    The horizontal adjustment, and therefore the horizontal scrolling, do
    not work; the horizontal adjustment parameter in the constructor should
    always be declared as <literal>null</literal> (the default setting) for
    that reason.
   </simpara>
   <para>
    <table>
     <title>Key bindings for scrolling <classname>GtkText</classname></title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Key combination</entry>
        <entry>Scroll function</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>Control + Home</entry>
        <entry>Move to the top of the text</entry>
       </row>
       <row>
        <entry>Control + End</entry>
        <entry>Move to the end of the text</entry>
       </row>
       <row>
        <entry>Page Up</entry>
        <entry>Move up one page increment</entry>
       </row>
       <row>
        <entry>Page Down</entry>
        <entry>Move down one page increment</entry>
       </row>
       <row>
        <entry>Up arrow</entry>
        <entry>Move up one line</entry>
       </row>
       <row>
        <entry>Down arrow</entry>
        <entry>Move down one line</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    <example>
     <title>
      Adding a scrollbar to a <classname>GtkText</classname> widget
     </title>
     <programlisting role="php">
<![CDATA[
<?php

dl('php_gtk.'.(strstr(PHP_OS, 'WIN') ? 'dll' : 'so'));

$window = &amp;new GtkWindow();
$window-&gt;set_position(GTK_WIN_POS_CENTER);
$window-&gt;connect_object('destroy', array('gtk', 'main_quit'));

$box = &amp;new GtkHBox();
$window-&gt;add($box);

$text = &amp;new GtkText();
$text-&gt;set_word_wrap(true);
$string = &quot;This is a string of text which will be displayed in the 
GtkText widget.\n\nIt isn't long enough to allow scrolling, so you will 
probably need to extend it.\n\nOn the other hand, the box isn't sized, so 
it may just creep over that limit and be a useful demonstration after 
all.&quot;;
if(strstr(PHP_OS, 'WIN')) $string = wordwrap($string, 26);
$text-&gt;insert_text($string, 0);
$box-&gt;pack_start($text);

$adj = $text-&gt;vadj;
$scrollbar = &amp;new GtkVScrollbar($adj);
$box-&gt;pack_end($scrollbar, false);

$window-&gt;show_all();

gtk::main();

?>
]]>
     </programlisting>
    </example>
   </para>
  </desc>
 </constructor>

 <methods>

  <method id="gtk.gtktext.method.set_editable">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_editable</function></funcdef>
     <paramdef>bool <parameter>editable</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Toggles whether text widget is editable.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkText">set_editable</function>, when set to
     <literal>true</literal>, allows the user to write to or manipulate
     existing text displayed in the widget.
    </simpara>
    <simpara>
     The default setting is <literal>false</literal>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktext.method.set_word_wrap">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_word_wrap</function></funcdef>
     <paramdef>bool <parameter>word_wrap</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Toggles whether words at the end of a line can be broken.
   </shortdesc>
   <desc>
    <simpara>
     This method, when set to <literal>true</literal>, ensures that words
     that would otherwise be broken when reaching a line end are kept
     in one piece and moved to the beginning of the next line.
    </simpara>
    <note>
     <simpara>
      If you are using the PHP <literal>wordwrap()</literal> function, you
      will need to use it in tandem with the GTK 
      <function class="GtkText">set_word_wrap</function> method.
     </simpara>
    </note>
    <simpara>
     The default setting is <literal>false</literal>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktext.method.set_line_wrap">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_line_wrap</function></funcdef>
     <paramdef>bool <parameter>line_wrap</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Toggles whether text should be wrapped at the widget boundary.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkText">set_line_wrap</function>, when set to
     <literal>true</literal> ensures that the text is sensitive to the
     boundaries of the <classname>GtkText</classname> widget and will wrap
     within them.
    </simpara>
    <simpara>
     The default setting is <literal>true</literal>.
    </simpara>
    <simpara>
     See also:  <function class="GtkText">set_word_wrap</function>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktext.method.set_adjustments">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_adjustments</function></funcdef>
     <paramdef>
      <classname>GtkAdjustment</classname> 
      <parameter>hadj</parameter>
     </paramdef>
     <paramdef>
      <classname>GtkAdjustment</classname> 
      <parameter>vadj</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Specifies the <classname>GtkAdjustment</classname>s to be used.
   </shortdesc>
   <desc>
    <simpara>
     In most cases, <function class="GtkText">set_adjustments</function> is
     a redundant method, as it is already used internally by scrolling-aware
     containers to create appropriate adjustment settings for the size of
     the text widget.  This pre-setting by a container cannot be overridden.
    </simpara>
    <simpara>
     Where you need to use this method, the first parameter must always be 
     <literal>null</literal> due to the malfunctioning 
     <propname>hadj</propname> property in a <classname>GtkText</classname> 
     widget.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktext.method.set_point">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_point</function></funcdef>
     <paramdef>int <parameter>index</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets insertion point.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkText">set_point</function> sets the point in
     the string index where any extraneous text should be inserted.  This
     means that the initial string has to exist in the first place.
    </simpara>
    <simpara>
     If the text widget has focus at the time when this method is called, 
     the insertion point will be reflected in the position of the cursor.
    </simpara>
    <simpara>
     Note that an insertion point beyond the length of the existing string
     (that is, the entire existing <classname>GtkText</classname> content) 
     cannot be set in this way.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktext.method.get_point">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_point</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the current insertion point.
   </shortdesc>
   <desc>
    <simpara>
     This method returns the current insertion point, which is the position
     taken by the cursor.  By default, that will be the position following
     the final character in the string that makes up the entire existing 
     <classname>GtkText</classname> content. 
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktext.method.get_length">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_length</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns length of string.
   </shortdesc>
   <desc>
    <simpara>
     This method returns the length of the string making up the current
     text widget contents, measured in characters.
    </simpara>
    <simpara>
     If you need to measure separate elements of the text contents, use
     the PHP function <literal>strlen()</literal> instead.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktext.method.freeze">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>freeze</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Freezes display.
   </shortdesc>
   <desc>
    <simpara>
     Call the <function class="GtkText">freeze</function> method prior
     to any text update.  This prevents the display from flickering during
     the time it takes for the update to be made, as the full update is
     only drawn once rather than for every new character.
    </simpara>
    <simpara>
     See also:  <function class="GtkText">thaw</function>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktext.method.thaw">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>thaw</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Thaws display.
   </shortdesc>
   <desc>
    <simpara>
     The <function class="GtkText">thaw</function> method is the 
     corollary to the <function class="GtkText">freeze</function> method,
     and should be used in conjunction with it.  Call this method following
     an update to redraw the display.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktext.method.insert">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>insert</function></funcdef>
     <paramdef>
      <classname>GdkFont</classname> 
      <parameter>font</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkColor</classname> 
      <parameter>fore</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkColor</classname> 
      <parameter>back</parameter>
     </paramdef>
     <paramdef>string <parameter>chars</parameter></paramdef>
     <paramdef>int 
      <parameter><optional>length = -1</optional></parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Inserts a string of text.
   </shortdesc>
   <desc>
    <simpara>
     This is a complex method offering more control over the appearance of
     the text in a <classname>GtkText</classname> widget than the alternative
     <function class="GtkEditable">insert_text</function> inherited from
     <classname>GtkEditable</classname>.  It also has the bonus that it allows
     some support for internationalization on all platforms, although
     multibyte conversion under win32 is not currently included in this.
    </simpara>
    <simpara>
     Any of the first three parameters can be passed as 
     <literal>null</literal>, making it possible to define only one aspect
     of the text's appearance, or many.
    </simpara>
    <simpara>
     The first parameter <parameter>font</parameter> is a 
     <classname>GdkFont</classname>.  If you are intending to change fonts,
     you will need to call the static function 
     <function>gdk::font_load</function> beforehand in order to define
     your chosen font.
    </simpara>
    <simpara>
     The next two parameters use <classname>GdkColor</classname> objects to
     describe the foreground and background colors of the text; again, you
     will need to define these in order to use them.  The first of these is
     the color of the text itself, the second is the color of the 'page' 
     behind it.  Note that setting the <parameter>back</parameter> will only
     change the color for the area that is taken up by the string itself, 
     and not for the entire widget or to the widget's border when the end of
     the text is reached.
    </simpara>
    <simpara>
     The final two parameters are <parameter>chars</parameter>, the string of
     text to insert; and the optional <parameter>length</parameter>, which
     can be used to limit the extent of the string where it is being input
     by a user.  The default length <literal>-1</literal> will allow the
     entire string.
    </simpara>
    <para>
     You can use the current default style with:
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php

$text-&gt;insert(null, null, null, &quot;A string of text.&quot;);

?>
]]>
      </programlisting>
     </informalexample>
    </para>
   </desc>
  </method>

  <method id="gtk.gtktext.method.backward_delete">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>backward_delete</function></funcdef>
     <paramdef>int <parameter>nchars</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Deletes characters prior to insertion point.
   </shortdesc>
   <desc>
    <simpara>
     Deletes the number of characters stipulated, back from the current
     insertion point.
    </simpara>
    <simpara>
     Note that these are literal numbers, and that shortcuts such as
     <literal>0</literal> and <literal>-1</literal> cannot be used here.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtktext.method.forward_delete">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>forward_delete</function></funcdef>
     <paramdef>int <parameter>nchars</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Deletes characters ahead of insertion point.
   </shortdesc>
   <desc>
    <simpara>
     Deletes the number of characters stipulated, forward from the current
     insertion point.
    </simpara>
    <simpara>
     Note that these are literal numbers, and that shortcuts such as
     <literal>0</literal> and <literal>-1</literal> cannot be used here.
    </simpara>
   </desc>
  </method>

 </methods>

 <properties>

  <prop id="gtk.gtktext.property.hadj" type="ro">
   <propname>hadj</propname>
   <proptype><classname>GtkAdjustment</classname></proptype>
   <shortdesc>
    Horizontal adjustment.  *broken*
   </shortdesc>
   <desc>
    <simpara>
     The <propname class="GtkText">hadj</propname> property is a 
     <classname>GtkAdjustment</classname> that simply does not work
     in the <classname>GtkText</classname> widget.  It should always
     be declared as <literal>null</literal> at the creation stage, and
     will always have adjustment settings of <literal>0</literal> 
     throughout for that reason.
    </simpara>
   </desc>
  </prop>

  <prop id="gtk.gtktext.property.vadj" type="ro">
   <propname>vadj</propname>
   <proptype><classname>GtkAdjustment</classname></proptype>
   <shortdesc>
    Vertical adjustment.
   </shortdesc>
   <desc>
    <simpara>
     The <propname class="GtkText">vadj</propname> property is a 
     <classname>GtkAdjustment</classname> widget.  Use this property
     to interrogate the adjustment settings that have been pre-set by
     the <classname>GtkText</classname> widget's parent container.
    </simpara>
    <simpara>
     It can also be used to set the adjustment value for an associated 
     <classname>GtkScrollbar</classname>.
    </simpara>
   </desc>
  </prop>

 </properties>

</classentry>
