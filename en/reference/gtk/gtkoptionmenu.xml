<?xml version="1.0" encoding="ISO-8859-1" ?>
<classentry id="gtk.gtkoptionmenu">
 <classmeta>
  <classtitle>GtkOptionMenu</classtitle>
  <classparent>GtkButton</classparent>
  <shortdesc>
   Widget used to choose from a list of valid choices.
  </shortdesc>
  <desc>
   <simpara>
    A <classname>GtkOptionMenu</classname> consists of a button containing
    a label, with an indicator tab to the right.
   </simpara>
   <simpara>
    The <classname>GtkMenu</classname> currently associated with the option
    menu pops up in a similar area to that which would be taken up by a
    dropdown menu.  This is, however, a popup menu; if you need a true
    dropdown widget, look at <classname>GtkCombo</classname>.
   </simpara>
  </desc>
 </classmeta>

 <constructor id="gtk.gtkoptionmenu.constructor">
  <funcsynopsis>
   <funcprototype>
    <funcdef> <function>GtkOptionMenu</function></funcdef>
    <paramdef>void</paramdef>
   </funcprototype>
  </funcsynopsis>
  <shortdesc>
   Creates a popup menu linked to a button.
  </shortdesc>
  <desc>
   <simpara>
    Constructing a <classname>GtkOptionMenu</classname> is less complicated
    that creating most other forms of menu.
   </simpara>
   <para>
    <example>
     <title>Creating a simple <classname>GtkOptionMenu</classname>.</title>
      <programlisting role="php">
dl('php_gtk.' . (strstr(PHP_OS, 'WIN') ? 'dll' : 'so'));
    
function echo_activated($item, $label, $rank, $x) {
    echo &quot;\$items[$x] ('$label') is the $rank 
&quot;.$item-&gt;get_name().&quot;.\n&quot;;
    flush();
}
    
$window = &amp;new GtkWindow();
$window-&gt;set_position(GTK_WIN_POS_CENTER);
$window-&gt;connect_object('destroy', array('gtk', 'main_quit'));
    
$menu = &amp;new GtkMenu();
$labels = array('File', 'Edit', 'Save', 'Exit');
$pos = array('first', 'second', 'third', 'fourth');
for($i = 0; $i &lt; 4; $i++) {
$items[$i] = &amp;new GtkMenuItem($labels[$i]);
$items[$i]-&gt;connect('activate', 'echo_activated', $labels[$i], $pos[$i], 
$i);
$menu-&gt;append($items[$i]);
}
$menu-&gt;show_all();
    
$optionmenu = &amp;new GtkOptionMenu();
$optionmenu-&gt;set_menu($menu);
$window-&gt;add($optionmenu);
    
$window-&gt;show_all();
gtk::main();
      </programlisting>
     </example>
    </para>
  </desc>
 </constructor>

 <methods>

  <method id="gtk.gtkoptionmenu.method.get_menu">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkWidget</classname> <function>get_menu</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Retrieves current menu.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkOptionMenu">get_menu()</function> returns the
     instance of the <classname>GtkMenu</classname> that is currently
     associated with the calling <classname>GtkOptionMenu</classname>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkoptionmenu.method.set_menu">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_menu</function></funcdef>
     <paramdef>
      <classname>GtkWidget</classname> <parameter>menu</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets associated menu.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkOptionMenu">set_menu()</function> sets the 
     <classname>GtkMenu</classname> specified in the parameter to be
     associated with the calling <classname>GtkOptionMenu</classname>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkoptionmenu.method.remove_menu">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>remove_menu</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Removes existing menu.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkOptionMenu">remove_menu()</function> removes the
     <classname>GtkMenu</classname> currently associated with the 
     <classname>GtkOptionMenu</classname>.
    </simpara>
    <simpara>
     In order to avoid an error message the next time that the user clicks
     on the <classname>GtkOptionMenu</classname> after menu removal, it is
     necessary to either replace it with a new 
     <classname>GtkMenu</classname>  or to call 
     <literal>set_sensitive(false)</literal> from the 
     <classname>GtkOptionMenu</classname>.  Either call will avert an error
     message regards the menu not existing.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkoptionmenu.method.set_history">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_history</function></funcdef>
     <paramdef>int <parameter>index</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets button text to that of designated <classname>GtkMenuItem</classname>.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkOptionMenu">set_history()</function> is used
     internally in GTK to display the text of the 
     <classname>GtkMenuItem</classname> most recently activated by the user.
    </simpara>
    <simpara>
     This method can also be used by the PHP-GTK programmer to override this
     default behaviour or, alternatively, to designate an initial setting
     using the <parameter>index</parameter> position.
    </simpara>
   </desc>
  </method>

 </methods>

</classentry>
