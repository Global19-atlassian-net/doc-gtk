<?xml version="1.0" encoding="ISO-8859-1" ?>
<classentry id="gtk.gtkeditable">
 <classmeta>
  <classtitle>GtkEditable</classtitle>
  <classparent>GtkWidget</classparent>
  <shortdesc>
   Base class for text-editing widgets.
  </shortdesc>
  <desc>
   <simpara>
    <classname>GtkEditable</classname> is an abstract base class providing
    <classname>GtkEntry</classname> and <classname>GtkText</classname> with
    several methods, signals and properties, and also a set of keybindings
    that can be used for editing.
   </simpara>
   <para>
    <table>
     <title>Key bindings for editing</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Key combination</entry>
        <entry>Editing function</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>Control + a</entry>
        <entry>Move to the beginning of the line</entry>
       </row>
       <row>
        <entry>Control + b</entry>
        <entry>Move back one character</entry>
       </row>
       <row>
        <entry>Control + c</entry>
        <entry>Copy currently selected text</entry>
       </row>
       <row>
        <entry>Control + d</entry>
        <entry>Delete forward character</entry>
       </row>
       <row>
        <entry>Control + e</entry>
        <entry>Move to the end of the line</entry>
       </row>
       <row>
        <entry>Control + f</entry>
        <entry>Move forward one character</entry>
       </row>
       <row>
        <entry>Control + h</entry>
        <entry>Delete backward character</entry>
       </row>
       <row>
        <entry>Control + k</entry>
        <entry>Delete to line end</entry>
       </row>
       <row>
        <entry>Control + n</entry>
        <entry>Move to the next line (GtkText only)</entry>
       </row>
       <row>
        <entry>Control + p</entry>
        <entry>Move to the previous line (GtkText only)</entry>
       </row>
       <row>
        <entry>Control + u</entry>
        <entry>Delete current line</entry>
       </row>
       <row>
        <entry>Control + v</entry>
        <entry>Paste clipboard text</entry>
       </row>
       <row>
        <entry>Control + w</entry>
        <entry>Delete backward word</entry>
       </row>
       <row>
        <entry>Control + x</entry>
        <entry>Cut currently selected text</entry>
       </row>
       <row>
        <entry>Alt + b</entry>
        <entry>Move back one word</entry>
       </row>
       <row>
        <entry>Alt + d</entry>
        <entry>Delete forward word</entry>
       </row>
       <row>
        <entry>Alt + f</entry>
        <entry>Move forward one word</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <simpara>
    There are also a host of signals that are used internally to enable
    these editing functions to work.  These signals have not been documented
    here.
   </simpara>
  </desc>
 </classmeta>

 <methods>

  <method id="gtk.gtkeditable.method.select_region">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>select_region</function></funcdef>
     <paramdef>int <parameter>start</parameter></paramdef>
     <paramdef>int <parameter>end</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Selects designated area of text.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkEditable">select_region</function> selects
     an area of text programmatically.  The <parameter>start</parameter> 
     and <parameter>end</parameter> parameters can be 
     <literal>0, -1</literal> if the full text string is required.
    </simpara>
    <simpara>
     Note that the editable widget needs to be realized prior to this method
     being called on it.  See 
     <function class="GtkEditable">claim_selection</function>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkeditable.method.insert_text">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>insert_text</function></funcdef>
     <paramdef>string <parameter>text_string</parameter></paramdef>
     <paramdef>int <parameter>position</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Inserts a string of text.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkEditable">insert_text</function> is the simplest
     way of putting text into an editable widget. 
     <classname>GtkText</classname> has an alternative method, 
     <function class="GtkText">insert</function>, which gives greater
     control over the appearance of the text, amongst other things.
    </simpara>
    <note>
     <simpara>
      This method does not support internationalization under win32.  Use
      <function class="GtkText">insert</function>.
     </simpara>
    </note>
    <simpara>
     The <function class="GtkEditable">insert_text</function> method also
     causes the signal of the same name to be emitted.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkeditable.method.delete_text">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>delete_text</function></funcdef>
     <paramdef>int <parameter>start_pos</parameter></paramdef>
     <paramdef>int <parameter>end_pos</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Deletes designated area of text.
   </shortdesc>
   <desc>
    <simpara>
     Deletes the designated area of text.
    </simpara>
    <simpara>
     As with all editing functions, <literal>0</literal> denotes the beginning
     of the string, and <literal>-1</literal> the end position.
    </simpara>
    <simpara>
     <function class="GtkEditable">delete_text</function> also causes
     the signal of the same name to be emitted.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkeditable.method.get_chars">
   <funcsynopsis>
    <funcprototype>
     <funcdef>string <function>get_chars</function></funcdef>
     <paramdef>int <parameter>start_pos</parameter></paramdef>
     <paramdef>int <parameter>end_pos</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns designated string.
   </shortdesc>
   <desc>
    <simpara>
     This method is used to return the specified contents of a string. 
     To return the complete string, pass <literal>0, -1</literal> as the
     parameters.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkeditable.method.cut_clipboard">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>cut_clipboard</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Copies and deletes selected string.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkEditable">cut_clipboard</function> copies the
     current selection to the clipboard.  It then deletes the original text
     using the position parameters of the selection.
    </simpara>
    <simpara>
     It also causes the 
     <signalname class="GtkEditable">cut-clipboard</signalname> signal to
     be emitted.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkeditable.method.copy_clipboard">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>copy_clipboard</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Copies selected string.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkEditable">copy_clipboard</function> copies the
     current selection to the clipboard.
    </simpara>
    <simpara>
     It also causes the 
     <signalname class="GtkEditable">copy-clipboard</signalname> signal to
     be emitted.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkeditable.method.paste_clipboard">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>paste_clipboard</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Pastes current clipboard contents.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkEditable">paste_clipboard</function> pastes the
     current clipboard contents at the cursor position.
    </simpara>
    <simpara>
     It also causes the 
     <signalname class="GtkEditable">paste-clipboard</signalname> signal to
     be emitted.
    </simpara>
   </desc>
  </method>

  <!-- DELETED? - another one that's probably internal only but not marked. 
  See what you think.  - sf feb 02 -->
  <method id="gtk.gtkeditable.method.claim_selection">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>claim_selection</function></funcdef>
     <paramdef>bool <parameter>claim</parameter></paramdef>
     <paramdef>int <parameter>time</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Provides selection data.
   </shortdesc>
   <desc>
    <simpara>
     This method is used internally as a way to provide 
     <function class="GtkEditable">select_region</function> with all the
     data it needs in order to work, including the underlying 
     <classname>GdkWindow</classname> that the 
     <classname>GtkSelectionData</classname> requires.  It's not very useful
     elsewhere.
    </simpara>
   </desc>
  </method>

  <!-- DELETED? - and this one, too - sf feb 02 -->
  <method id="gtk.gtkeditable.method.delete_selection">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>delete_selection</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Deletes selected text and accompanying selection data.
   </shortdesc>
   <desc>
    <simpara>
     This method deletes the information held in the clipboard as
     well as the text to which it relates.  It is used internally to
     differentiate between a full text delete and the deletion used
     in <function class="GtkEditable">cut_clipboard</function>.
    </simpara>
    <simpara>
     Generally, use <function class="GtkEditable">delete_text</function> 
     instead.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkeditable.method.changed">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>changed</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Causes <signalname class="GtkEditable">changed</signalname> signal to
    be emitted.
   </shortdesc>
   <desc>
    <simpara>
     This method causes the <classname>GtkEditable</classname> widget to
     emit the <signalname class="GtkEditable">changed</signalname> signal.
    </simpara>
    <simpara>
     It is called internally every time there is a change made to the text
     string.
   </simpara>
   </desc>
  </method>

  <method id="gtk.gtkeditable.method.set_position">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_position</function></funcdef>
     <paramdef>int <parameter>position</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the cursor position.
   </shortdesc>
   <desc>
    <simpara>
     Sets the cursor position within the string of existing text.  Note that
     the calling editable widget must have keyboard focus in order for the
     cursor position to be valid.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkeditable.method.get_position">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_position</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the current cursor position.
   </shortdesc>
   <desc>
    <simpara>
     This method returns the current cursor position.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkeditable.method.set_editable">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_editable</function></funcdef>
     <paramdef>bool <parameter>is_editable</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Toggles whether the text is editable.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkEditable">set_editable</function>, when set to
     <literal>true</literal>, sets the widget to be editable by the user.
    </simpara>
    <simpara>
     The default setting is <literal>false</literal>.
    </simpara>
   </desc>
  </method>

 </methods>

 <signals>

  <signal id="gtk.gtkeditable.signal.changed">
   <signalname>changed</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef><classname>GtkEditable</classname> widget</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emitted when there is a change to the text string.
   </shortdesc>
   <desc>
    <simpara>
     Effectively, the only difference between this and the 
     <signalname class="GtkWidget">key-press-event</signalname> signal is
     that the key press event is not passed to the callback function.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkeditable.signal.insert-text">
   <signalname>insert-text</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef><classname>GtkEditable</classname> widget</paramdef>
     <paramdef>string text_string</paramdef>
     <paramdef>int string_length</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emitted when <function class="GtkEditable">insert_text</function> is
    called.
   </shortdesc>
   <desc>
    <simpara>
     This signal is emitted when the 
     <function class="GtkEditable">insert_text</function> method is called, 
     which happens internally every time the text is added to by the end
     user, at every key press.
    </simpara>
    <simpara>
     The <parameter>string_length</parameter> that is passed is the length
     of the string that is being inserted, and not the length of the string
     that makes up the content of the text widget.
    </simpara>
    <simpara>
     Note that there is a fourth parameter here that the signal cannot carry
     in PHP-GTK because it is a GTK_TYPE_POINTER, which is an unsupported
     type.  Depending on the E-NOTICES settings in your 
     <filename>php.ini</filename> file, you may get an error message when you
     connect this signal.  This does not affect the signal's functionality.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkeditable.signal.delete-text">
   <signalname>delete-text</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef><classname>GtkEditable</classname> widget</paramdef>
     <paramdef>int start_pos</paramdef>
     <paramdef>int end_pos</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emitted when text is deleted.
   </shortdesc>
   <desc>
    <simpara>
     This signal is emitted when the 
    <function class="GtkEditable">delete_text</function> method is called, 
    which happens internally when the user presses the delete button and text
    is currently selected.
    </simpara>
    <simpara>
     The data that is passed with this signal consists of the calling class
     and the start and end positions of the selection.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkeditable.signal.activate">
   <signalname>activate</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef><classname>GtkEditable</classname> widget</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emitted when designated key is pressed.
   </shortdesc>
   <desc>
    <simpara>
     The <signalname class="GtkEditable">activate</signalname> signal is
     usually fired when the user presses <literal>Return</literal>.  However,
     note that in <classname>GtkText</classname> both the 
     <literal>Return</literal> key and the arrow keys need to be combined
     with the <literal>Control</literal> key in order to have their usual
     effect.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkeditable.signal.set-editable">
   <signalname>set-editable</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef><classname>GtkEditable</classname> widget</paramdef>
     <paramdef>bool is_editable</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emitted when the <function class="GtkEditable">set_editable</function> 
    method is called.
   </shortdesc>
   <desc>
    <simpara>
     This signal is emitted when the 
     <function class="GtkEditable">set_editable</function> is called.  It
     carries a boolean value which determines in which direction the switch
     has been made.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkeditable.signal.cut-clipboard">
   <signalname>cut-clipboard</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef><classname>GtkEditable</classname> widget</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emitted when <function class="GtkEditable">cut_clipboard</function> 
    is called.
   </shortdesc>
   <desc>
    <simpara>
     This signal is emitted when the 
     <function class="GtkEditable">cut_clipboard</function> method is
     called.  This happens internally when the user presses the 
     <literal>Control</literal> and <literal>x</literal> keys silmultaneously.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkeditable.signal.copy-clipboard">
   <signalname>copy-clipboard</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef><classname>GtkEditable</classname> widget</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emitted when <function class="GtkEditable">copy_clipboard</function> 
    is called.
   </shortdesc>
   <desc>
    <simpara>
     This signal is emitted when the 
     <function class="GtkEditable">copy_clipboard</function> method is
     called.  This happens internally when the user presses the 
     <literal>Control</literal> and <literal>c</literal> keys silmultaneously.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkeditable.signal.paste-clipboard">
   <signalname>paste-clipboard</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef><classname>GtkEditable</classname> widget</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emitted when <function class="GtkEditable">paste_clipboard</function> 
    is called.
   </shortdesc>
   <desc>
    <simpara>
     This signal is emitted when the 
     <function class="GtkEditable">paste_clipboard</function> method is
     called.  This happens internally when the user presses the 
     <literal>Control</literal> and <literal>v</literal> keys silmultaneously.
    </simpara>
   </desc>
  </signal>

 </signals>


 <properties>

  <prop id="gtk.gtkeditable.property.selection_start_pos" type="ro">
   <propname>selection_start_pos</propname>
   <proptype>int</proptype>
   <shortdesc>
    Selection start position.
   </shortdesc>
   <desc>
    <simpara>
     The position in the text index that the current selection starts
     from, if there is one.
    </simpara>
   </desc>
  </prop>

  <prop id="gtk.gtkeditable.property.selection_end_pos" type="ro">
   <propname>selection_end_pos</propname>
   <proptype>int</proptype>
   <shortdesc>
    Selection end position.
   </shortdesc>
   <desc>
    <simpara>
     The position in the text index that the current selection ends
     at, if there is one.
    </simpara>
   </desc>
  </prop>

  <prop id="gtk.gtkeditable.property.has_selection" type="ro">
   <propname>has_selection</propname>
   <proptype>bool</proptype>
   <shortdesc>
    Indicates whether there is currently a selection.
   </shortdesc>
   <desc>
    <simpara>
    Indicates whether there is currently a selection.
    </simpara>
   </desc>
  </prop>

 </properties>

</classentry>
