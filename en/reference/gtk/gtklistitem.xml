<?xml version="1.0" encoding="ISO-8859-1" ?>
<classentry id="gtk.gtklistitem">
 <classmeta>
  <classtitle>GtkListItem</classtitle>
  <classparent>GtkItem</classparent>
  <shortdesc>
   A single element in a <classname>GtkList</classname>.
  </shortdesc>
  <desc>
   <simpara>
    A <classname>GtkListItem</classname> is one of the elements that makes up
    a <classname>GtkList</classname>.  It can consist of many things - see
    the constructor page - being basically a container with a specialised
    set of methods and signals.
   </simpara>
   <simpara>
    <classname>GtkListItem</classname>s are not equipped to carry data,
    unless you make it so.  Using the <classname>GtkObject</classname> 
    methods <function class="GtkObject">get_data</function>, 
    <function class="GtkObject">remove_data</function> and 
    <function class="GtkObject">set_data</function> is the usual way to
    achieve this.  See <classname>GtkCombo</classname> for a working example.
   </simpara>
   <simpara>
    The <classname>GtkListItem</classname> class supplies a multitude of
    signals to the list widget recursively, where they are treated as private
    signals and used internally.  Several of these signals have keybindings,
    implemented here rather than in <classname>GtkList</classname> of
    necessity, which are described below.
   </simpara>
   <para>
    <table>
     <title>Key bindings used in <classname>GtkList</classname></title>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>Key combination</entry>
        <entry>Effect</entry>
        <entry>Equivalent GtkList method</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>Up arrow</entry>
        <entry>Scrolls up one step</entry>
        <entry>scroll_vertical(GTK_SCROLL_STEP_BACKWARD, 0.0)</entry>
       </row>
       <row>
        <entry>Down arrow</entry>
        <entry>Scrolls down one step</entry>
        <entry>scroll_vertical(GTK_SCROLL_STEP_FORWARD, 0.0)</entry>
       </row>
       <row>
        <entry>Page Up</entry>
        <entry>Scrolls up one page</entry>
        <entry>scroll_vertical(GTK_SCROLL_PAGE_BACKWARD, 0.0)</entry>
       </row>
       <row>
        <entry>Page Down</entry>
        <entry>Scrolls down one page</entry>
        <entry>scroll_vertical(GTK_SCROLL_PAGE_FORWARD, 0.0)</entry>
       </row>
       <row>
        <entry>Control + Home</entry>
        <entry>Scrolls to the top of the list</entry>
        <entry>scroll_vertical(GTK_SCROLL_JUMP, 0.0)</entry>
       </row>
       <row>
        <entry>Control + End</entry>
        <entry>Scrolls to the end of the list</entry>
        <entry>scroll_vertical(GTK_SCROLL_JUMP, 1.0)</entry>
       </row>
       <row>
        <entry>Shift + Up arrow</entry>
        <entry>Selects up one step</entry>
        <entry>extend_selection(GTK_SCROLL_STEP_BACKWARD, 0.0, true)</entry>
       </row>
       <row>
        <entry>Shift + Down arrow</entry>
        <entry>Selects down one step</entry>
        <entry>extend_selection(GTK_SCROLL_STEP_FORWARD, 0.0, true)</entry>
       </row>
       <row>
        <entry>Shift + Page Up</entry>
        <entry>Selects up one page</entry>
        <entry>extend_selection(GTK_SCROLL_PAGE_BACKWARD, 0.0, true)</entry>
       </row>
       <row>
        <entry>Shift + Page Down</entry>
        <entry>Selects down one page</entry>
        <entry>extend_selection(GTK_SCROLL_PAGE_FORWARD, 0.0, true)</entry>
       </row>
       <row>
        <entry>Shift | Control + Home</entry>
        <entry>Selects to the top of the list</entry>
        <entry>extend_selection(GTK_SCROLL_JUMP, 0.0, true)</entry>
       </row>
       <row>
        <entry>Shift | Control + End</entry>
        <entry>Selects to the end of the list</entry>
        <entry>extend_selection(GTK_SCROLL_JUMP, 1.0)</entry>
       </row>
       <row>
        <entry>Left arrow</entry>
        <entry>Scrolls one step to the left</entry>
        <entry>scroll_horizontal(GTK_SCROLL_STEP_BACKWARD, 0.0)</entry>
       </row>
       <row>
        <entry>Right arrow</entry>
        <entry>Scrolls one step to the right</entry>
        <entry>scroll_horizontal(GTK_SCROLL_STEP_FORWARD, 0.0)</entry>
       </row>
       <row>
        <entry>Home</entry>
        <entry>Scrolls to the left of the list</entry>
        <entry>scroll_horizontal(GTK_SCROLL_JUMP, 0.0)</entry>
       </row>
       <row>
        <entry>End</entry>
        <entry>Scrolls to the right of the list</entry>
        <entry>scroll_horizontal(GTK_SCROLL_JUMP, 1.0)</entry>
       </row>
       <row>
        <entry>Escape</entry>
        <entry>Returns to previous selection</entry>
        <entry>undo_selection()</entry>
       </row>
       <row>
        <entry>Space</entry>
        <entry>Toggles state of row with current focus</entry>
        <entry>toggle_focus_row()</entry>
       </row>
       <row>
        <entry>Control + Space</entry>
        <entry>Toggles whether further items can be selected</entry>
        <entry>toggle_add_mode()</entry>
       </row>
       <row>
        <entry>Control + /</entry>
        <entry>Selects all items</entry>
        <entry>select_all()</entry>
       </row>
       <row>
        <entry>Control + \\</entry>
        <entry>Deselects all items</entry>
        <entry>unselect_all()</entry>
       </row>
       <row>
        <entry>Shift_L + Release | Shift</entry>
        <entry>Completes selection</entry>
        <entry>end_selection()</entry>
       </row>
       <row>
        <entry>Shift_R + Release | Shift</entry>
        <entry>Completes selection</entry>
        <entry>end_selection()</entry>
       </row>
       <row>
        <entry>Shift_R + Release | Shift | Control</entry>
        <entry>Completes selection</entry>
        <entry>end_selection()</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <note>
    <simpara>
     GtkListItem has been deprecated since GTK+ 2.0 and should
     not be used in newly written code.
    </simpara>
   </note>
  </desc>
 </classmeta>

 <constructor id="gtk.gtklistitem.constructor">
  <funcsynopsis>
   <funcprototype>
    <funcdef> <function>GtkListItem</function></funcdef>
    <paramdef>string 
     <parameter><optional>label</optional></parameter>
    </paramdef>
   </funcprototype>
  </funcsynopsis>
  <shortdesc>
   Creates a list element.
  </shortdesc>
  <desc>
   <para>
    A <classname>GtkListItem</classname> is a container widget, derived
    indirectly from <classname>GtkBin</classname> and so only able to hold
    one direct child.  Most of the time, the child you will want the list
    item to contain will be a <classname>GtkLabel</classname> - and so, in
    common with all objects that have an alternative 
    <literal>'-with-label'</literal> constructor available in GTK, we have
    the option in PHP-GTK to pass the label's text as a parameter during
    construction, e.g.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

$listitem = &new GtkListItem("This list item now has a label");

?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    If you wanted something other than a label in the list item, you simply
    omit the parameter and add the required widget:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

$arrow = &new GtkArrow(GTK_ARROW_RIGHT, GTK_SHADOW_ETCHED_IN);
$listitem = &new GtkListItem();
$listitem->add($arrow);

?>
]]>
     </programlisting>
    </informalexample>
    or, if you wanted perhaps a label plus some other item:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

$box = &new GtkHBox();
$label = &new GtkLabel("Here we have multiple objects in a 
GtkListItem");
$arrow = &new GtkArrow(GTK_ARROW_RIGHT, GTK_SHADOW_ETCHED_IN);

$box->pack_start($label);
$box->pack_end($arrow);
$box->show_all();

$listitem = &new GtkListItem();
$listitem->add($box);

?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Whatever your list item consists of, the <classname>GtkList</classname> 
    will only respond to it as a <classname>GtkListItem</classname>.  If you
    have different kinds of list item contents in the same list, you will
    need to exercise a great deal of caution if you are connecting callbacks
    to any form of select signal.
   </simpara>
   <simpara>
    See also:  <classname>GtkList</classname>, which has a working example
    under the constructor.
   </simpara>
  </desc>
 </constructor>

 <methods>

  <method id="gtk.gtklistitem.method.select">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>select</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Causes the <signalname class="GtkItem">select</signalname> signal to be
    emitted.
   </shortdesc>
   <desc>
    <simpara>
     The <classname>GtkListItem</classname> method 
     <function class="GtkListItem">select</function> causes the list item
     to emit the <classname>GtkItem</classname> signal 
     <signalname class="GtkItem">select</signalname>.  This is then bound
     recursively to the <classname>GtkListItem</classname> implementation of
     that signal.
    </simpara>
    <simpara>
     The same sequence of events is produced by calling the 
     <classname>GtkList</classname> method 
     <function class="GtkList">select_child</function>.
    </simpara>
    <simpara>
     The easy part:  it sets the <enumname>GtkStateType</enumname> of the
     calling list item to <literal>GTK_STATE_SELECTED</literal>.
    </simpara>
    <simpara>
     Note that this state can also be achieved programmatically by calling 
     <function class="GtkItem">toggle</function> from a list item that
     is currently unselected.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtklistitem.method.deselect">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>deselect</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Causes the <signalname class="GtkItem">deselect</signalname> signal to
    be emitted.
   </shortdesc>
   <desc>
    <simpara>
     The <classname>GtkListItem</classname> method 
     <function class="GtkListItem">deselect</function> causes the list item
     to emit the <classname>GtkItem</classname> signal 
     <signalname class="GtkItem">deselect</signalname>.  This is then bound
     recursively to the <classname>GtkListItem</classname> implementation of
     that signal.
    </simpara>
    <simpara>
     The same sequence of events is produced by calling the 
     <classname>GtkList</classname> method 
     <function class="GtkList">unselect_child</function>.
    </simpara>
    <simpara>
     The easy part:  it sets the <enumname>GtkStateType</enumname> of the
     calling list item to <literal>GTK_STATE_NORMAL</literal>.
    </simpara>
    <simpara>
     Note that this state can also be achieved programmatically by calling 
     <function class="GtkItem">toggle</function> from a list item that
     is currently selected.
    </simpara>
   </desc>
  </method>

 </methods>

</classentry>
