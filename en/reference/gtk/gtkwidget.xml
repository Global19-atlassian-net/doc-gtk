<?xml version="1.0" encoding="ISO-8859-1" ?>
<classentry id="gtk.gtkwidget">
 <classmeta>
  <classtitle>GtkWidget</classtitle>
  <classparent>GtkObject</classparent>
  <shortdesc>
   Base class for user interface elements.
  </shortdesc>
  <desc>
   <simpara>
    <classname>GtkWidget</classname> is an abstract base class providing
    its descendants with properties, methods and signals pertinent to
    displayable user interface elements.  The only objects that do not
    inherit <classname>GtkWidget</classname> characteristics are 
    <classname>GtkTooltips</classname>, <classname>GtkAdjustment</classname> 
    and <classname>GtkItemFactory</classname> - all of which are relatively
    abstract concepts.  Everything else that is a member of the object
    hierarchy is a descendant of the <classname>GtkWidget</classname> 
    class, takes up screen space, and may be referred to as a 
    <literal>widget</literal>.
   </simpara>
   <simpara>
    Note that <classname>GtkWidget</classname> cannot be constructed
    directly.
   </simpara>
  </desc>
 </classmeta>

 <methods>

  <method id="gtk.gtkwidget.method.drag_highlight">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>drag_highlight</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.drag_unhighlight">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>drag_unhighlight</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.drag_dest_unset">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>drag_dest_unset</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.drag_source_unset">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>drag_source_unset</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.drag_source_set_icon">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>drag_source_set_icon</function></funcdef>
     <paramdef>
      <classname>GdkColormap</classname> 
      <parameter>colormap</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkPixmap</classname> 
      <parameter>pixmap</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkBitmap</classname> 
      <parameter>mask</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.selection_owner_set">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>selection_owner_set</function></funcdef>
     <paramdef>GdkAtom <parameter>selection</parameter></paramdef>
     <paramdef>int <parameter>time</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.selection_add_target">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>selection_add_target</function></funcdef>
     <paramdef>GdkAtom <parameter>selection</parameter></paramdef>
     <paramdef>GdkAtom <parameter>target</parameter></paramdef>
     <paramdef>int <parameter>info</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.selection_convert">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>selection_convert</function></funcdef>
     <paramdef>GdkAtom <parameter>selection</parameter></paramdef>
     <paramdef>GdkAtom <parameter>target</parameter></paramdef>
     <paramdef>int <parameter>time</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.selection_remove_all">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>selection_remove_all</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.unparent">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>unparent</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Disassociates widget from current parent.
   </shortdesc>
   <desc>
    <simpara>
     This method takes away the association between the calling widget
     and its current <classname>GdkWindow</classname> parent, allowing
     a new parent to be set for the widget.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.show">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>show</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Displays the calling widget.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkWidget">show()</function> is a commonly-used method
     that combines a series of other methods in order to display a widget on
     the screen.
    </simpara>
    <simpara>
     See also:  <function class="GtkWidget">map()</function>, 
     <function class="GtkWidget">realize()</function>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.show_now">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>show_now</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.hide">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>hide</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Hides the calling widget.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkWidget">hide()</function> is the corollary to the
     <function class="GtkWidget">show()</function> method.  It combines
     other methods in order to hide the calling widget from display.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.show_all">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>show_all</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Displays calling widget and its children.
   </shortdesc>
   <desc>
    <simpara>
     This method is used to display the calling widget and its children. 
     The extent to which it 'sees' children is system-dependant; some
     systems will not display children belonging to a child widget when
     <function class="GtkWidget">show_all()</function> is called from a
     top-level container.  You may find that you still need to 
     <function class="GtkWidget">show()</function> the children individually
     in order to display them, and it is good practice to do so
     consistently.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.hide_all">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>hide_all</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Hides calling widget and its children.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkWidget">hide_all()</function> is the corollary to
     <function class="GtkWidget">show_all()</function>, and the same
     reservations regards the levels of children that will respond to this
     call, apply.  If in doubt, <function class="GtkWidget">hide()</function> 
     the child widgets individually.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.map">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>map</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Maps calling widget to the screen.
   </shortdesc>
   <desc>
    <simpara>
     This method maps a widget to the screen area it will take.  It is
     mostly used internally, being one of the methods that is called as
     part of the <function class="GtkWidget">show()</function> routine. 
     It causes the <signalname class="GtkWidget">map</signalname> signal to
     be emitted by the widget, which in turn switches a flag causing the
     widget to be mapped.
    </simpara>
    <simpara>
     At the point of a widget's becoming mapped, the 
     <classname>GdkEvent</classname> <literal>GDK_MAP</literal> is
     triggered, causing the 
     <signalname class="GtkWidget">map-event</signalname> signal to also
     be emitted by that widget.  Use this signal to trigger functions
     that rely on the map event having occurred.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.unmap">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>unmap</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Unmaps calling widget from the screen.
   </shortdesc>
   <desc>
    <simpara>
     This method destroys information regards the dimensions of the screen
     area where the widget is displayed .  It is mostly used internally, 
     being one of the methods that is called as part of the 
     <function class="GtkWidget">hide()</function> routine.  It causes
     the <signalname class="GtkWidget">unmap</signalname> signal to be
     emitted by the widget, which in turn switches a flag causing the
     widget to be unmapped.
    </simpara>
    <simpara>
     At the point of a widget's becoming unmapped, the 
     <classname>GdkEvent</classname> <literal>GDK_UNMAP</literal> is
     triggered, causing the 
     <signalname class="GtkWidget">unmap-event</signalname> signal to
     also be emitted by that widget.  Use this signal to trigger functions
     that rely on the unmap event having occurred.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.realize">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>realize</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Instantiates calling widget's <classname>GdkWindow</classname>.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.unrealize">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>unrealize</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Removes calling widget's <classname>GdkWindow</classname>.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.queue_draw">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>queue_draw</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Queues widget's redraw requests.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.queue_draw_area">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>queue_draw_area</function></funcdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.queue_clear">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>queue_clear</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.queue_clear_area">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>queue_clear_area</function></funcdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.queue_resize">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>queue_resize</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Queues widget's resize requests.
   </shortdesc>
   <desc>
    <simpara>
     Use this method to force a widget to resize.  See 
     <classname>GtkScale</classname> for a working example.
    </simpara>
    <simpara>
     <function class="GtkWidget">queue_resize()</function> is used
     extensively within GTK+ internals.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.draw">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>draw</function></funcdef>
     <paramdef>GdkRectangle <parameter>area</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.draw_focus">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>draw_focus</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.draw_default">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>draw_default</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.add_accelerator">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>add_accelerator</function></funcdef>
     <paramdef>string <parameter>accel_signal</parameter></paramdef>
     <paramdef>
      <classname>GtkAccelGroup</classname> 
      <parameter>accel_group</parameter>
     </paramdef>
     <paramdef>int <parameter>accel_key</parameter></paramdef>
     <paramdef>GdkModifierType <parameter>accel_mods</parameter></paramdef>
     <paramdef>
      <enumname>GtkAccelFlags</enumname> 
      <parameter>accel_flags</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Adds accelerator key to a widget.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkWidget">add_accelerator()</function> defines and
     adds a keyboard accelerator to the calling widget, usually a 
     <classname>GtkMenuItem</classname>.
    </simpara>
    <simpara>
     The first parameter is the name of the signal that you want the widget
     to emit when the key is pressed.  Generally this will probably be
     <signalname class="GtkMenuItem">activate</signalname>.
    </simpara>
    <simpara>
     The second parameter is the <classname>GtkAccelGroup</classname> that
     this <literal>GtkAccelEntry</literal> will belong to when it has been
     created.  This will generally be an accelerator group that has been
     newly created and added to the toplevel window.
    </simpara>
    <simpara>
     Thirdly there is the <parameter>accel_key</parameter> parameter.  This
     can be pulled from the <classname>GtkAccelLabel</classname> using the 
     <function class="GtkLabel">parse_uline()</function> method if you have
     an underscore under the appropriate letter, or alternatively you could
     use the key symbols which have been hard-coded into PHP-GTK.  Usually
     these would be in the format <literal>GDK_KEY__a</literal> - always in
     lower case, because the accelerator functions return lower case key
     values.
    </simpara>
    <note>
     <simpara>
      The full list of PHP-GTK key symbol hard codings is available in
      the source code in the file <literal>ext/gtk+/php_gdk.c</literal>.
     </simpara>
    </note>
    <simpara>
     The fourth and fifth parameters are 
     <enumname>GdkModifierType</enumname> and 
     <enumname>GtkAccelFlags</enumname> respectively.  In both cases, 
     passing <literal>0</literal> is accepted as a null field.
    </simpara>
    <simpara>
     There is no limit on the number of accelerator keys that can be
     associated with a widget.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.remove_accelerator">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>remove_accelerator</function></funcdef>
     <paramdef>
      <classname>GtkAccelGroup</classname> 
      <parameter>accel_group</parameter>
     </paramdef>
     <paramdef>int <parameter>accel_key</parameter></paramdef>
     <paramdef>GdkModifierType <parameter>accel_mods</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Removes a single accelerator.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkWidget">remove_accelerator()</function> is a
     way to remove a single accelerator, defined by its key value and
     <enumname>GtkModifierType</enumname>.
    </simpara>
    <simpara>
     Note that the accelerator needs to be unlocked before this method
     will work.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.remove_accelerators">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>remove_accelerators</function></funcdef>
     <paramdef>string <parameter>accel_signal</parameter></paramdef>
     <paramdef>bool <parameter>visible_only</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Removes all accelerators meeting certain criteria.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkWidget">remove_accelerators()</function> is a way
     to remove any number of accelerators belonging to the calling widget
     and causing the given signal to be fired.  The second parameter toggles
     whether this should include all such accelerators, or only those
     displayed on the <classname>GtkAccelLabel</classname>.
    </simpara>
    <simpara>
     Note that the accelerators on the widget need to be unlocked before
     this method will work.
    </simpara>
   </desc>
  </method>

  <!-- DELETED gtk.gtkwidget.method.accelerator_signal - we really don't
  need this method.  We don't have any functions exposed where the accelerator
  signal id is needed, and if we did we shouldn't - they're all internal. 
  - sf jan 02 -->

  <!-- DELETED ref(), unref(), destroy() - already covered in GtkObject. 
  - sf jan 02 -->
  <!-- DELETED reset_shapes() - internal function (marked) - sf 20/12/01 -->

  <method id="gtk.gtkwidget.method.lock_accelerators">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>lock_accelerators</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Locks accelerator key definitions.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkWidget">lock_accelerators()</function> locks
     any accelerators defined on the calling widget - usually a 
     <classname>GtkMenuItem</classname> - so that no further keys can
     be entered or existing keys removed or altered.
    </simpara>
    <simpara>
     Note that if you do not lock your accelerators the end user will
     be able to define their own, whether any exist on that widget or not.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.unlock_accelerators">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>unlock_accelerators</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Unlocks accelerators to allow alterations.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkWidget">unlock_accelerators()</function> unlocks
     the accelerator entries defined in the calling widget, allowing
     changes or additions to be made to them.
    </simpara>
    <simpara>
     See also: <function class="GtkWidget">accelerators_locked()</function>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.accelerators_locked">
   <funcsynopsis>
    <funcprototype>
     <funcdef>bool <function>accelerators_locked</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Tests accelerator lock status.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkWidget">accelerators_locked()</function> returns 
     <literal>true</literal> if the accelerators on the calling widget are
     locked, and <literal>false</literal> if they are not.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.event">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>event</function></funcdef>
     <paramdef>
      <classname>GdkEvent</classname> 
      <parameter>event</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.activate">
   <funcsynopsis>
    <funcprototype>
     <funcdef>bool <function>activate</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <!-- DELETED set_scroll_adjustments() - this is an internal method for
  handling an internal signal, and is also used as a basis for the widget-
  appropriate set_adjustments() (or similar) in clist, layout, text and 
  viewport - which are the only widgets that use it.  sf jan 02 -->

  <method id="gtk.gtkwidget.method.reparent">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>reparent</function></funcdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>new_parent</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.popup">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>popup</function></funcdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.intersect">
   <funcsynopsis>
    <funcprototype>
     <funcdef>XXX <function>intersect</function></funcdef>
     <paramdef>XXX</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.grab_focus">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>grab_focus</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Gives grab and focus to the calling widget.
   </shortdesc>
   <desc>
    <simpara>
     This method sets the initial grab and focus on the calling widget so
     that, for example, if a <classname>GtkText</classname> were to call it,
     any keyboard events would be picked up immediately by the text widget.
    </simpara>
    <simpara>
     <function class="GtkWidget">grab_focus()</function> can only be called
     when the widget in question has the <literal>GTK_CAN_FOCUS</literal> 
     flag set.  Some will have this set at source, others will not, and will
     generate an error message to that effect when the method is called. 
     Use <function class="GtkObject">set_flags()</function> to override the
     source settings.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.grab_default">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>grab_default</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Gives grab and default to the calling widget.
   </shortdesc>
   <desc>
    <simpara>
     This method sets the keyboard grab and default status on the calling
     widget.
    </simpara>
    <simpara>
     The single most likely scenario where you might use this would be to
     set up a <classname>GtkButton</classname> so that the user could
     activate it by immediately pressing the return key.
    </simpara>
    <simpara>
     In order to make this possible, you will need to set the 
     <literal>GTK_CAN_DEFAULT</literal> widget flag on the button.  See
     also:  <function class="GtkObject">set_flags()</function>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_name">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_name</function></funcdef>
     <paramdef>string <parameter>name</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets widget name.
   </shortdesc>
   <desc>
    <simpara>
     You may give a widget a unique name.  This is mainly intended for
     use when creating a derived object, but it can also be useful for
     identifying individual widgets, for example, when an array of
     buttons is going to be queried at a later point in the script.
    </simpara>
    <simpara>
     See also:  <function class="GtkWidget">get_name()</function>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.get_name">
   <funcsynopsis>
    <funcprototype>
     <funcdef>string <function>get_name</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns name of widget.
   </shortdesc>
   <desc>
    <simpara>
     This method returns the name of the calling widget.  If no name
     has been set for the widget, this will be in the format 
     <literal>GtkWidget</literal>.
    </simpara>
    <simpara>
     <function class="GtkWidget">get_name()</function> is very useful
     where the widget could be one of many, e.g. in a callback that is
     used by several different widgets.
    </simpara>
    <simpara>
     See also:  <function class="GtkObject">get_type()</function>, 
     <function class="GtkWidget">set_name()</function>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_state">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_state</function></funcdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets widget's state.
   </shortdesc>
   <desc>
    <simpara>
     Sets the initial <enumname>GtkStateType</enumname> for the calling
     widget.  Note that this will be overridden when the user interacts
     with the widget, and is primarily useful for offering visual cues.
    </simpara>
    <simpara>
     A widget's current state can be queried using the 
     <propname class="GtkWidget">state</propname> property.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_sensitive">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_sensitive</function></funcdef>
     <paramdef>bool <parameter>sensitive</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Toggles sensitivity.
   </shortdesc>
   <desc>
    <simpara>
     Use this function to toggle whether or not the user can interact
     with a widget.  Setting it to <literal>false</literal> sets the
     widget's state to <literal>GTK_STATE_INSENSITIVE</literal>, which
     'greys out' the widget.
    </simpara>
    <simpara>
     You might use this if, for instance, you wanted to prevent a button
     from being pressed in certain situations.
    </simpara>
    <note>
     <simpara>
      Setting a container as 'insensitive' will make all that container's
      children insensitive too.
     </simpara>
    </note>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_app_paintable">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_app_paintable</function></funcdef>
     <paramdef>bool <parameter>app_paintable</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_parent">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_parent</function></funcdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>parent</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_parent_window">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_parent_window</function></funcdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>parent_window</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.get_parent_window">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkWindow</classname> 
      <function>get_parent_window</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_uposition">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_uposition</function></funcdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets widget's position relative to its container.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkWidget">set_uposition()</function> sets the
     position of a child widget in pixels relative to the top left corner
     of its container or, if the widget is a toplevel window, relative to
     the top left corner of the screen.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_usize">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_usize</function></funcdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets widget's size in pixels.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkWidget">set_usize()</function> sets a widget's
     size in pixels.  Sizing methods should only be called at one level of
     the packing hierarchy; you may need to size either the container
     or its children, but doing both will create conflicts in the size
     requests made by child widgets internally, which in turn can lead
     to unexpected results.
    </simpara>
    <simpara>
     See also:  <classname>GtkAlignment</classname>, and the packing methods
     supplied by <classname>GtkBox</classname>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_events">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_events</function></funcdef>
     <paramdef>int <parameter>events</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Extends capturable events prior to realization.
   </shortdesc>
   <desc>
    <simpara>
     This method is used to set the <enumname>GdkEventMask</enumname> 
     flags on a widget, extending the type of event that the widget
     can capture from its default capabilities.  You may need to do this,
     for instance, to capture a key press event on a widget that does not
     normally capture such events.
    </simpara>
    <simpara>
     <function class="GtkWidget">set_events()</function> can be used
     at any point in the widget's life-cycle.
    </simpara>
    <para>
     Staying with the key-press example, the syntax would be:
     <informalexample>
      <programlisting role="php">
$widget-&gt;set_events(GDK_KEY_PRESS_MASK | GDK_KEY_RELEASE_MASK);
      </programlisting>
     </informalexample>
     This would enable a previously keyboard-insensitive widget to emit 
     <signalname class="GtkWidget">key-press-event</signalname> and 
     <signalname class="GtkWidget">key-release-event</signalname> signals.
    </para>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.add_events">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>add_events</function></funcdef>
     <paramdef>int <parameter>events</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Extends capturable events after realization.
   </shortdesc>
   <desc>
    <simpara>
     This method is used to set the <enumname>GdkEventMask</enumname> 
     flags on a widget, extending the type of event that the widget
     can capture from its default capabilities.  You may need to do this,
     for instance, to capture a button press event on a widget that does
     not normally capture such events.
    </simpara>
    <simpara>
     <function class="GtkWidget">add_events()</function> can only be used
     after a widget has had <function class="GtkWidget">realize()</function> 
     called on it.  Note that realization is a part of the 
     <function class="GtkWidget">show()</function> routine as well as being
     a method/signal pair in its own right.
    </simpara>
    <para>
     Staying with the button-press example, the syntax would be:
     <informalexample>
      <programlisting role="php">
$widget-&gt;add_events(GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK);
      </programlisting>
     </informalexample>
     This would enable a previously mouse-insensitive widget to emit 
     <signalname class="GtkWidget">button-press-event</signalname> and 
     <signalname class="GtkWidget">button-release-event</signalname> signals.
    </para>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.get_toplevel">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkWidget</classname> 
      <function>get_toplevel</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.get_ancestor">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkWidget</classname> 
      <function>get_ancestor</function>
     </funcdef>
     <paramdef>int <parameter>widget_type</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.get_colormap">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkColormap</classname> 
      <function>get_colormap</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.get_visual">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkVisual</classname> 
      <function>get_visual</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_colormap">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_colormap</function></funcdef>
     <paramdef>
      <classname>GdkColormap</classname> 
      <parameter>colormap</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_visual">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_visual</function></funcdef>
     <paramdef>
      <classname>GdkVisual</classname> 
      <parameter>visual</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.get_events">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_events</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.is_ancestor">
   <funcsynopsis>
    <funcprototype>
     <funcdef>bool <function>is_ancestor</function></funcdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>ancestor</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Tests relationship with other widgets.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkWidget">is_ancestor()</function> tests whether the
      widget named in the <parameter>ancestor</parameter> parameter is an
      ancestor of the calling widget, in the packing hierarchy rather than
      in the GTK object hierarchy.
    </simpara>
    <simpara>
     This method is used extensively in GTK+ internals, but can also be
     useful in PHP-GTK, particularly for debugging purposes.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.hide_on_delete">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>hide_on_delete</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_style</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_rc_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_rc_style</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.ensure_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>ensure_style</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.get_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkStyle</classname> 
      <function>get_style</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.restore_default_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>restore_default_style</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_composite_name">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_composite_name</function></funcdef>
     <paramdef>string <parameter>name</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.get_composite_name">
   <funcsynopsis>
    <funcprototype>
     <funcdef>string <function>get_composite_name</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.reset_rc_styles">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>reset_rc_styles</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.shape_combine_mask">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>shape_combine_mask</function></funcdef>
     <paramdef>
      <classname>GdkBitmap</classname> 
      <parameter>shape_mask</parameter>
     </paramdef>
     <paramdef>int <parameter>offset_x</parameter></paramdef>
     <paramdef>int <parameter>offset_y</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

 </methods>

 <signals>

  <signal id="gtk.gtkwidget.signal.show">
   <signalname>show</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.hide">
   <signalname>hide</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.map">
   <signalname>map</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.unmap">
   <signalname>unmap</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.realize">
   <signalname>realize</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.unrealize">
   <signalname>unrealize</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.draw">
   <signalname>draw</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[DRAW] =
    gtk_signal_new ("draw",
		    GTK_RUN_FIRST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, draw),
		    gtk_marshal_NONE__POINTER,
		    GTK_TYPE_NONE, 1,
		    GTK_TYPE_POINTER); -->

  <signal id="gtk.gtkwidget.signal.draw-focus">
   <signalname>draw-focus</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.draw-default">
   <signalname>draw-default</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.size-request">
   <signalname>size-request</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[SIZE_REQUEST] =
    gtk_signal_new ("size_request",
		    GTK_RUN_FIRST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, size_request),
		    gtk_marshal_NONE__POINTER,
		    GTK_TYPE_NONE, 1,
		    GTK_TYPE_POINTER); -->

  <signal id="gtk.gtkwidget.signal.size-allocate">
   <signalname>size-allocate</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[SIZE_ALLOCATE] =
    gtk_signal_new ("size_allocate",
		    GTK_RUN_FIRST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, size_allocate),
		    gtk_marshal_NONE__POINTER,
		    GTK_TYPE_NONE, 1,
		    GTK_TYPE_POINTER); -->

  <signal id="gtk.gtkwidget.signal.state-changed">
   <signalname>state-changed</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[STATE_CHANGED] =
    gtk_signal_new ("state_changed",
		    GTK_RUN_FIRST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, state_changed),
		    gtk_marshal_NONE__UINT,
		    GTK_TYPE_NONE, 1,
		    GTK_TYPE_STATE_TYPE); -->

  <signal id="gtk.gtkwidget.signal.parent-set">
   <signalname>parent-set</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GtkWidget</classname> parent</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.style-set">
   <signalname>style-set</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[STYLE_SET] =
    gtk_signal_new ("style_set",
		    GTK_RUN_FIRST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, style_set),
		    gtk_marshal_NONE__POINTER,
		    GTK_TYPE_NONE, 1,
		    GTK_TYPE_STYLE); -->

  <signal id="gtk.gtkwidget.signal.add-accelerator">
   <signalname>add-accelerator</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[ADD_ACCELERATOR] =
    gtk_accel_group_create_add (object_class->type, GTK_RUN_LAST,
				GTK_SIGNAL_OFFSET (GtkWidgetClass, add_accelerator)); -->

  <signal id="gtk.gtkwidget.signal.remove-accelerator">
   <signalname>remove-accelerator</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[REMOVE_ACCELERATOR] =
    gtk_accel_group_create_remove (object_class->type, GTK_RUN_LAST,
				   GTK_SIGNAL_OFFSET (GtkWidgetClass, remove_accelerator)); -->

  <signal id="gtk.gtkwidget.signal.grab-focus">
   <signalname>grab-focus</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.event">
   <signalname>event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GdkEvent</classname> event</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when any event is captured.
   </shortdesc>
   <desc>
    <simpara>
     The <signalname class="GtkWidget">event</signalname> signal is emitted
     when any <classname>GdkEvent</classname> is captured by the connected
     widget's underlying <classname>GdkWindow</classname>.
    </simpara>
    <simpara>
     All event signals return <literal>false</literal> until the event has
     been propagated to the widget that will handle it, at which point they
     return <literal>true</literal>, the event is no longer propagated and
     the signal is no longer fired.
    </simpara>
    <note>
     <simpara>
      Each event causes two signal emissions; the generic event signal
      described here, and the specific event signal that is being called,
      such as the <signalname class="GtkWidget">key-press-event</signalname> 
      signal.  The <signalname class="GtkWidget">event</signalname> signal
      itself is unlikely to be used directly on its own account very often.
     </simpara>
    </note>
    <simpara>
     All event signals carry the event that caused the signal to be fired as
     the first parameter after the connecting widget.  You may add as many
     parameters as you like that contain data specific to your application.
    </simpara>
    <simpara>
     You can limit or extend the events that are captured by a windowed widget
     by setting one or more <enumname>GdkEventMask</enumname> flags for the
     widget.  See <function class="GtkWidget">add_events()</function>, and
     <function class="GtkWidget">set_events()</function>.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.button-press-event">
   <signalname>button-press-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GdkEvent</classname> button_press</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when a <literal>GDK_BUTTON_PRESS</literal> event is captured.
   </shortdesc>
   <desc>
    <para>
     This is an event signal, fired when the connected widget picks up a
     <literal>GDK_BUTTON_PRESS</literal> event.  Button press events are
     generated by any of the mouse buttons being pressed.  You can distinguish
     between the mouse buttons in the callback by using an 
     <literal>if</literal> or <literal>switch</literal> statement:
     <informalexample>
      <programlisting role="php">
function on_click($widget, $event, $data) {
switch($event-&gt;button) {
case 1:
/* do something appropriate to a left click */
break;
case 2:
/* do something appropriate to a middle click */
break;
case 3:
/* do something appropriate to a right click */
break;
}}
    
$widget-&gt;connect('button-press-event', 'on_click', $data);
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     See also:  
     <signalname class="GtkWidget">button-release-event</signalname>, 
     <signalname class="GtkWidget">event</signalname>, 
     <signalname class="GtkWidget">key-press-event</signalname>.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.button-release-event">
   <signalname>button-release-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GdkEvent</classname> button_release</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when a <literal>GDK_BUTTON_RELEASE</literal> event is captured.
   </shortdesc>
   <desc>
    <simpara>
     This is an event signal, fired when the connected widget picks up a
     <literal>GDK_BUTTON_RELEASE</literal> event.  Button release events are
     generated by any of the mouse buttons being released.  You can
     distinguish between the mouse buttons in the callback by using 
     <literal>$event-&gt;button</literal>.
    </simpara>
    <simpara>
     See also:  
     <signalname class="GtkWidget">button-press-event</signalname>, 
     <signalname class="GtkWidget">event</signalname>, 
     <signalname class="GtkWidget">key-press-event</signalname>.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.motion-notify-event">
   <signalname>motion-notify-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GdkEvent</classname> motion_notify</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when a <literal>GDK_MOTION_NOTIFY</literal> event is captured.
   </shortdesc>
   <desc>
    <simpara>
     This is an event signal, fired when the connected widget picks up a
     <literal>GDK_MOTION_NOTIFY</literal> event.  Motion notify events are
     triggered when the mouse pointer moves across the screen.  There are
     a great many of them, which has given rise to several different kinds
     of <enumname>GdkEventMask</enumname> aiming to minimise the amount
     that are captured.
    </simpara>
    <simpara>
     See also:  <signalname class="GtkWidget">event</signalname>.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.delete-event">
   <signalname>delete-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GdkEvent</classname> delete</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when a <literal>GDK_DELETE</literal> event is captured.
   </shortdesc>
   <desc>
    <simpara>
     This is an event signal, fired when the window manager requests that
     a widget be deleted.  This is generally when a user clicks the
     <literal>X</literal> close button on a toplevel window.
    </simpara>
    <simpara>
     The delete event is not propagated.  If you want to prevent the
     end user from using the window decorations to close your application, 
     returning <literal>true</literal> from the 
     <signalname class="GtkWindow">delete-event</signalname> signal will do
     just that.  Allowing it to return <literal>false</literal> - which it
     does by default - will cause its default handler to be called.  This
     happens to be the <function class="GtkObject">destroy()</function> 
     method, which in turns fires the 
     <signalname class="GtkObject">destroy</signalname> signal.  In most
     cases, it's simpler to connect directly to the latter.
    </simpara>
    <simpara>
     See also:  <signalname class="GtkWidget">event</signalname>.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.destroy-event">
   <signalname>destroy-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GdkEvent</classname> destroy</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when a <literal>GDK_DESTROY</literal> event is captured.
   </shortdesc>
   <desc>
    <simpara>
     You really shouldn't ever find a widget that emits this signal.  The
     destroy event is triggered by the destruction of a widget's underlying 
     <classname>GdkWindow</classname>, so if that widget is still capable of
     emitting the <signalname class="GtkWidget">destroy-event</signalname> 
     signal something has gone badly awry.
    </simpara>
    <simpara>
     See also:   <signalname class="GtkWidget">delete-event</signalname>, 
     <signalname class="GtkWidget">event</signalname>.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.expose-event">
   <signalname>expose-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GdkEvent</classname> expose</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when a <literal>GDK_EXPOSE</literal> event is captured.
   </shortdesc>
   <desc>
    <simpara>
     This is an event signal, initially emitted when the connected widget
     becomes fully visible on screen.  Every widget can capture expose
     events; they are even synthesized for widgets that don't have
     a <classname>GdkWindow</classname>.
    </simpara>
    <simpara>
     Expose events are also generated when a widget has been partially
     or fully covered by another widget, and is re-exposed.  These events
     trigger a redraw internally; a <classname>GdkWindow</classname> 
     that is not currently exposed is not currently drawn, and the same
     applies to any unexposed area of a window.
    </simpara>
    <simpara>
     Following suit, the most likely reason to connect to an 
     <signalname class="GtkWidget">expose-event</signalname> signal is
     that you have a drawing function in the callback.
    </simpara>
    <simpara>
     See also:  <signalname class="GtkWidget">event</signalname>, 
     <classname>GtkDrawingArea</classname>, <classname>GdkWindow</classname>, 
     and the numerous GTK and GDK drawing functions filed under 'Misc'.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.key-press-event">
   <signalname>key-press-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GdkEvent</classname> key_press</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when a <literal>GDK_KEY_PRESS</literal> event is captured.
   </shortdesc>
   <desc>
    <para>
     This is an event signal, fired when the connected widget picks up a
     <literal>GDK_KEY_PRESS</literal> event.  Key press events are
     generated by any of the keys on a keyboard being pressed.  You can
     distinguish between the key values in the callback using an
     <literal>if</literal> or <literal>switch</literal> statement:
     <informalexample>
      <programlisting role="php">
function on_click($widget, $event, $data) {
if($event-&gt;keyval==GDK_KEY_Return) {
/*do something appropriate for the return key being pressed*/
}
elseif($event-&gt;keyval > GDK_KEY__a) {
/*we can reach the character strings, too*/
echo $event-&gt;string.&quot;\n&quot;;
}}
      </programlisting>
     </informalexample>
    </para>
    <note>
     <simpara>
      Yes, we have hard-coded keysyms.  The full list of PHP-GTK keysymbol
      constants is in the source code in the file 
      <filename>php-gtk/ext/gtk+/php_gdk.c</filename>.
     </simpara>
    </note>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.key-release-event">
   <signalname>key-release-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GdkEvent</classname> key_release</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when a <literal>GDK_KEY_RELEASE</literal> event is captured.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.enter-notify-event">
   <signalname>enter-notify-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GdkEvent</classname> enter_notify</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when a <literal>GDK_ENTER_NOTIFY</literal> event is captured.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.leave-notify-event">
   <signalname>leave-notify-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GdkEvent</classname> leave_notify</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when a <literal>GDK_LEAVE_NOTIFY</literal> event is captured.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.configure-event">
   <signalname>configure-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GdkEvent</classname> configure</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when a <literal>GDK_CONFIGURE</literal> event is captured.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.focus-in-event">
   <signalname>focus-in-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GdkEvent</classname> focus_change</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when a <literal>GDK_FOCUS_CHANGE</literal> event is captured.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.focus-out-event">
   <signalname>focus-out-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GdkEvent</classname> focus_change</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when a <literal>GDK_FOCUS_CHANGE</literal> event is captured.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.map-event">
   <signalname>map-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GdkEvent</classname> map</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when a <literal>GDK_MAP</literal> event is captured.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.unmap-event">
   <signalname>unmap-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GdkEvent</classname> unmap</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when a <literal>GDK_UNMAP</literal> event is captured.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.property-notify-event">
   <signalname>property-notify-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GdkEvent</classname> property_notify</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when a <literal>GDK_PROPERTY_NOTIFY</literal> event is captured.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.selection-clear-event">
   <signalname>selection-clear-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GdkEvent</classname> selection_clear</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when a <literal>GDK_SELECTION_CLEAR</literal> event is captured.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.selection-request-event">
   <signalname>selection-request-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GdkEvent</classname> selection_request</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when a <literal>GDK_SELECTION_REQUEST</literal> event is captured.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.selection-notify-event">
   <signalname>selection-notify-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GdkEvent</classname> selection_notify</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when a <literal>GDK_SELECTION_NOTIFY</literal> event is captured.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.selection-received">
   <signalname>selection-received</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[SELECTION_RECEIVED] =
    gtk_signal_new ("selection_received",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, selection_received),
		    gtk_marshal_NONE__POINTER_UINT,
		    GTK_TYPE_NONE, 2,
		    GTK_TYPE_SELECTION_DATA,
		    GTK_TYPE_UINT); -->

  <signal id="gtk.gtkwidget.signal.selection-get">
   <signalname>selection-get</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[SELECTION_GET] =
    gtk_signal_new ("selection_get",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, selection_get),
		    gtk_marshal_NONE__POINTER_UINT_UINT,
		    GTK_TYPE_NONE, 3,
		    GTK_TYPE_SELECTION_DATA,
		    GTK_TYPE_UINT,
		    GTK_TYPE_UINT); -->

  <signal id="gtk.gtkwidget.signal.proximity-in-event">
   <signalname>proximity-in-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GdkEvent</classname> proximity_in</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when a <literal>GDK_PROXIMITY_IN</literal> event is captured.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.proximity-out-event">
   <signalname>proximity-out-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GdkEvent</classname> proximity_out</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when a <literal>GDK_PROXIMITY_OUT</literal> event is captured.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.drag-leave">
   <signalname>drag-leave</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>

   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[DRAG_LEAVE] =
    gtk_signal_new ("drag_leave",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, drag_leave),
		    gtk_marshal_NONE__POINTER_UINT,
		    GTK_TYPE_NONE, 2,
		    GTK_TYPE_GDK_DRAG_CONTEXT,
		    GTK_TYPE_UINT); -->

  <signal id="gtk.gtkwidget.signal.drag-begin">
   <signalname>drag-begin</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>

   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[DRAG_BEGIN] =
    gtk_signal_new ("drag_begin",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, drag_begin),
		    gtk_marshal_NONE__POINTER,
		    GTK_TYPE_NONE, 1,
		    GTK_TYPE_GDK_DRAG_CONTEXT); -->

  <signal id="gtk.gtkwidget.signal.drag-end">
   <signalname>drag-end</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>

   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[DRAG_END] =
    gtk_signal_new ("drag_end",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, drag_end),
		    gtk_marshal_NONE__POINTER,
		    GTK_TYPE_NONE, 1,
		    GTK_TYPE_GDK_DRAG_CONTEXT); -->

  <signal id="gtk.gtkwidget.signal.drag-data-delete">
   <signalname>drag-data-delete</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[DRAG_DATA_DELETE] =
    gtk_signal_new ("drag_data_delete",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, drag_data_delete),
		    gtk_marshal_NONE__POINTER,
		    GTK_TYPE_NONE, 1,
		    GTK_TYPE_GDK_DRAG_CONTEXT); -->

  <signal id="gtk.gtkwidget.signal.drag-motion">
   <signalname>drag-motion</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>

   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[DRAG_MOTION] =
    gtk_signal_new ("drag_motion",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, drag_motion),
		    gtk_marshal_BOOL__POINTER_INT_INT_UINT,
		    GTK_TYPE_BOOL, 4,
		    GTK_TYPE_GDK_DRAG_CONTEXT,
		    GTK_TYPE_INT,
		    GTK_TYPE_INT,
		    GTK_TYPE_UINT); -->

  <signal id="gtk.gtkwidget.signal.drag-drop">
   <signalname>drag-drop</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[DRAG_DROP] =
    gtk_signal_new ("drag_drop",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, drag_drop),
		    gtk_marshal_BOOL__POINTER_INT_INT_UINT,
		    GTK_TYPE_BOOL, 4,
		    GTK_TYPE_GDK_DRAG_CONTEXT,
		    GTK_TYPE_INT,
		    GTK_TYPE_INT,
		    GTK_TYPE_UINT); -->

  <signal id="gtk.gtkwidget.signal.drag-data-get">
   <signalname>drag-data-get</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[DRAG_DATA_GET] =
    gtk_signal_new ("drag_data_get",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, drag_data_get),
		    gtk_marshal_NONE__POINTER_POINTER_UINT_UINT,
		    GTK_TYPE_NONE, 4,
		    GTK_TYPE_GDK_DRAG_CONTEXT,
		    GTK_TYPE_SELECTION_DATA,
		    GTK_TYPE_UINT,
		    GTK_TYPE_UINT); -->

  <signal id="gtk.gtkwidget.signal.drag-data-received">
   <signalname>drag-data-received</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[DRAG_DATA_RECEIVED] =
    gtk_signal_new ("drag_data_received",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, drag_data_received),
		    gtk_marshal_NONE__POINTER_INT_INT_POINTER_UINT_UINT,
		    GTK_TYPE_NONE, 6,
		    GTK_TYPE_GDK_DRAG_CONTEXT,
		    GTK_TYPE_INT,
		    GTK_TYPE_INT,
		    GTK_TYPE_SELECTION_DATA,
		    GTK_TYPE_UINT,
		    GTK_TYPE_UINT); -->

  <signal id="gtk.gtkwidget.signal.visibility-notify-event">
   <signalname>visibility-notify-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GdkEvent</classname> visibility_notify</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when a <literal>GDK_VISIBILITY_NOTIFY</literal> event is captured.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.client-event">
   <signalname>client-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GdkEvent</classname> client_event</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    Emitted when a <literal>GDK_CLIENT_EVENT</literal> event is captured.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.no-expose-event">
   <signalname>no-expose-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GdkEvent</classname> no_expose</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
    Emitted when a <literal>GDK_NO_EXPOSE</literal> event is captured.
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.debug-msg">
   <signalname>debug-msg</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[DEBUG_MSG] =
    gtk_signal_new ("debug_msg",
		    GTK_RUN_LAST | GTK_RUN_ACTION,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, debug_msg),
		    gtk_marshal_NONE__STRING,
		    GTK_TYPE_NONE, 1,
		    GTK_TYPE_STRING); -->
 </signals>

 <properties>

  <property id="gtk.gtkwidget.property.style" type="ro">
   <propname>style</propname>
   <proptype>GtkStyle</proptype>
   <shortdesc>
    Style associated with a widget.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </property>

  <property id="gtk.gtkwidget.property.window" type="ro">
   <propname>window</propname>
   <proptype>GdkWindow</proptype>
   <shortdesc>
    Underlying GdkWindow that captures events on a widget.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </property>

  <property id="gtk.gtkwidget.property.allocation" type="ro">
   <propname>allocation</propname>
   <proptype>GtkAllocation</proptype>
   <shortdesc>
    Size and position allocated to a widget.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </property>

  <property id="gtk.gtkwidget.property.state" type="ro">
   <propname>state</propname>
   <proptype>GtkStateType</proptype>
   <shortdesc>
    Degree of response to events.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </property>

  <property id="gtk.gtkwidget.property.parent" type="ro">
   <propname>parent</propname>
   <proptype>GtkWidget</proptype>
   <shortdesc>
    A widget's parent.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </property>

 </properties>

</classentry>
