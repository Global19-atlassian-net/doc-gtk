<classentry id="gtk.gtkwidget">
 <classmeta>
  <classtitle>GtkWidget</classtitle>
  <classparent>GtkObject</classparent>
  <shortdesc>
   Base class for user interface elements.
  </shortdesc>
  <desc>
   <simpara>
    <classname>GtkWidget</classname> is an abstract base class providing
    its descendants with properties, methods and signals pertinent to
    displayable user interface elements.  The only objects that do not
    inherit <classname>GtkWidget</classname> characteristics are 
    <classname>GtkTooltips</classname>, <classname>GtkAdjustment</classname> 
    and <classname>GtkItemFactory</classname> - all of which are relatively
    abstract concepts.  Everything else that is a member of the object
    hierarchy is a descendant of the <classname>GtkWidget</classname> 
    class, takes up screen space, and may be referred to as a 
    <literal>widget</literal>.
   </simpara>
   <simpara>
    Note that <classname>GtkWidget</classname> cannot be constructed
    directly.
   </simpara>
  </desc>
 </classmeta>

 <methods>

  <method id="gtk.gtkwidget.method.drag_highlight">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>drag_highlight</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.drag_unhighlight">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>drag_unhighlight</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.drag_dest_unset">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>drag_dest_unset</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.drag_source_unset">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>drag_source_unset</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.drag_source_set_icon">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>drag_source_set_icon</function></funcdef>
     <paramdef>
      <classname>GdkColormap</classname> 
      <parameter>colormap</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkPixmap</classname> 
      <parameter>pixmap</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkBitmap</classname> 
      <parameter>mask</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.selection_owner_set">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>selection_owner_set</function></funcdef>
     <paramdef>GdkAtom <parameter>selection</parameter></paramdef>
     <paramdef>int <parameter>time</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.selection_add_target">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>selection_add_target</function></funcdef>
     <paramdef>GdkAtom <parameter>selection</parameter></paramdef>
     <paramdef>GdkAtom <parameter>target</parameter></paramdef>
     <paramdef>int <parameter>info</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.selection_convert">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>selection_convert</function></funcdef>
     <paramdef>GdkAtom <parameter>selection</parameter></paramdef>
     <paramdef>GdkAtom <parameter>target</parameter></paramdef>
     <paramdef>int <parameter>time</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.selection_remove_all">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>selection_remove_all</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.unparent">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>unparent</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.show">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>show</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Displays the calling widget.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkWidget">show()</function> is a commonly-used method
     that combines a series of other methods in order to display a widget on
     the screen.
    </simpara>
    <simpara>
     See also:  <function class="GtkWidget">map()</function>, 
     <function class="GtkWidget">realize()</function>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.show_now">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>show_now</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.hide">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>hide</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Hides the calling widget.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkWidget">hide()</function> is the corollary to the
     <function class="GtkWidget">show()</function> method.  It combines
     other methods in order to hide the calling widget from display.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.show_all">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>show_all</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Displays calling widget and its children.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.hide_all">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>hide_all</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Hides calling widget and its children.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.map">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>map</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Maps calling widget to the screen.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.unmap">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>unmap</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Unmaps calling widget from the screen.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.realize">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>realize</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Instantiates calling widget's <classname>GdkWindow</classname>.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.unrealize">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>unrealize</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Removes calling widget's <classname>GdkWindow</classname>.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.queue_draw">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>queue_draw</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Queues widget's redraw requests.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.queue_draw_area">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>queue_draw_area</function></funcdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.queue_clear">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>queue_clear</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.queue_clear_area">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>queue_clear_area</function></funcdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.queue_resize">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>queue_resize</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Queues widget's resize requests.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.draw">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>draw</function></funcdef>
     <paramdef>GdkRectangle <parameter>area</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.draw_focus">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>draw_focus</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.draw_default">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>draw_default</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.add_accelerator">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>add_accelerator</function></funcdef>
     <paramdef>string <parameter>accel_signal</parameter></paramdef>
     <paramdef>
      <classname>GtkAccelGroup</classname> 
      <parameter>accel_group</parameter>
     </paramdef>
     <paramdef>int <parameter>accel_key</parameter></paramdef>
     <paramdef>GdkModifierType <parameter>accel_mods</parameter></paramdef>
     <paramdef>
      <enumname>GtkAccelFlags</enumname> 
      <parameter>accel_flags</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Adds accelerator key to a widget.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkWidget">add_accelerator</function> defines and
     adds a keyboard accelerator to the calling widget, usually a 
     <classname>GtkMenuItem</classname>.
    </simpara>
    <simpara>
     The first parameter is the name of the signal that you want the widget
     to emit when the key is pressed.  Generally this will probably be
     <signalname class="GtkMenuItem">activate</signalname>.
    </simpara>
    <simpara>
     The second parameter is the <classname>GtkAccelGroup</classname> that
     this <literal>GtkAccelEntry</literal> will belong to when it has been
     created.  This will generally be an accelerator group that has been
     newly created and added to the toplevel window.
    </simpara>
    <simpara>
     Thirdly there is the <parameter>accel_key</parameter> parameter.  This
     can be pulled from the <classname>GtkAccelLabel</classname> using the 
     <function class="GtkLabel">parse_uline()</function> method if you have
     an underscore under the appropriate letter, or alternatively you could
     use the key symbols which have been hard-coded into PHP-GTK.  Usually
     these would be in the format <literal>GDK_KEY__a</literal> - always in
     lower case, because the accelerator functions return lower case key
     values.
    </simpara>
    <note>
     <simpara>
      The full list of available key symbol hard codings is available in
      the source code in the file <literal>ext/gtk+/php_gdk.c</literal>.
     </simpara>
    </note>
    <simpara>
     The fourth and fifth parameters are 
     <enumname>GdkModifierType</enumname> and 
     <enumname>GtkAccelFlags</enumname> respectively.  In both cases, 
     passing <literal>0</literal> is accepted as a null field.
    </simpara>
    <simpara>
     There is no limit on the number of accelerator keys that can be
     associated with a widget.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.remove_accelerator">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>remove_accelerator</function></funcdef>
     <paramdef>
      <classname>GtkAccelGroup</classname> 
      <parameter>accel_group</parameter>
     </paramdef>
     <paramdef>int <parameter>accel_key</parameter></paramdef>
     <paramdef>GdkModifierType <parameter>accel_mods</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Removes a single accelerator.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkWidget">remove_accelerator()</function> is a
     way to remove a single accelerator, defined by its key value and
     <enumname>GtkModifierType</enumname>.
    </simpara>
    <simpara>
     Note that the accelerator needs to be unlocked before this method
     will work.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.remove_accelerators">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>remove_accelerators</function></funcdef>
     <paramdef>string <parameter>accel_signal</parameter></paramdef>
     <paramdef>bool <parameter>visible_only</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Removes all accelerators meeting certain criteria.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkWidget">remove_accelerators()</function> is a way
     to remove any number of accelerators belonging to the calling widget
     and causing the given signal to be fired.  The second parameter toggles
     whether this should include all such accelerators, or only those
     displayed on the <classname>GtkAccelLabel</classname>.
    </simpara>
    <simpara>
     Note that the accelerators on the widget need to be unlocked before
     this method will work.
    </simpara>
   </desc>
  </method>

  <!-- DELETED gtk.gtkwidget.method.accelerator_signal - we really don't
  need this method.  We don't have any functions exposed where the accelerator
  signal id is needed, and if we did we shouldn't - they're all internal. 
  - sf jan 02 -->

  <method id="gtk.gtkwidget.method.lock_accelerators">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>lock_accelerators</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Locks accelerator key definitions.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkWidget">lock_accelerators()</function> locks
     any accelerators defined on the calling widget - usually a 
     <classname>GtkMenuItem</classname> - so that no further keys can
     be entered or existing keys removed or altered.
    </simpara>
    <simpara>
     Note that if you do not lock your accelerators the end user will
     be able to define their own, whether any exist on that widget or not.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.unlock_accelerators">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>unlock_accelerators</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Unlocks accelerators to allow alterations.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkWidget">unlock_accelerators()</function> unlocks
     the accelerator entries defined in the calling widget, allowing
     changes or additions to be made to them.
    </simpara>
    <simpara>
     See also: <function class="GtkWidget">accelerators_locked()</function>.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.accelerators_locked">
   <funcsynopsis>
    <funcprototype>
     <funcdef>bool <function>accelerators_locked</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Tests accelerator lock status.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkWidget">accelerators_locked()</function> returns 
     <literal>true</literal> if the accelerators on the calling widget are
     locked, and <literal>false</literal> if they are not.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkwidget.method.event">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>event</function></funcdef>
     <paramdef>
      <classname>GdkEvent</classname> 
      <parameter>event</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.activate">
   <funcsynopsis>
    <funcprototype>
     <funcdef>bool <function>activate</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_scroll_adjustments">
   <funcsynopsis>
    <funcprototype>
     <funcdef>bool <function>set_scroll_adjustments</function></funcdef>
     <paramdef>
      <classname>GtkAdjustment</classname> 
      <parameter>hadjustment</parameter>
     </paramdef>
     <paramdef>
      <classname>GtkAdjustment</classname> 
      <parameter>vadjustment</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.reparent">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>reparent</function></funcdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>new_parent</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.popup">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>popup</function></funcdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.intersect">
   <funcsynopsis>
    <funcprototype>
     <funcdef>XXX <function>intersect</function></funcdef>
     <paramdef>XXX</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.grab_focus">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>grab_focus</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.grab_default">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>grab_default</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_name">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_name</function></funcdef>
     <paramdef>string <parameter>name</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.get_name">
   <funcsynopsis>
    <funcprototype>
     <funcdef>string <function>get_name</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_state">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_state</function></funcdef>
     <paramdef>
      <enumname>GtkStateType</enumname> 
      <parameter>state</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_sensitive">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_sensitive</function></funcdef>
     <paramdef>bool <parameter>sensitive</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_app_paintable">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_app_paintable</function></funcdef>
     <paramdef>bool <parameter>app_paintable</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_parent">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_parent</function></funcdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>parent</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_parent_window">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_parent_window</function></funcdef>
     <paramdef>
      <classname>GdkWindow</classname> 
      <parameter>parent_window</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.get_parent_window">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkWindow</classname> 
      <function>get_parent_window</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_uposition">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_uposition</function></funcdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_usize">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_usize</function></funcdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_events">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_events</function></funcdef>
     <paramdef>int <parameter>events</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.add_events">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>add_events</function></funcdef>
     <paramdef>int <parameter>events</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.get_toplevel">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkWidget</classname> 
      <function>get_toplevel</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.get_ancestor">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkWidget</classname> 
      <function>get_ancestor</function>
     </funcdef>
     <paramdef>int <parameter>widget_type</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.get_colormap">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkColormap</classname> 
      <function>get_colormap</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.get_visual">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkVisual</classname> 
      <function>get_visual</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_colormap">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_colormap</function></funcdef>
     <paramdef>
      <classname>GdkColormap</classname> 
      <parameter>colormap</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_visual">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_visual</function></funcdef>
     <paramdef>
      <classname>GdkVisual</classname> 
      <parameter>visual</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.get_events">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_events</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.is_ancestor">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>is_ancestor</function></funcdef>
     <paramdef>
      <classname>GtkWidget</classname> 
      <parameter>ancestor</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.hide_on_delete">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>hide_on_delete</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_style</function></funcdef>
     <paramdef>
      <classname>GtkStyle</classname> 
      <parameter>style</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_rc_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_rc_style</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.ensure_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>ensure_style</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.get_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkStyle</classname> 
      <function>get_style</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.restore_default_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>restore_default_style</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.set_composite_name">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_composite_name</function></funcdef>
     <paramdef>string <parameter>name</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.get_composite_name">
   <funcsynopsis>
    <funcprototype>
     <funcdef>string <function>get_composite_name</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.reset_rc_styles">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>reset_rc_styles</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gtk.gtkwidget.method.shape_combine_mask">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>shape_combine_mask</function></funcdef>
     <paramdef>
      <classname>GdkBitmap</classname> 
      <parameter>shape_mask</parameter>
     </paramdef>
     <paramdef>int <parameter>offset_x</parameter></paramdef>
     <paramdef>int <parameter>offset_y</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

 </methods>

 <signals>

  <signal id="gtk.gtkwidget.signal.show">
   <signalname>show</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.hide">
   <signalname>hide</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.map">
   <signalname>map</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.unmap">
   <signalname>unmap</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.realize">
   <signalname>realize</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.unrealize">
   <signalname>unrealize</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.draw">
   <signalname>draw</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[DRAW] =
    gtk_signal_new ("draw",
		    GTK_RUN_FIRST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, draw),
		    gtk_marshal_NONE__POINTER,
		    GTK_TYPE_NONE, 1,
		    GTK_TYPE_POINTER); -->

  <signal id="gtk.gtkwidget.signal.draw-focus">
   <signalname>draw-focus</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.draw-default">
   <signalname>draw-default</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.size-request">
   <signalname>size-request</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[SIZE_REQUEST] =
    gtk_signal_new ("size_request",
		    GTK_RUN_FIRST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, size_request),
		    gtk_marshal_NONE__POINTER,
		    GTK_TYPE_NONE, 1,
		    GTK_TYPE_POINTER); -->

  <signal id="gtk.gtkwidget.signal.size-allocate">
   <signalname>size-allocate</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[SIZE_ALLOCATE] =
    gtk_signal_new ("size_allocate",
		    GTK_RUN_FIRST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, size_allocate),
		    gtk_marshal_NONE__POINTER,
		    GTK_TYPE_NONE, 1,
		    GTK_TYPE_POINTER); -->

  <signal id="gtk.gtkwidget.signal.state-changed">
   <signalname>state-changed</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[STATE_CHANGED] =
    gtk_signal_new ("state_changed",
		    GTK_RUN_FIRST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, state_changed),
		    gtk_marshal_NONE__UINT,
		    GTK_TYPE_NONE, 1,
		    GTK_TYPE_STATE_TYPE); -->

  <signal id="gtk.gtkwidget.signal.parent-set">
   <signalname>parent-set</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef><classname>GtkWidget</classname> parent</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.style-set">
   <signalname>style-set</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[STYLE_SET] =
    gtk_signal_new ("style_set",
		    GTK_RUN_FIRST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, style_set),
		    gtk_marshal_NONE__POINTER,
		    GTK_TYPE_NONE, 1,
		    GTK_TYPE_STYLE); -->

  <signal id="gtk.gtkwidget.signal.add-accelerator">
   <signalname>add-accelerator</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[ADD_ACCELERATOR] =
    gtk_accel_group_create_add (object_class->type, GTK_RUN_LAST,
				GTK_SIGNAL_OFFSET (GtkWidgetClass, add_accelerator)); -->

  <signal id="gtk.gtkwidget.signal.remove-accelerator">
   <signalname>remove-accelerator</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[REMOVE_ACCELERATOR] =
    gtk_accel_group_create_remove (object_class->type, GTK_RUN_LAST,
				   GTK_SIGNAL_OFFSET (GtkWidgetClass, remove_accelerator)); -->

  <signal id="gtk.gtkwidget.signal.grab-focus">
   <signalname>grab-focus</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>

  <signal id="gtk.gtkwidget.signal.event">
   <signalname>event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[EVENT] =
    gtk_signal_new ("event",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, event),
		    gtk_marshal_BOOL__POINTER,
		    GTK_TYPE_BOOL, 1,
		    GTK_TYPE_GDK_EVENT); -->

  <signal id="gtk.gtkwidget.signal.button-press-event">
   <signalname>button-press-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[BUTTON_PRESS_EVENT] =
    gtk_signal_new ("button_press_event",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, button_press_event),
		    gtk_marshal_BOOL__POINTER,
		    GTK_TYPE_BOOL, 1,
		    GTK_TYPE_GDK_EVENT); -->

  <signal id="gtk.gtkwidget.signal.button-release-event">
   <signalname>button-release-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[BUTTON_RELEASE_EVENT] =
    gtk_signal_new ("button_release_event",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, button_release_event),
		    gtk_marshal_BOOL__POINTER,
		    GTK_TYPE_BOOL, 1,
		    GTK_TYPE_GDK_EVENT); -->

  <signal id="gtk.gtkwidget.signal.motion-notify-event">
   <signalname>motion-notify-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[MOTION_NOTIFY_EVENT] =
    gtk_signal_new ("motion_notify_event",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, motion_notify_event),
		    gtk_marshal_BOOL__POINTER,
		    GTK_TYPE_BOOL, 1,
		    GTK_TYPE_GDK_EVENT); -->

  <signal id="gtk.gtkwidget.signal.delete-event">
   <signalname>delete-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[DELETE_EVENT] =
    gtk_signal_new ("delete_event",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, delete_event),
		    gtk_marshal_BOOL__POINTER,
		    GTK_TYPE_BOOL, 1,
		    GTK_TYPE_GDK_EVENT); -->

  <signal id="gtk.gtkwidget.signal.destroy-event">
   <signalname>destroy-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[DESTROY_EVENT] =
    gtk_signal_new ("destroy_event",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, destroy_event),
		    gtk_marshal_BOOL__POINTER,
		    GTK_TYPE_BOOL, 1,
		    GTK_TYPE_GDK_EVENT); -->

  <signal id="gtk.gtkwidget.signal.expose-event">
   <signalname>expose-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[EXPOSE_EVENT] =
    gtk_signal_new ("expose_event",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, expose_event),
		    gtk_marshal_BOOL__POINTER,
		    GTK_TYPE_BOOL, 1,
		    GTK_TYPE_GDK_EVENT); -->

  <signal id="gtk.gtkwidget.signal.key-press-event">
   <signalname>key-press-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[KEY_PRESS_EVENT] =
    gtk_signal_new ("key_press_event",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, key_press_event),
		    gtk_marshal_BOOL__POINTER,
		    GTK_TYPE_BOOL, 1,
		    GTK_TYPE_GDK_EVENT); -->

  <signal id="gtk.gtkwidget.signal.key-release-event">
   <signalname>key-release-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[KEY_RELEASE_EVENT] =
    gtk_signal_new ("key_release_event",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, key_release_event),
		    gtk_marshal_BOOL__POINTER,
		    GTK_TYPE_BOOL, 1,
		    GTK_TYPE_GDK_EVENT); -->

  <signal id="gtk.gtkwidget.signal.enter-notify-event">
   <signalname>enter-notify-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[ENTER_NOTIFY_EVENT] =
    gtk_signal_new ("enter_notify_event",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, enter_notify_event),
		    gtk_marshal_BOOL__POINTER,
		    GTK_TYPE_BOOL, 1,
		    GTK_TYPE_GDK_EVENT); -->

  <signal id="gtk.gtkwidget.signal.leave-notify-event">
   <signalname>leave-notify-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[LEAVE_NOTIFY_EVENT] =
    gtk_signal_new ("leave_notify_event",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, leave_notify_event),
		    gtk_marshal_BOOL__POINTER,
		    GTK_TYPE_BOOL, 1,
		    GTK_TYPE_GDK_EVENT); -->

  <signal id="gtk.gtkwidget.signal.configure-event">
   <signalname>configure-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[CONFIGURE_EVENT] =
    gtk_signal_new ("configure_event",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, configure_event),
		    gtk_marshal_BOOL__POINTER,
		    GTK_TYPE_BOOL, 1,
		    GTK_TYPE_GDK_EVENT); -->

  <signal id="gtk.gtkwidget.signal.focus-in-event">
   <signalname>focus-in-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[FOCUS_IN_EVENT] =
    gtk_signal_new ("focus_in_event",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, focus_in_event),
		    gtk_marshal_BOOL__POINTER,
		    GTK_TYPE_BOOL, 1,
		    GTK_TYPE_GDK_EVENT); -->

  <signal id="gtk.gtkwidget.signal.focus-out-event">
   <signalname>focus-out-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[FOCUS_OUT_EVENT] =
    gtk_signal_new ("focus_out_event",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, focus_out_event),
		    gtk_marshal_BOOL__POINTER,
		    GTK_TYPE_BOOL, 1,
		    GTK_TYPE_GDK_EVENT); -->

  <signal id="gtk.gtkwidget.signal.map-event">
   <signalname>map-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[MAP_EVENT] =
    gtk_signal_new ("map_event",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, map_event),
		    gtk_marshal_BOOL__POINTER,
		    GTK_TYPE_BOOL, 1,
		    GTK_TYPE_GDK_EVENT); -->

  <signal id="gtk.gtkwidget.signal.unmap-event">
   <signalname>unmap-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[UNMAP_EVENT] =
    gtk_signal_new ("unmap_event",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, unmap_event),
		    gtk_marshal_BOOL__POINTER,
		    GTK_TYPE_BOOL, 1,
		    GTK_TYPE_GDK_EVENT); -->

  <signal id="gtk.gtkwidget.signal.property-notify-event">
   <signalname>property-notify-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[PROPERTY_NOTIFY_EVENT] =
    gtk_signal_new ("property_notify_event",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, property_notify_event),
		    gtk_marshal_BOOL__POINTER,
		    GTK_TYPE_BOOL, 1,
		    GTK_TYPE_GDK_EVENT); -->

  <signal id="gtk.gtkwidget.signal.selection-clear-event">
   <signalname>selection-clear-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[SELECTION_CLEAR_EVENT] =
    gtk_signal_new ("selection_clear_event",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, selection_clear_event),
		    gtk_marshal_BOOL__POINTER,
		    GTK_TYPE_BOOL, 1,
		    GTK_TYPE_GDK_EVENT); -->

  <signal id="gtk.gtkwidget.signal.selection-request-event">
   <signalname>selection-request-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[SELECTION_REQUEST_EVENT] =
    gtk_signal_new ("selection_request_event",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, selection_request_event),
		    gtk_marshal_BOOL__POINTER,
		    GTK_TYPE_BOOL, 1,
		    GTK_TYPE_GDK_EVENT); -->

  <signal id="gtk.gtkwidget.signal.selection-notify-event">
   <signalname>selection-notify-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[SELECTION_NOTIFY_EVENT] =
    gtk_signal_new ("selection_notify_event",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, selection_notify_event),
		    gtk_marshal_BOOL__POINTER,
		    GTK_TYPE_BOOL, 1,
		    GTK_TYPE_GDK_EVENT); -->

  <signal id="gtk.gtkwidget.signal.selection-received">
   <signalname>selection-received</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[SELECTION_RECEIVED] =
    gtk_signal_new ("selection_received",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, selection_received),
		    gtk_marshal_NONE__POINTER_UINT,
		    GTK_TYPE_NONE, 2,
		    GTK_TYPE_SELECTION_DATA,
		    GTK_TYPE_UINT); -->

  <signal id="gtk.gtkwidget.signal.selection-get">
   <signalname>selection-get</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[SELECTION_GET] =
    gtk_signal_new ("selection_get",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, selection_get),
		    gtk_marshal_NONE__POINTER_UINT_UINT,
		    GTK_TYPE_NONE, 3,
		    GTK_TYPE_SELECTION_DATA,
		    GTK_TYPE_UINT,
		    GTK_TYPE_UINT); -->

  <signal id="gtk.gtkwidget.signal.proximity-in-event">
   <signalname>proximity-in-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[PROXIMITY_IN_EVENT] =
    gtk_signal_new ("proximity_in_event",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, proximity_in_event),
		    gtk_marshal_BOOL__POINTER,
		    GTK_TYPE_BOOL, 1,
		    GTK_TYPE_GDK_EVENT); -->

  <signal id="gtk.gtkwidget.signal.proximity-out-event">
   <signalname>proximity-out-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[PROXIMITY_OUT_EVENT] =
    gtk_signal_new ("proximity_out_event",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, proximity_out_event),
		    gtk_marshal_BOOL__POINTER,
		    GTK_TYPE_BOOL, 1,
		    GTK_TYPE_GDK_EVENT); -->

  <signal id="gtk.gtkwidget.signal.drag-leave">
   <signalname>drag-leave</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[DRAG_LEAVE] =
    gtk_signal_new ("drag_leave",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, drag_leave),
		    gtk_marshal_NONE__POINTER_UINT,
		    GTK_TYPE_NONE, 2,
		    GTK_TYPE_GDK_DRAG_CONTEXT,
		    GTK_TYPE_UINT); -->

  <signal id="gtk.gtkwidget.signal.drag-begin">
   <signalname>drag-begin</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[DRAG_BEGIN] =
    gtk_signal_new ("drag_begin",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, drag_begin),
		    gtk_marshal_NONE__POINTER,
		    GTK_TYPE_NONE, 1,
		    GTK_TYPE_GDK_DRAG_CONTEXT); -->

  <signal id="gtk.gtkwidget.signal.drag-end">
   <signalname>drag-end</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[DRAG_END] =
    gtk_signal_new ("drag_end",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, drag_end),
		    gtk_marshal_NONE__POINTER,
		    GTK_TYPE_NONE, 1,
		    GTK_TYPE_GDK_DRAG_CONTEXT); -->

  <signal id="gtk.gtkwidget.signal.drag-data-delete">
   <signalname>drag-data-delete</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[DRAG_DATA_DELETE] =
    gtk_signal_new ("drag_data_delete",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, drag_data_delete),
		    gtk_marshal_NONE__POINTER,
		    GTK_TYPE_NONE, 1,
		    GTK_TYPE_GDK_DRAG_CONTEXT); -->

  <signal id="gtk.gtkwidget.signal.drag-motion">
   <signalname>drag-motion</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[DRAG_MOTION] =
    gtk_signal_new ("drag_motion",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, drag_motion),
		    gtk_marshal_BOOL__POINTER_INT_INT_UINT,
		    GTK_TYPE_BOOL, 4,
		    GTK_TYPE_GDK_DRAG_CONTEXT,
		    GTK_TYPE_INT,
		    GTK_TYPE_INT,
		    GTK_TYPE_UINT); -->

  <signal id="gtk.gtkwidget.signal.drag-drop">
   <signalname>drag-drop</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[DRAG_DROP] =
    gtk_signal_new ("drag_drop",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, drag_drop),
		    gtk_marshal_BOOL__POINTER_INT_INT_UINT,
		    GTK_TYPE_BOOL, 4,
		    GTK_TYPE_GDK_DRAG_CONTEXT,
		    GTK_TYPE_INT,
		    GTK_TYPE_INT,
		    GTK_TYPE_UINT); -->

  <signal id="gtk.gtkwidget.signal.drag-data-get">
   <signalname>drag-data-get</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[DRAG_DATA_GET] =
    gtk_signal_new ("drag_data_get",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, drag_data_get),
		    gtk_marshal_NONE__POINTER_POINTER_UINT_UINT,
		    GTK_TYPE_NONE, 4,
		    GTK_TYPE_GDK_DRAG_CONTEXT,
		    GTK_TYPE_SELECTION_DATA,
		    GTK_TYPE_UINT,
		    GTK_TYPE_UINT); -->

  <signal id="gtk.gtkwidget.signal.drag-data-received">
   <signalname>drag-data-received</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[DRAG_DATA_RECEIVED] =
    gtk_signal_new ("drag_data_received",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, drag_data_received),
		    gtk_marshal_NONE__POINTER_INT_INT_POINTER_UINT_UINT,
		    GTK_TYPE_NONE, 6,
		    GTK_TYPE_GDK_DRAG_CONTEXT,
		    GTK_TYPE_INT,
		    GTK_TYPE_INT,
		    GTK_TYPE_SELECTION_DATA,
		    GTK_TYPE_UINT,
		    GTK_TYPE_UINT); -->

  <signal id="gtk.gtkwidget.signal.visibility-notify-event">
   <signalname>visibility-notify-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[VISIBILITY_NOTIFY_EVENT] =
    gtk_signal_new ("visibility_notify_event",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, visibility_notify_event),
		    gtk_marshal_BOOL__POINTER,
		    GTK_TYPE_BOOL, 1,
		    GTK_TYPE_GDK_EVENT); -->

  <signal id="gtk.gtkwidget.signal.client-event">
   <signalname>client-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[CLIENT_EVENT] =
    gtk_signal_new ("client_event",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, client_event),
		    gtk_marshal_BOOL__POINTER,
		    GTK_TYPE_BOOL, 1,
		    GTK_TYPE_GDK_EVENT); -->

  <signal id="gtk.gtkwidget.signal.no-expose-event">
   <signalname>no-expose-event</signalname>
   <callback>
    <funcprototype>
     <funcdef>bool <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[NO_EXPOSE_EVENT] =
    gtk_signal_new ("no_expose_event",
		    GTK_RUN_LAST,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, no_expose_event),
		    gtk_marshal_BOOL__POINTER,
		    GTK_TYPE_BOOL, 1,
		    GTK_TYPE_GDK_EVENT); -->

  <signal id="gtk.gtkwidget.signal.debug-msg">
   <signalname>debug-msg</signalname>
   <callback>
    <funcprototype>
     <funcdef>void <function>callback</function></funcdef>
     <paramdef><classname>GtkWidget</classname> widget</paramdef>
     <paramdef> </paramdef>
    </funcprototype>
   </callback>
   <shortdesc>
    
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </signal>
<!-- widget_signals[DEBUG_MSG] =
    gtk_signal_new ("debug_msg",
		    GTK_RUN_LAST | GTK_RUN_ACTION,
		    object_class->type,
		    GTK_SIGNAL_OFFSET (GtkWidgetClass, debug_msg),
		    gtk_marshal_NONE__STRING,
		    GTK_TYPE_NONE, 1,
		    GTK_TYPE_STRING); -->
 </signals>

 <properties>

  <property id="gtk.gtkwidget.property.style" type="ro">
   <propname>style</propname>
   <proptype>GtkStyle</proptype>
   <shortdesc>
    Style associated with a widget's 
    <propname class="GtkWidget">window</propname>.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </property>

  <property id="gtk.gtkwidget.property.window" type="ro">
   <propname>window</propname>
   <proptype>GdkWindow</proptype>
   <shortdesc>
    Underlying GdkWindow that captures events on a widget.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </property>

  <property id="gtk.gtkwidget.property.allocation" type="ro">
   <propname>allocation</propname>
   <proptype>GtkAllocation</proptype>
   <shortdesc>
    Size and position allocated to a widget.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </property>

  <property id="gtk.gtkwidget.property.state" type="ro">
   <propname>state</propname>
   <proptype>GtkStateType</proptype>
   <shortdesc>
    Degree of response to events.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </property>

  <property id="gtk.gtkwidget.property.parent" type="ro">
   <propname>parent</propname>
   <proptype>GtkWidget</proptype>
   <shortdesc>
    A widget's parent.
   </shortdesc>
   <desc>
    <simpara>
     
    </simpara>
   </desc>
  </property>

 </properties>

</classentry>
