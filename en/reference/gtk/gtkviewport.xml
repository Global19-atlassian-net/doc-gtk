<?xml version="1.0" encoding="ISO-8859-1" ?>
<classentry id="gtk.gtkviewport">
 <classmeta>
  <classtitle>GtkViewport</classtitle>
  <classparent>GtkBin</classparent>
  <shortdesc>
   Provides scrolling capability for non-scrolling aware widgets.
  </shortdesc>
  <desc>
   <simpara>
    The <classname>GtkViewport</classname> object is only used alongside a 
    <classname>GtkScrolledWindow</classname>, and provides scrolling 
    capability where the child widget being added to a scrolled window is
    not otherwise scrollable.
   </simpara>
   <simpara>
    It is not possible in most cases to use it outside this context, as its
    adjustment values are set internally by the child's sizing policies and
    can neither be overridden manually nor used directly.  Note that 
    directional keybindings in a non-scrolling aware widget are not usually
    bound to any adjustment value by default; the 
    <classname>GtkViewport</classname> simply allows the use of scrollbars
    with such a widget.  The exception that proves this rule is 
    <classname>GtkList</classname>, which is set up so that it can be made
    to be scrollable via the keyboard if it is added to a 
    <classname>GtkViewport</classname>.
   </simpara>
   <simpara>
    In most circumstances, it is easier to construct the viewport object by
    using the convenience method 
    <function class="GtkScrolledWindow">add_with_viewport</function> 
    rather than by using its own constructor.
   </simpara>
  </desc>
 </classmeta>

 <constructor id="gtk.gtkviewport.constructor">
  <funcsynopsis>
   <funcprototype>
    <funcdef> <function>GtkViewport</function></funcdef>
    <paramdef>
     <classname>GtkAdjustment</classname> 
     <parameter><optional>hadjustment = NULL</optional></parameter>
    </paramdef>
    <paramdef>
     <classname>GtkAdjustment</classname> 
     <parameter><optional>vadjustment = NULL</optional></parameter>
    </paramdef>
   </funcprototype>
  </funcsynopsis>
  <shortdesc>
   Creates a scrollable container.
  </shortdesc>
  <desc>
   <simpara>
    You should rarely need to construct a <classname>GtkViewport</classname> 
    directly, as its main use is where a 
    <classname>GtkScrolledWindow</classname> needs a scrollable widget as its
    child - which situation is catered for with the method 
    <function class="GtkScrolledWindow">add_with_viewport</function>, 
    saving three or four coding lines.
   </simpara>
   <para>
    <example>
     <title>Creating a <classname>GtkViewport</classname> the hard way</title>
     <programlisting role="php">
<![CDATA[
<?php

dl('php_gtk.'.(strstr(PHP_OS, 'WIN') ? 'dll' : 'so'));

/* set up a window */
$window = &amp;new GtkWindow();
$window-&gt;set_position(GTK_WIN_POS_CENTER);
$window-&gt;connect_object('destroy', array('gtk', 'main_quit'));

/* set up the scrolled window and add it to the main window,
   sizing it if necessary. */
$scrolledwindow = &amp;new GtkScrolledWindow();
$scrolledwindow-&gt;set_usize(150, 150);
$window-&gt;add($scrolledwindow);

/* create the viewport */
$viewport = &amp;new GtkViewport();
$viewport-&gt;set_shadow_type(GTK_SHADOW_ETCHED_OUT);

/* create a box container and add child widget or widgets to it - because
   as with most widgets, a GtkCalendar has no adjustment-friendly focus
   internals, whereas a box container does */
$box = &amp;new GtkVBox();
$calendar = &amp;new GtkCalendar();
$box-&gt;pack_start($calendar, false);

/* add the box to the viewport, and the viewport to the scrolled window */
$viewport-&gt;add($box);
$scrolledwindow-&gt;add($viewport);

$box-&gt;show_all();
$window-&gt;show_all();

gtk::main();

?>
]]>
     </programlisting>
    </example>
   </para>
  </desc>
 </constructor>

 <methods>

  <method id="gtk.gtkviewport.method.get_hadjustment">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkAdjustment</classname> 
      <function>get_hadjustment</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the horizontal adjustment object.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkViewport">get_hadjustment</function> 
     returns the <classname>GtkAdjustment</classname> object that is
     used in horizontal scrolling.
    </simpara>
   </desc>
  </method>

  <method id="gtk.gtkviewport.method.get_vadjustment">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GtkAdjustment</classname> 
      <function>get_vadjustment</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the vertical adjustment object.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GtkViewport">get_vadjustment</function> 
     returns the <classname>GtkAdjustment</classname> object that is
     used in vertical scrolling.
    </simpara>
   </desc>
  </method>

  <!-- DELETED set_hadjustment(), set_vadjustment() - these are set internally
  and cannot be overwritten.  sf mar 02 -->

  <method id="gtk.gtkviewport.method.set_shadow_type">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_shadow_type</function></funcdef>
     <paramdef>
      <enumname>GtkShadowType</enumname> 
      <parameter>type</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the shadow style on the viewport's border.
   </shortdesc>
   <desc>
    <simpara>
     Sets the shadow style of the border area around a 
     <classname>GtkViewport</classname> to one of five possible
     <enumname>GtkShadowType</enumname> values.
    </simpara>
    <simpara>
     The default setting is <literal>GTK_SHADOW_IN</literal>.
    </simpara>
   </desc>
  </method>

 </methods>

</classentry>
