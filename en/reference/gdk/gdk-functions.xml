<?xml version="1.0" encoding="ISO-8859-1" ?>
<refentry id="gdk.functions">
 <refmeta>
  <refentrytitle>Misc GDK Functions</refentrytitle>
  <shortdesc>
   Static functions in GDK.
  </shortdesc>
 </refmeta>

  <method id="gdk.method.atom_intern">
   <funcsynopsis>
    <funcprototype>
     <funcdef>GdkAtom <function>gdk::atom_intern</function></funcdef>
     <paramdef>string <parameter>atom_name</parameter></paramdef>
     <paramdef>int 
      <parameter><optional>only_if_exists = FALSE</optional></parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.beep">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::beep</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emits a sound.
   </shortdesc>
   <desc>
    <simpara>
     This function causes a warning sound to be emitted.  The precise
     nature of the sound is system and setup dependant.
    </simpara>
   </desc>
  </method>

  <method id="gdk.method.colormap_new">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkColormap</classname> 
      <function>gdk::colormap_new</function>
     </funcdef>
     <paramdef>
      <classname>GdkVisual</classname> 
      <parameter>visual</parameter>
     </paramdef>
     <paramdef>bool <parameter>allocate</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Creates a new <classname>GdkColormap</classname>.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.colormap_get_system">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkColormap</classname> 
      <function>gdk::colormap_get_system</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the system colormap.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.colormap_get_system_size">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>gdk::colormap_get_system_size</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the size of the system colormap.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.color_parse">
   <funcsynopsis>
    <funcprototype>
     <funcdef>GdkColor <function>gdk::color_parse</function></funcdef>
     <paramdef>string <parameter>color_spec</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Creates a <classname>GdkColor</classname> from a color specification.
   </shortdesc>
   <desc>
    <simpara>
     This function creates a new <classname>GdkColor</classname> structure
     and fills it according to the color named in the 
     <parameter>color_spec</parameter> parameter.  The string that is passed
     as the parameter can be the hex triplet version of the color, e.g. 
     <literal>'#FF0000'</literal>, or the equivalent color name linked in 
     <filename>rgb.txt</filename>, e.g. <literal>'red'</literal>.
    </simpara>
    <para>
     Win32 users will not be able to find that file, as it is compiled. 
     There is a good <filename>rgb.txt</filename> reference page 
     <ulink url="&url.rgbtxt;">here</ulink>.
    </para>
   </desc>
  </method>

  <method id="gdk.method.cursor_new">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkCursor</classname> 
      <function>gdk::cursor_new</function>
     </funcdef>
     <paramdef>
      <enumname>GdkCursorType</enumname> 
      <parameter>cursor_type</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Creates a new <classname>GdkCursor</classname>.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.cursor_new_from_pixmap">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkCursor</classname> 
      <function>gdk::cursor_new_from_pixmap</function>
     </funcdef>
     <paramdef>
      <classname>GdkPixmap</classname> 
      <parameter>source</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkPixmap</classname> 
      <parameter>mask</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkColor</classname> 
      <parameter>fg</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkColor</classname> 
      <parameter>bg</parameter>
     </paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Creates a new <classname>GdkCursor</classname> using a pixmap.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.drag_status">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::drag_status</function></funcdef>
     <paramdef>
      <classname>GdkDragContext</classname> 
      <parameter>context</parameter>
     </paramdef>
     <paramdef>
      <enumname>GdkDragAction</enumname> 
      <parameter>action</parameter>
     </paramdef>
     <paramdef>int <parameter>time</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.draw_arc">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::draw_arc</function></funcdef>
     <paramdef>GdkWindow <parameter>drawable</parameter></paramdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>int <parameter>filled</parameter></paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
     <paramdef>int <parameter>angle1</parameter></paramdef>
     <paramdef>int <parameter>angle2</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Draws an arc.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.draw_gray_image">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::draw_gray_image</function></funcdef>
     <paramdef>GdkWindow <parameter>drawable</parameter></paramdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
     <paramdef>
      <enumname>GdkRgbDither</enumname> 
      <parameter>dith</parameter>
     </paramdef>
     <paramdef>string <parameter>buf</parameter></paramdef>
     <paramdef>int <parameter>rowstride</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.draw_line">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::draw_line</function></funcdef>
     <paramdef>GdkWindow <parameter>drawable</parameter></paramdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>int <parameter>x1</parameter></paramdef>
     <paramdef>int <parameter>y1</parameter></paramdef>
     <paramdef>int <parameter>x2</parameter></paramdef>
     <paramdef>int <parameter>y2</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.draw_pixmap">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::draw_pixmap</function></funcdef>
     <paramdef>GdkWindow <parameter>drawable</parameter></paramdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>GdkWindow <parameter>src</parameter></paramdef>
     <paramdef>int <parameter>xsrc</parameter></paramdef>
     <paramdef>int <parameter>ysrc</parameter></paramdef>
     <paramdef>int <parameter>xdest</parameter></paramdef>
     <paramdef>int <parameter>ydest</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.draw_point">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::draw_point</function></funcdef>
     <paramdef>GdkWindow <parameter>drawable</parameter></paramdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.draw_rectangle">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::draw_rectangle</function></funcdef>
     <paramdef>GdkWindow <parameter>drawable</parameter></paramdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>int <parameter>filled</parameter></paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Draws a rectangle.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.draw_rgb_32_image">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::draw_rgb_32_image</function></funcdef>
     <paramdef>GdkWindow <parameter>drawable</parameter></paramdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
     <paramdef>
      <enumname>GdkRgbDither</enumname> 
      <parameter>dith</parameter>
     </paramdef>
     <paramdef>string <parameter>buf</parameter></paramdef>
     <paramdef>int <parameter>rowstride</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.draw_rgb_image">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::draw_rgb_image</function></funcdef>
     <paramdef>GdkWindow <parameter>drawable</parameter></paramdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
     <paramdef>
      <enumname>GdkRgbDither</enumname> 
      <parameter>dith</parameter>
     </paramdef>
     <paramdef>string <parameter>rgb_buf</parameter></paramdef>
     <paramdef>int <parameter>rowstride</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.draw_rgb_image_dithalign">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void 
      <function>gdk::draw_rgb_image_dithalign</function>
     </funcdef>
     <paramdef>GdkWindow <parameter>drawable</parameter></paramdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
     <paramdef>
      <enumname>GdkRgbDither</enumname> 
      <parameter>dith</parameter>
     </paramdef>
     <paramdef>string <parameter>rgb_buf</parameter></paramdef>
     <paramdef>int <parameter>rowstride</parameter></paramdef>
     <paramdef>int <parameter>xdith</parameter></paramdef>
     <paramdef>int <parameter>ydith</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.draw_string">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::draw_string</function></funcdef>
     <paramdef>GdkWindow <parameter>drawable</parameter></paramdef>
     <paramdef>
      <classname>GdkFont</classname> 
      <parameter>font</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>string <parameter>string</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.draw_text">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::draw_text</function></funcdef>
     <paramdef>GdkWindow <parameter>drawable</parameter></paramdef>
     <paramdef>
      <classname>GdkFont</classname> 
      <parameter>font</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>string <parameter>text</parameter></paramdef>
     <paramdef>int <parameter>text_length</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.flush">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::flush</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.font_load">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkFont</classname> 
      <function>gdk::font_load</function>
     </funcdef>
     <paramdef>string <parameter>font_name</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Loads the given font.
   </shortdesc>
   <desc>
    <simpara>
     This method loads a font_name, which must be given in the form of an 
     <emphasis>X Logical Font Description</emphasis> 
     (<acronym>XLFD</acronym>).
    </simpara>
    <simpara>
     The <acronym>XLFD</acronym> is a way of describing a font that is
     completely system-independant.  It contains 14 fields, most of which
     can be represented by a wildcard * in order to allow flexibility when
     a match is being sought - the exceptions are 
     <literal>addedstyle</literal>, which doesn't need one, and 
     <literal>registry</literal>, which is the only mandatory field.  The
     description opens with a hyphen, <literal>-</literal>, and each field
     is also separated by a hyphen.
    </simpara>
    <simpara>
     If you need more information on fonts than is given here, the full
     XWindows definition is available online through the relevant 
     <ulink url="&url.xlfd;">XWindows documentation</ulink>.
    </simpara>
    <para>
     <simplelist>
      <member>
       foundry xxx (where the font was created.  'unknown' is okay)
      </member>
      <member>
       family xxx (e.g. Arial)
      </member>
      <member>
       weight xxx (e.g. bold, medium)
      </member>
      <member>
       slant x (r - roman, i = italic, o = oblique)
      </member>
      <member>
       setwidth xxx (e.g. normal, condensed)
      </member>
      <member>
       addedstyle xxx (e.g. serif, sans.  Leave blank for none)
      </member>
      <member>
       pixelsize N (set either this or pointsize, not both)
      </member>
      <member>
       pointsize N (point size, e.g. 120)
      </member>
      <member>
       resx N (x res the font was created for, in dots per inch)
      </member>
      <member>
       resy N (y res the font was created for, in dots per inch)
      </member>
      <member>
       space x (m = monospaced, p = proportional, c = cell)
      </member>
      <member>
       averagewidth N (average character width in pixels.  0 if unknown)
      </member>
      <member>
       registry xxx (e.g. utf, iso8859 or adobe)
      </member>
      <member>
       encoding xxx (e.g. 1 or 2 (for iso8859) or fontspecific)
      </member>
     </simplelist>
    </para>
    <para>
     A typical font-load would look something like this:
     <informalexample>
      <programlisting role="php">
$font = 
gdk::font_load('-unknown-Arial-normal-r-normal--*-120-96-96-p-0-iso8859-1');
      </programlisting>
     </informalexample>
    </para>
    <note>
     <simpara>
      Font information in the <acronym>XLFD</acronym> format can be
      retrieved from any system by utilising the 
      <classname>GtkFontSelection</classname> or 
      <classname>GtkFontSelectionDialog</classname> widgets.
     </simpara>
    </note>
    <simpara>
     Note that there are sizing issues in <classname>GdkFont</classname> in
     the version of GTK+ currently used in PHP-GTK under win32.  As a result, 
     <emphasis>the point size should always be set in win32</emphasis> - 
     using the pixel size may give unexpected results.
    </simpara>
   </desc>
  </method>

  <method id="gdk.method.fontset_load">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkFont</classname> 
      <function>gdk::fontset_load</function>
     </funcdef>
     <paramdef>string <parameter>fontset_name</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Loads a selection of fonts described as a fontset.
   </shortdesc>
   <desc>
    <simpara>
     This method is used when any of a range of fonts would be acceptable. 
     Usually, that would be when internationalization is an issue.  It could
     also be useful anywhere that some flexibility over the choice of font
     is needed.
    </simpara>
    <simpara>
     Load in exactly the same way as with 
     <function>gdk::font_load()</function>, separating each of the potential
     fonts to be used with a comma.  The system running the application will
     use the first font in the set that achieves a match.
    </simpara>
    <simpara>
     In win32, the <function>fontset_load()</function> method is used
     internally regardless of whether this or 
     <function>gdk::font_load()</function> is called.
    </simpara>
   </desc>
  </method>

  <method id="gdk.method.get_display">
   <funcsynopsis>
    <funcprototype>
     <funcdef>string <function>gdk::get_display</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.input_remove">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::input_remove</function></funcdef>
     <paramdef>int <parameter>tag</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.pixmap_colormap_create_from_xpm">
   <funcsynopsis>
    <funcprototype>
     <funcdef>XXX 
      <function>gdk::pixmap_colormap_create_from_xpm</function>
     </funcdef>
     <paramdef>XXX</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.pixmap_colormap_create_from_xpm_d">
   <funcsynopsis>
    <funcprototype>
     <funcdef>XXX 
      <function>gdk::pixmap_colormap_create_from_xpm_d</function>
     </funcdef>
     <paramdef>XXX</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.pixmap_create_from_xpm">
   <funcsynopsis>
    <funcprototype>
     <funcdef><classname>GdkPixmap</classname> 
      <function>gdk::pixmap_create_from_xpm</function>
     </funcdef>
     <paramdef><classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef><classname>GdkColor</classname> 
      <parameter><optional>transparent_color</optional></parameter>
     </paramdef>
     <paramdef>resource <parameter>filename</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Creates a <classname>GdkPixmap</classname> from an xpm file.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.pixmap_create_from_xpm_d">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkPixmap</classname> 
      <function>gdk::pixmap_create_from_xpm_d</function>
     </funcdef>
     <paramdef>XXX</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Creates a <classname>GdkPixmap</classname> from inline data.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.pointer_is_grabbed">
   <funcsynopsis>
    <funcprototype>
     <funcdef>bool <function>gdk::pointer_is_grabbed</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.rgb_gc_set_background">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::rgb_gc_set_background</function></funcdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>int <parameter>rgb</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.rgb_gc_set_foreground">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::rgb_gc_set_foreground</function></funcdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>int <parameter>rgb</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.rgb_get_cmap">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkColormap</classname> 
      <function>gdk::rgb_get_cmap</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.rgb_get_visual">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkVisual</classname> 
      <function>gdk::rgb_get_visual</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.rgb_xpixel_from_rgb">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>gdk::rgb_xpixel_from_rgb</function></funcdef>
     <paramdef>int <parameter>rgb</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.screen_height">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>gdk::screen_height</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns screen height in pixels.
   </shortdesc>
   <desc>
    <simpara>
     This function returns the screen height in pixels.  This can be
     used in size-setting methods to ensure that containers are sized
     relative to the screen resolution.
    </simpara>
   </desc>
  </method>

  <method id="gdk.method.screen_height_mm">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>gdk::screen_height_mm</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns screen height in mm.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.screen_width">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>gdk::screen_width</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns screen width in pixels.
   </shortdesc>
   <desc>
    <simpara>
     This function returns the screen width in pixels.  This can be
     used in size-setting methods to ensure that containers are sized
     relative to the screen resolution.
    </simpara>
   </desc>
  </method>

  <method id="gdk.method.screen_width_mm">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>gdk::screen_width_mm</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns screen width in mm.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.threads_enter">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::threads_enter</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.threads_leave">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::threads_leave</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.visual_get_best">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkVisual</classname> 
      <function>gdk::visual_get_best</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.visual_get_best_with_both">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkVisual</classname> 
      <function>gdk::visual_get_best_with_both</function>
     </funcdef>
     <paramdef>int <parameter>depth</parameter></paramdef>
     <paramdef>
      <enumname>GdkVisualType</enumname> 
      <parameter>visual_type</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.visual_get_best_with_depth">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkVisual</classname> 
      <function>gdk::visual_get_best_with_depth</function>
     </funcdef>
     <paramdef>int <parameter>depth</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.visual_get_best_with_type">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkVisual</classname> 
      <function>gdk::visual_get_best_with_type</function>
     </funcdef>
     <paramdef>
      <enumname>GdkVisualType</enumname> 
      <parameter>visual_type</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.visual_get_system">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkVisual</classname> 
      <function>gdk::visual_get_system</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

</refentry>
