<?xml version="1.0" encoding="ISO-8859-1" ?>
<classentry id="gdk.gdkfont">
 <classmeta>
  <classtitle>GdkFont</classtitle>
  <classparent></classparent>
  <shortdesc>
   Structure holding font information.
  </shortdesc>
  <desc>
   <simpara>
    A <classname>GdkFont</classname> is a data structure containing
    basic information about a font, in terms of its 
    <propname class="GdkFont">type</propname>, 
    <propname class="GdkFont">ascent</propname> and 
    <propname class="GdkFont">descent</propname>.  There is no constructor,
    as the fonts available are provided by the system.  The 
    <classname>GdkFont</classname> structure simply allows a new font to be
    loaded and queried.
   </simpara>
   <simpara>
    To load a font, use <function>gdk::font_load()</function>.  To load a
    fontset - a range of different fonts - use 
    <function>gdk::fontset_load()</function>.  Either function will return
    a single <classname>GdkFont</classname>.
   </simpara>
   <note>
    <simpara>
     Under win32 currently, all fonts are of the type 
     <literal>GDK_FONT_FONTSET</literal>, regardless of the loading method.
    </simpara>
   </note>
  </desc>
 </classmeta>

 <methods>

  <method id="gdk.gdkfont.method.extents">
   <funcsynopsis>
    <funcprototype>
     <funcdef>array <function>extents</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns an array of sizing information.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GdkFont">extents()</function> returns an array
     of five integers representing the left bearing, right bearing, width,
     ascent and descent of the string using the font, or the font itself, 
     as appropriate.
    </simpara>
    <simpara>
     The left and right bearing are the distance from the drawing origin
     to the leftmost and rightmost extent of the drawn string respectively, 
     measured in pixels.
    </simpara>
    <simpara>
     The width is the length of the current string, measured in pixels.  This
     measurement supplies information regarding where to begin drawing the
     next string, if there is more than one.  The returned integer may be
     greater or smaller than the value of the right bearing.
    </simpara>
    <simpara>
     The ascent and descent are the pixel measurements of the extents of
     the font above and below the baseline.
    </simpara>
    <simpara>
     If you're working with unix, all the above should be correct.  If you're
     using win32, the left bearing will always be <literal>0</literal>, the
     right bearing will match the width, the ascent is actually the
     line-height + 1 pixel, and the descent - even more strangely - is the
     descent + 1 pixel.  Use <classname>GdkFont</classname> properties if you
     need the <propname class="GdkFont">ascent</propname> and 
     <propname class="GdkFont">descent</propname> values under win32.
    </simpara>
   </desc>
  </method>

  <method id="gdk.gdkfont.method.measure">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>measure</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    The drawn width of a text-string, measured in pixels.
   </shortdesc>
   <desc>
    <simpara>
     The return from this method is the equivalent of the right bearing
     returned by <function class="GdkFont">extents()</function>.  It is the
     size in pixels of the width of the string, to the point where the final
     part of the final character in the string is drawn.
    </simpara>
    <simpara>
     If you need the logical width of the string - that is, to the point
     where the next character should be inserted - use 
     <function class="GdkFont">width()</function> instead.
    </simpara>
   </desc>
  </method>

  <method id="gdk.gdkfont.method.height">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>height</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
     The <function class="GdkFont">height()</function> method is a
     particularly useful one.  It returns the line height, measured
     in pixels.
   </shortdesc>
   <desc>
    <simpara>
     The return value of <function class="GdkFont">height()</function> is
     arrived at by summing the values of <parameter>ascent</parameter> and
     <parameter>descent</parameter> returned by 
     <function class="GdkFont">extents()</function>.
    </simpara>
    <simpara>
     Under win32, this is a bogus value.  Add the values returned by the
     <classname>GdkFont</classname> properties 
     <propname class="GdkFont">ascent</propname> and 
     <propname class="GdkFont">descent</propname> to get the correct value
     for logical height if you are using or intending to port to Windows.
    </simpara>
    <simpara>
     The value of the height is the line-height, given in pixels, and
     represents the logical space required by a line.  If you are using
     this measurement to calculate the size of a text box, you will need to
     add 6 pixels to the total to allow for the borders of the text widget.
    </simpara>
   </desc>
  </method>

  <method id="gdk.gdkfont.method.width">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>width</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    The logical width of a text string, measured in pixels.
   </shortdesc>
   <desc>
    <simpara>
     <function class="GdkFont">width()</function> returns the logical width
     of the text string, measured in pixels.  The logical width includes the
     area up to where the next character should be drawn.
    </simpara>
    <simpara>
     This method is completely broken in Windows, and will always return
     the right bearing measurement instead.
    </simpara>
   </desc>
  </method>

 </methods>

 <properties>

  <property id="gdk.gdkfont.property.type" type="ro">
   <propname>type</propname>
   <proptype>int</proptype>
   <shortdesc>
    Font or fontset type.
   </shortdesc>
   <desc>
    <simpara>
     The returned integer may have a value of <literal>0</literal>, 
     indicating that the font was loaded as a unique font, or of 
     <literal>1</literal>, indicating that the font was loaded as part
     of a fontset.  See <enumname>GdkFontType</enumname>.
    </simpara>
    <simpara>
     Note that under win32 this property will always have a value of 
     <literal>1</literal>, as all fonts are loaded as fontsets.
    </simpara>
   </desc>
  </property>

  <property id="gdk.gdkfont.property.ascent" type="ro">
   <propname>ascent</propname>
   <proptype>int</proptype>
   <shortdesc>
    Baseline to top of logical area.
   </shortdesc>
   <desc>
    <simpara>
     The <propname class="GdkFont">ascent</propname> is the distance
     between a font's baseline and the top of the logical space taken
     up by that font.
    </simpara>
    <simpara>
     Add this to the <propname class="GdkFont">descent</propname> to
     obtain the full line-height value in pixels.
    </simpara>
   </desc>
  </property>

  <property id="gdk.gdkfont.property.descent" type="ro">
   <propname>descent</propname>
   <proptype>int</proptype>
   <shortdesc>
    Baseline to bottom of logical area.
   </shortdesc>
   <desc>
    <simpara>
     The <propname class="GdkFont">descent</propname> is the distance
     between a font's baseline and the bottom of the logical space taken
     up by that font.
    </simpara>
   </desc>
  </property>

 </properties>

</classentry>
