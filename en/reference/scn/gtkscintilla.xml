<?xml version="1.0" encoding="ISO-8859-1" ?>
<classentry id="scn.gtkscintilla">
 <classmeta>
  <classtitle>GtkScintilla</classtitle>
  <classparent>GtkFrame</classparent>
  <shortdesc>
    <classname>GtkScintilla</classname> is an advanced text edition component with
    code completion, sintax highlight and others.
  </shortdesc>
  <desc>
   <simpara>
    <classname>GtkScintilla</classname> is an advanced widget for code edition.
    It's a component with lots of resources that make it a great choice to write code editors.
    <classname>GtkScintilla</classname> provides advanced features like code completion,
    sintax highlight, caret lines, line numbers, besides lots of text controls, giving
    strong powers to the programmer.
    <classname>GtkScintilla</classname> inherits from <classname>GtkFrame</classname>,
    so you can embbed <classname>GtkScintilla</classname> object inside another containers
    like <classname>GtkWindow</classname>, <classname>GtkVBox</classname>, <classname>GtkHBox</classname>,
    <classname>GtkFrame</classname> and others.
   </simpara>
  </desc>
 </classmeta>

 <constructor id="scn.gtkscintilla.constructor">
  <funcsynopsis>
   <funcprototype>
    <funcdef> <function>GtkScintilla</function></funcdef>
    <paramdef>void</paramdef>
   </funcprototype>
  </funcsynopsis>
  <shortdesc>
        Creates the <classname>GtkScintilla</classname> text area.
  </shortdesc>
  <desc>
      <simpara>
          Creates the <classname>GtkScintilla</classname> text area.
      </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
    $scintilla = new GtkScintilla;
]]>
        </programlisting>
     </informalexample>
  </desc>
 </constructor>

 <methods>

  <method id="scn.gtkscintilla.method.find_text">
   <funcsynopsis>
    <funcprototype>
    <funcdef>int <function>find_text</function></funcdef>
    <paramdef>int <parameter>FLAGS</parameter></paramdef>
    <paramdef>string <parameter>search</parameter></paramdef>
    <paramdef>int <parameter>start</parameter></paramdef>
    <paramdef>int <parameter>end</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
	Finds a portion of text in <classname>GtkScintilla</classname>.
   </shortdesc>
   <desc>
     <simpara>
        <function class="GtkScintilla">find_text</function>
        Finds a portion of text in <classname>GtkScintilla</classname>.
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
$flags = SCINTILLA_FIND_DOWN +
         SCINTILLA_FIND_WHOLE_WORDS +
         SCINTILLA_FIND_MATCH_CASE +
         SCINTILLA_FIND_WHOLE_WORDS +
         SCINTILLA_FIND_WORD_START +
         SCINTILLA_FIND_REGEXP;

$what = 'text to find';

// start and end positions...
$start = 0;
$end = $scintilla->get_length();
$result = $scintilla->find_text($flags, $what, $start, $end);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.add_text">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void<function>add_text</function></funcdef>
     <paramdef>string<parameter>text</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Add the string at the end of text area.
   </shortdesc>
   <desc>
     <simpara>
        <function class="GtkScintilla">add_text</function>
        add the string at the end of text area.
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
$scintilla->add_text("line with break \n");
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.insert_text">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>insert_text</function></funcdef>
     <paramdef>int <parameter>pos</parameter></paramdef>
     <paramdef>string <parameter>text</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
	Inserts text in the text area of <classname>GtkScintilla</classname>.
   </shortdesc>
   <desc>
    <simpara>
        Inserts text in the text area of <classname>GtkScintilla</classname>.
    </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
// inserting text at the begin of GtkScintilla
$scintilla->insert_text(-1, 'inserting text...');
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.clear_all">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>clear_all</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Clear all text area.
   </shortdesc>
   <desc>
       <simpara>
           Clear all text area.
       </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
// clear all text area...
$scintilla->clear_all();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.clear_document_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>clear_document_style</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_length">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_length</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Gets the length of the text inside the text area.
   </shortdesc>
   <desc>
       <simpara>
       Gets the length of the text inside the text area.
       </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
// get the text's lenght
echo $scintilla->get_lenght();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_current_pos">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_current_pos</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Gets the current position of cursor. It means the character position inside the text.
   </shortdesc>
   <desc>
       <simpara>
           Gets the current position of cursor. It means the character position inside the text.
       </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
// echo the current cursor position.
echo $scintilla->get_current_pos();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_char_at">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_char_at</function></funcdef>
     <paramdef>int <parameter>pos</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Return the character that is located at the specific position.
   </shortdesc>
   <desc>
       <simpara>
       Return the character that is located at the specific position.
       </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
// echo the current character at the cursor position.
$position = $scintilla->get_current_pos();
$character = $scintilla->get_char_at($position);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_anchor">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_anchor</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_style_at">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_style_at</function></funcdef>
     <paramdef>int <parameter>pos</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.redo">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>redo</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Redo is like "redo" action of every text editor.
        Redo does again some task undone by "Undo" operation.
   </shortdesc>
   <desc>
       <simpara>
        Redo is like "redo" action of every text editor.
        Redo does again some task undone by "Undo" operation.
        You can design a "Edit" menu with many options like that
        linked with one callback like this one:
       </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
// redo
$scintilla->redo();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_undo_collection">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_undo_collection</function></funcdef>
     <paramdef>int <parameter>collect_undo</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.select_all">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>select_all</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Select all text inside the text area.
   </shortdesc>
   <desc>
       <simpara>
           Select all text inside the text area.
       </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
// select all the text
$scintilla->select_all();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_save_point">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_save_point</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.marker_line_from_handle">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>marker_line_from_handle</function></funcdef>
     <paramdef>int <parameter>handle</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.marker_delete_handle">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>marker_delete_handle</function></funcdef>
     <paramdef>int <parameter>handle</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_undo_collection">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_undo_collection</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_view_ws">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_view_ws</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_view_ws">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_view_ws</function></funcdef>
     <paramdef>int <parameter>view_ws</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.position_from_point">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>position_from_point</function></funcdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.goto_line">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>goto_line</function></funcdef>
     <paramdef>int <parameter>line</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        This method set the cursor position to the specific line.
   </shortdesc>
   <desc>
       <simpara>
        This method set the cursor position to the specific line.
       </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
// go to line 20...
$scintilla->goto_line(20);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.goto_pos">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>goto_pos</function></funcdef>
     <paramdef>int <parameter>pos</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        This method set the cursor position to the specific character position.
   </shortdesc>
   <desc>
       <simpara>
           This method set the cursor position to the specific character position.
       </simpara>

     <informalexample>
         <programlisting>
<![CDATA[
// go to 3 positions ahead...
$scintilla->goto_pos($this->get_current_pos() + 3);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_anchor">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_anchor</function></funcdef>
     <paramdef>int <parameter>pos_anchor</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_cur_line">
   <funcsynopsis>
    <funcprototype>
     <funcdef>array<function>get_cur_line</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Returns an array containing the current line string and the current column.
   </shortdesc>
   <desc>
    <simpara>
        Returns an array containing the current line string and the current column.
        The position "0" of array contain the entire line.
        The position "1" of array contain the current column.
    </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
$line = $scintilla->get_cur_line();
var_dump($line);
/*
array(2) {
  [0]=>
  string(6) "sdfsdf"
  [1]=>
  int(3)
}
*/
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_end_styled">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_end_styled</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.convert_eols">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>convert_eols</function></funcdef>
     <paramdef>int <parameter>eol_mode</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_eol_mode">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_eol_mode</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Return the current End of Line Mode. See <function class="GtkScintilla">set_eol_mode</function>.
   </shortdesc>
   <desc>
   <simpara>
       Return the current End of Line Mode. See <function class="GtkScintilla">set_eol_mode</function>.
   </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
echo $scintilla->get_eol_mode();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_eol_mode">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_eol_mode</function></funcdef>
     <paramdef>int <parameter>eol_mode</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Define the End of Line Mode.
   </shortdesc>
   <desc>
     <simpara>
        Define the End of Line Mode.
        This protocol dates back to the days of teletypewriters. CR stands for "carriage return" - the CR control character returned the print head ("carriage") to column 0 without advancing the paper. LF stands for "linefeed" - the LF control character advanced the paper one line without moving the print head. So if you wanted to return the print head to column zero (ready to print the next line) and advance the paper (so it prints on fresh paper), you need both CR and LF.
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
// GtkScintillaEolMode
define(  "SCINTILLA_EOL_CRLF" , 0 ); 
define(  "SCINTILLA_EOL_CR"   , 1 ); 
define(  "SCINTILLA_EOL_LF"   , 2 ); 

# CRLF = Carriage return + line feed
# CR   = Carriage return 
# LF   = Line feed

# Win32 uses CR+LF, Linux uses LF.

$scintilla->set_eol_mode(SCINTILLA_EOL_CRLF);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.start_styling">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>start_styling</function></funcdef>
     <paramdef>int <parameter>pos</parameter></paramdef>
     <paramdef>int <parameter>mask</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_styling">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_styling</function></funcdef>
     <paramdef>int <parameter>length</parameter></paramdef>
     <paramdef>int <parameter>style</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_buffered_draw">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_buffered_draw</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_buffered_draw">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_buffered_draw</function></funcdef>
     <paramdef>int <parameter>buffered</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_tab_width">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_tab_width</function></funcdef>
     <paramdef>int <parameter>tab_width</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Set the Tab Width.
   </shortdesc>
   <desc>
     <simpara>
         Set the Tab Width.
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
$scintilla->set_tab_width(4);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_tab_width">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_tab_width</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Gets the Tab Width.
   </shortdesc>
   <desc>
     <simpara>
       Gets the Tab Width.
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
echo $scintilla->get_tab_width();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_code_page">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_code_page</function></funcdef>
     <paramdef>int <parameter>code_page</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_use_palette">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_use_palette</function></funcdef>
     <paramdef>int <parameter>use_palette</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.marker_define">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>marker_define</function></funcdef>
     <paramdef>int <parameter>marker_number</parameter></paramdef>
     <paramdef>int <parameter>marker_symbol</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Define a specific symbol for a marker number.
   </shortdesc>
   <desc>
     <simpara>
        Define a specific symbol for a marker number.
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
# markers table of symbols
# 0 = little blob
# 1 = big blob
# 2 = triangle
# 3 = recangle (shaped)
# 4 - arrow 
# 5 = empty!
# 6 = triangle down
# 7 = minus sign
# 8 = small dot
# 9 = arrow right
#10 = arrow right

// defining marker 1...
$scintilla->marker_define(1,0);

// defining marker 2...
$scintilla->marker_define(2,2);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.marker_set_fore">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>marker_set_fore</function></funcdef>
     <paramdef>int <parameter>marker_number</parameter></paramdef>
     <paramdef>int <parameter>fore</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Set the Fore color of a marker, for markers table, see <function class="GtkScintilla">marker_define</function> 
   </shortdesc>
   <desc>
     <simpara>
        Set the Fore color of a marker, for markers table, see <function class="GtkScintilla">marker_define</function>  
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
// defining fore color of marker 1...
$scintilla->marker_set_fore(1, hexdec('FF0000'));

// defining fore color of marker 2...
$scintilla->marker_set_fore(1, hexdec('00FF00'));
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.marker_set_back">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>marker_set_back</function></funcdef>
     <paramdef>int <parameter>marker_number</parameter></paramdef>
     <paramdef>int <parameter>back</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Set the Background color of a marker, for markers table, see <function class="GtkScintilla">marker_define</function> 
   </shortdesc>
   <desc>
     <simpara>
        Set the Background color of a marker, for markers table, see <function class="GtkScintilla">marker_define</function>  
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
// defining background color of marker 1...
$scintilla->marker_set_back(1, hexdec('0000FF'));

// defining background color of marker 2...
$scintilla->marker_set_back(2, hexdec('0000FF'));
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.marker_add">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>marker_add</function></funcdef>
     <paramdef>int <parameter>line</parameter></paramdef>
     <paramdef>int <parameter>marker_number</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Add a Marker symbol in front of the line, for markers table, see <function class="GtkScintilla">marker_define</function> 
   </shortdesc>
   <desc>
     <simpara>
         Add a Marker symbol in front of the line, for markers table, see <function class="GtkScintilla">marker_define</function> 
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
// add the marker 1 at line 4...
$scintilla->marker_add(4, 1);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.marker_delete">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>marker_delete</function></funcdef>
     <paramdef>int <parameter>line</parameter></paramdef>
     <paramdef>int <parameter>marker_number</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Deletes a Marker symbol from the line, for markers table, see <function class="GtkScintilla">marker_define</function> 
   </shortdesc>
   <desc>
     <simpara>
         Deletes a Marker symbol from the line, for markers table, see <function class="GtkScintilla">marker_define</function>
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[

// removes the marker 1 from line 4...
$scintilla->marker_delete(4, 1);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.marker_delete_all">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>marker_delete_all</function></funcdef>
     <paramdef>int <parameter>marker_number</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Removes all line markers of a specific type, for markers table, see <function class="GtkScintilla">marker_define</function>
   </shortdesc>
   <desc>
     <simpara>
        Removes all line markers of a specific type, for markers table, see <function class="GtkScintilla">marker_define</function>
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
// adding marker 1 at line 4...
$scintilla->marker_add(4, 1);

// adding marker 1 at line 6...
$scintilla->marker_add(6, 1);

// adding marker 1 at line 8...
$scintilla->marker_add(8, 1);

// adding marker 2 at line 5...
$scintilla->marker_add(5, 2);

// removes all markers "1"...
$scintilla->marker_delete_all(1);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.marker_get">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>marker_get</function></funcdef>
     <paramdef>int <parameter>line</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.marker_next">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>marker_next</function></funcdef>
     <paramdef>int <parameter>line_start</parameter></paramdef>
     <paramdef>int <parameter>marker_mask</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.marker_previous">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>marker_previous</function></funcdef>
     <paramdef>int <parameter>line_start</parameter></paramdef>
     <paramdef>int <parameter>marker_mask</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_margin_type_n">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_margin_type_n</function></funcdef>
     <paramdef>int <parameter>margin</parameter></paramdef>
     <paramdef>int <parameter>margin_type</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_margin_type_n">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_margin_type_n</function></funcdef>
     <paramdef>int <parameter>margin</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_margin_width_n">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_margin_width_n</function></funcdef>
     <paramdef>int <parameter>margin</parameter></paramdef>
     <paramdef>int <parameter>pixel_width</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_margin_width_n">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_margin_width_n</function></funcdef>
     <paramdef>int <parameter>margin</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_margin_mask_n">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_margin_mask_n</function></funcdef>
     <paramdef>int <parameter>margin</parameter></paramdef>
     <paramdef>int <parameter>mask</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_margin_mask_n">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_margin_mask_n</function></funcdef>
     <paramdef>int <parameter>margin</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_margin_sensitive_n">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_margin_sensitive_n</function></funcdef>
     <paramdef>int <parameter>margin</parameter></paramdef>
     <paramdef>int <parameter>sensitive</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_margin_sensitive_n">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_margin_sensitive_n</function></funcdef>
     <paramdef>int <parameter>margin</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.style_clear_all">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>style_clear_all</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.style_set_fore">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>style_set_fore</function></funcdef>
     <paramdef>int <parameter>style</parameter></paramdef>
     <paramdef>int <parameter>fore</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Set the fore color of some style.
   </shortdesc>
   <desc>
     <simpara>
         Set the fore color of some style.
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
// GtkScintillaStyle
define(  "SCINTILLA_STYLE_DEFAULT",   32 );
$scintilla->style_set_fore(SCINTILLA_STYLE_DEFAULT, 0);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.style_set_back">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>style_set_back</function></funcdef>
     <paramdef>int <parameter>style</parameter></paramdef>
     <paramdef>int <parameter>back</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Set the background color of some style.
   </shortdesc>
   <desc>
     <simpara>
        Set the background color of some style.
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
// GtkScintillaStyle
define(  "SCINTILLA_STYLE_DEFAULT",   32 );
$scintilla->style_set_back(SCINTILLA_STYLE_DEFAULT, hexdec('0000FF'));
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.style_set_bold">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>style_set_bold</function></funcdef>
     <paramdef>int <parameter>style</parameter></paramdef>
     <paramdef>int <parameter>bold</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Define some style to be formated as bold.
   </shortdesc>
   <desc>
     <simpara>
         Define some style to be formated as bold.
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
$scintilla->style_set_bold(SCINTILLA_STYLE_DEFAULT, 1);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.style_set_italic">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>style_set_italic</function></funcdef>
     <paramdef>int <parameter>style</parameter></paramdef>
     <paramdef>int <parameter>italic</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Define some style to be formated as italic.
   </shortdesc>
   <desc>
     <simpara>
         Define some style to be formated as italic.
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
$scintilla->style_set_italic(SCINTILLA_STYLE_DEFAULT, 1);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.style_set_size">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>style_set_size</function></funcdef>
     <paramdef>int <parameter>style</parameter></paramdef>
     <paramdef>int <parameter>size_points</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Define the size of some style
   </shortdesc>
   <desc>
     <simpara>
         Define the size of some style
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
$scintilla->style_set_size(SCINTILLA_STYLE_DEFAULT, 20);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.style_set_font">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>style_set_font</function></funcdef>
     <paramdef>int <parameter>style</parameter></paramdef>
     <paramdef>string <parameter>font_name</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Set the font of some style.
   </shortdesc>
   <desc>
     <simpara>
             Set the font of some style.
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
// GtkScintillaStyle
define(  "SCINTILLA_STYLE_DEFAULT",   32 ); 
$scintilla->style_set_font(SCINTILLA_STYLE_DEFAULT, '-*-luxisans-medium-r-normal-*-18-*-*-*-*-*-*');
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.style_set_eol_filled">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>style_set_eol_filled</function></funcdef>
     <paramdef>int <parameter>style</parameter></paramdef>
     <paramdef>int <parameter>filled</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.style_reset_default">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>style_reset_default</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.style_set_underline">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>style_set_underline</function></funcdef>
     <paramdef>int <parameter>style</parameter></paramdef>
     <paramdef>int <parameter>underline</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Define some style to be formated as underlined.
   </shortdesc>
   <desc>
     <simpara>
         Define some style to be formated as underlined.
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
$scintilla->style_set_underline(SCINTILLA_STYLE_DEFAULT, 1);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.style_set_case">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>style_set_case</function></funcdef>
     <paramdef>int <parameter>style</parameter></paramdef>
     <paramdef>int <parameter>case_force</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Turn OFF/ON the Case Sensitive of some Style.
   </shortdesc>
   <desc>
     <simpara>
         Turn OFF/ON the Case Sensitive of some Style.
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
// TURN ON
$scintilla->style_set_case(SCINTILLA_STYLE_DEFAULT, 0);
// TURN OFF
$scintilla->style_set_case(SCINTILLA_STYLE_DEFAULT, 1);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.style_set_character_set">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>style_set_character_set</function></funcdef>
     <paramdef>int <parameter>style</parameter></paramdef>
     <paramdef>int <parameter>character_set</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_sel_fore">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_sel_fore</function></funcdef>
     <paramdef>int <parameter>use_setting</parameter></paramdef>
     <paramdef>int <parameter>fore</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Set the fore color of the selection.
   </shortdesc>
   <desc>
     <simpara>
         Set the fore color of the selection.
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
$scintilla->set_sel_fore(true, hexdec('FF0000'));
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_sel_back">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_sel_back</function></funcdef>
     <paramdef>int <parameter>use_setting</parameter></paramdef>
     <paramdef>int <parameter>back</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Set the back color of the selection.
   </shortdesc>
   <desc>
     <simpara>
         Set the back color of the selection.
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
$scintilla->set_sel_back(true, 11250603);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_caret_fore">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_caret_fore</function></funcdef>
     <paramdef>int <parameter>fore</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_caret_fore">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_caret_fore</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.clear_all_cmd_keys">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>clear_all_cmd_keys</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_styling_ex">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_styling_ex</function></funcdef>
     <paramdef>int <parameter>length</parameter></paramdef>
     <paramdef>string <parameter>styles</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.style_set_visible">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>style_set_visible</function></funcdef>
     <paramdef>int <parameter>style</parameter></paramdef>
     <paramdef>int <parameter>visible</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Define if some style will be visible or not.
   </shortdesc>
   <desc>
     <simpara>
        Define if some style will be visible or not.
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
// defining the style as invisible...
$scintilla->set_sel_visible(SCINTILLA_STYLE_DEFAULT, 0);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_caret_period">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_caret_period</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_caret_period">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_caret_period</function></funcdef>
     <paramdef>int <parameter>period_milliseconds</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_word_chars">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_word_chars</function></funcdef>
     <paramdef>string <parameter>characters</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.begin_undo_action">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>begin_undo_action</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Define when start to store the actions of the user for "Undo Action".
   </shortdesc>
   <desc>
     <simpara>
         Define when start to store the actions of the user for "Undo Action".
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
$scintilla->begin_undo_action();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.end_undo_action">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>end_undo_action</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Define when finish to store the actions of the user for "Undo Action".
   </shortdesc>
   <desc>
     <simpara>
         Define when finish to store the actions of the user for "Undo Action".
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
$scintilla->end_undo_action();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.indic_set_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>indic_set_style</function></funcdef>
     <paramdef>int <parameter>indic</parameter></paramdef>
     <paramdef>int <parameter>style</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.indic_get_style">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>indic_get_style</function></funcdef>
     <paramdef>int <parameter>indic</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.indic_set_fore">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>indic_set_fore</function></funcdef>
     <paramdef>int <parameter>indic</parameter></paramdef>
     <paramdef>int <parameter>fore</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.indic_get_fore">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>indic_get_fore</function></funcdef>
     <paramdef>int <parameter>indic</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_style_bits">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_style_bits</function></funcdef>
     <paramdef>int <parameter>bits</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_style_bits">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_style_bits</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_line_state">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_line_state</function></funcdef>
     <paramdef>int <parameter>line</parameter></paramdef>
     <paramdef>int <parameter>state</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_line_state">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_line_state</function></funcdef>
     <paramdef>int <parameter>line</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_max_line_state">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_max_line_state</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_caret_line_visible">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_caret_line_visible</function></funcdef>
     <paramdef>int <parameter>show</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Define if the selected line must have the background in another color.
   </shortdesc>
   <desc>
     <simpara>
         Define if the selected line must have the background in another color.
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
$scintilla->set_caret_line_visible(1);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_caret_line_visible">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_caret_line_visible</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Return if caret lines are visible or not.
   </shortdesc>
   <desc>
     <simpara>
         Return if caret lines are visible or not.
     </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
echo $scintilla->get_caret_line_visible();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_caret_line_back">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_caret_line_back</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Get the background color of Caret Lines.
   </shortdesc>
   <desc>
       <simpara>
           Get the background color of Caret Lines.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
echo $scintilla->get_caret_line_back();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_caret_line_back">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_caret_line_back</function></funcdef>
     <paramdef>int <parameter>back</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Changes the background color of the Caret Lines.
   </shortdesc>
   <desc>
       <simpara>
           Changes the background color of the Caret Lines.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->set_caret_line_back(9999204548);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.autoc_show">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>autoc_show</function></funcdef>
     <paramdef>int <parameter>len_entered</parameter></paramdef>
     <paramdef>string <parameter>item_list</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Show the auto-complation list.
   </shortdesc>
   <desc>
       <simpara>
           Show the auto-complation list.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$l = trim(implode("",array_unique(array("aaa ", "bbb "))));
$word='a';
GtkScintilla::autoc_show(strlen($word), $l);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.autoc_cancel">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>autoc_cancel</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.autoc_active">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>autoc_active</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.autoc_pos_start">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>autoc_pos_start</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.autoc_complete">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>autoc_complete</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.autoc_stops">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>autoc_stops</function></funcdef>
     <paramdef>string <parameter>character_set</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.autoc_set_separator">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>autoc_set_separator</function></funcdef>
     <paramdef>int <parameter>separator_character</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.autoc_get_separator">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>autoc_get_separator</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.autoc_select">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>autoc_select</function></funcdef>
     <paramdef>string <parameter>text</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.autoc_set_cancel_at_start">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>autoc_set_cancel_at_start</function></funcdef>
     <paramdef>int <parameter>cancel</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.autoc_get_cancel_at_start">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>autoc_get_cancel_at_start</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.autoc_set_fill_ups">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>autoc_set_fill_ups</function></funcdef>
     <paramdef>string <parameter>character_set</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.autoc_set_choose_single">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>autoc_set_choose_single</function></funcdef>
     <paramdef>int <parameter>choose_single</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.autoc_get_choose_single">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>autoc_get_choose_single</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.autoc_set_ignore_case">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>autoc_set_ignore_case</function></funcdef>
     <paramdef>int <parameter>ignore_case</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.autoc_get_ignore_case">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>autoc_get_ignore_case</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.user_list_show">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>user_list_show</function></funcdef>
     <paramdef>int <parameter>list_type</parameter></paramdef>
     <paramdef>string <parameter>item_list</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.autoc_set_auto_hide">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>autoc_set_auto_hide</function></funcdef>
     <paramdef>int <parameter>auto_hide</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.autoc_get_auto_hide">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>autoc_get_auto_hide</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_indent">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_indent</function></funcdef>
     <paramdef>int <parameter>indent_size</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Set indentation size.
   </shortdesc>
   <desc>
       <simpara>
           Set indentation size.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->set_indent(4);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_indent">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_indent</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Get Indentation Size.
   </shortdesc>
   <desc>
       <simpara>
           Get Indentation Size.
       </simpara>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_use_tabs">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_use_tabs</function></funcdef>
     <paramdef>int <parameter>use_tabs</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Set if the [TAB] key must use tabs or spaces.
   </shortdesc>
   <desc>
       <simpara>
           Set if the [TAB] key must use tabs or spaces.
       </simpara>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_use_tabs">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_use_tabs</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Get if the [TAB] key is using tabs or spaces.
   </shortdesc>
   <desc>
       <simpara>
           Get if the [TAB] key is using tabs or spaces.
       </simpara>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_line_indentation">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_line_indentation</function></funcdef>
     <paramdef>int <parameter>line</parameter></paramdef>
     <paramdef>int <parameter>indent_size</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Set the line indentation of some line.
   </shortdesc>
   <desc>
       <simpara>
           Set the line indentation of some line.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$cur_line = $scintilla->get_cur_line();
$scintilla->set_line_indentation($cur_line, 8);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_line_indentation">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_line_indentation</function></funcdef>
     <paramdef>int <parameter>line</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Get the Line indentation of some line.
   </shortdesc>
   <desc>
       <simpara>
           Get the Line indentation of some line.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
echo $scintilla->get_line_indentation($cur_line);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_line_indent_position">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_line_indent_position</function></funcdef>
     <paramdef>int <parameter>line</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_column">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_column</function></funcdef>
     <paramdef>int <parameter>pos</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Returns the column number of the character position.
   </shortdesc>
   <desc>
       <simpara>
           Returns the column number of the character position.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
// get the column number of position 40...
echo $scintilla->get_column(40);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_h_scroll_bar">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_h_scroll_bar</function></funcdef>
     <paramdef>int <parameter>show</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_h_scroll_bar">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_h_scroll_bar</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_indentation_guides">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_indentation_guides</function></funcdef>
     <paramdef>int <parameter>show</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Set wheather the indentation guides are visible or not.
   </shortdesc>
   <desc>
       <simpara>
           Set wheather the indentation guides are visible or not.
       </simpara>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_indentation_guides">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_indentation_guides</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Get wheather the indentation guides are visible or not.
   </shortdesc>
   <desc>
       <simpara>
           Get wheather the indentation guides are visible or not.
       </simpara>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_highlight_guide">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_highlight_guide</function></funcdef>
     <paramdef>int <parameter>column</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_highlight_guide">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_highlight_guide</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_line_end_position">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_line_end_position</function></funcdef>
     <paramdef>int <parameter>line</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_code_page">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_code_page</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_use_palette">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_use_palette</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_read_only">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_read_only</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_current_pos">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_current_pos</function></funcdef>
     <paramdef>int <parameter>pos</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_selection_start">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_selection_start</function></funcdef>
     <paramdef>int <parameter>pos</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Set the start of the selection (character position).
   </shortdesc>
   <desc>
       <simpara>
           Set the start of the selection (character position).
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->set_selection_start(100);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_selection_start">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_selection_start</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Get the begin of the selection (character position).
   </shortdesc>
   <desc>
       <simpara>
           Get the begin of the selection (character position).
       </simpara>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_selection_end">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_selection_end</function></funcdef>
     <paramdef>int <parameter>pos</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Set the end of the selection (character position).
   </shortdesc>
   <desc>
       <simpara>
           Set the end of the selection (character position).
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->set_selection_end(200);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_selection_end">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_selection_end</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Get the end of the selection (character position).
   </shortdesc>
   <desc>
       <simpara>
           Get the end of the selection (character position).
       </simpara>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_print_magnification">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_print_magnification</function></funcdef>
     <paramdef>int <parameter>magnification</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_print_magnification">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_print_magnification</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_print_colour_mode">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_print_colour_mode</function></funcdef>
     <paramdef>int <parameter>mode</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_print_colour_mode">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_print_colour_mode</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_first_visible_line">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_first_visible_line</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_line">
   <funcsynopsis>
    <funcprototype>
     <funcdef>string <function>get_line</function></funcdef>
     <paramdef>int <parameter>line</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Get the content of some line.
   </shortdesc>
   <desc>
       <simpara>
           Get the content of some line.
       </simpara>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_line_count">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_line_count</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Get the quantity of lines of the text area.
   </shortdesc>
   <desc>
       <simpara>
           Get the quantity of lines of the text area.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
echo $scintilla->get_line_count();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_margin_left">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_margin_left</function></funcdef>
     <paramdef>int <parameter>pixel_width</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_margin_left">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_margin_left</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_margin_right">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_margin_right</function></funcdef>
     <paramdef>int <parameter>pixel_width</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_margin_right">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_margin_right</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_modify">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_modify</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_sel">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_sel</function></funcdef>
     <paramdef>int <parameter>start</parameter></paramdef>
     <paramdef>int <parameter>end</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_sel_text">
   <funcsynopsis>
    <funcprototype>
     <funcdef>string <function>get_sel_text</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Get the selected text.
   </shortdesc>
   <desc>
        <informalexample>
         <programlisting>
<![CDATA[
echo $scintilla->get_sel_text();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.hide_selection">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>hide_selection</function></funcdef>
     <paramdef>int <parameter>normal</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.point_x_from_position">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>point_x_from_position</function></funcdef>
     <paramdef>int <parameter>pos</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.point_y_from_position">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>point_y_from_position</function></funcdef>
     <paramdef>int <parameter>pos</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.line_from_position">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>line_from_position</function></funcdef>
     <paramdef>int <parameter>pos</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Get the line number from character position.
   </shortdesc>
   <desc>
       <simpara>
           Get the line number from character position.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$cur_line = $scintilla->line_from_position($scintilla->get_current_pos());
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.position_from_line">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>position_from_line</function></funcdef>
     <paramdef>int <parameter>line</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Get the character position from the line number.
   </shortdesc>
   <desc>
       <simpara>
           Get the character position from the line number.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$pos = $scintilla->position_from_line(10);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.line_scroll">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>line_scroll</function></funcdef>
     <paramdef>int <parameter>columns</parameter></paramdef>
     <paramdef>int <parameter>lines</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.scroll_caret">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>scroll_caret</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.replace_sel">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>replace_sel</function></funcdef>
     <paramdef>string <parameter>text</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_read_only">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_read_only</function></funcdef>
     <paramdef>int <parameter>read_only</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Define if the text area may be edited or not.
   </shortdesc>
   <desc>
       <simpara>
           Define if the text area may be edited or not.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
// avoiding the user to edit...
$scintilla->set_read_only(1);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.null">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>null</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.can_redo">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>can_redo</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Can Redo returns wheather "Redo" Operation may be done or not.
   </shortdesc>
   <desc>
       <simpara>
        Can Redo returns wheather "Redo" Operation may be done or not.
       </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
if ($scintilla->can_redo())
{
    // there are something to be "redone"...
}
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.can_paste">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>can_paste</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Can Paste returns wheather "Paste" Operation may be done or not.
   </shortdesc>
   <desc>
       <simpara>
        Can Paste returns wheather "Paste" Operation may be done or not.
       </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
if ($scintilla->can_paste())
{
    // there are something to be "paste"...
}
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.can_undo">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>can_undo</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Can Undo returns wheather "Undo" Operation may be done or not.
   </shortdesc>
   <desc>
       <simpara>
        Can Undo returns wheather "Undo" Operation may be done or not.
       </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
if ($scintilla->can_undo())
{
    // there are something to be "undone"...
}
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.empty_undo_buffer">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>empty_undo_buffer</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Empty the action list for "Undo" Action.
   </shortdesc>
   <desc>
       <simpara>
           Empty the action list for "Undo" Action.
       </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
$scintilla->empty_undo_buffer();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.undo">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>undo</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Undo makes the last action undone.
   </shortdesc>
   <desc>
       <simpara>
           Undo makes the last action undone.
       </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
$scintilla->undo();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.cut">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>cut</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Cut the selected text and transfer it to the memory.
   </shortdesc>
   <desc>
       <simpara>
           Cut the selected text and transfer it to the memory.
       </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
$scintilla->cut();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.copy">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>copy</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Copy the selected text and transfer it to the memory.
   </shortdesc>
   <desc>
       <simpara>
           Copy the selected text and transfer it to the memory.
       </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
$scintilla->copy();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.paste">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>paste</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Paste the selected text from the memory to the text area.
   </shortdesc>
   <desc>
       <simpara>
           Paste the selected text from the memory to the text area.
       </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
$scintilla->paste();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.clear">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>clear</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_text">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_text</function></funcdef>
     <paramdef>string <parameter>text</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Set all the content of Scintilla text area edition with the specified string.
   </shortdesc>
   <desc>
       <simpara>
           Set all the content of Scintilla text area edition with the specified string.
       </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
$scintilla->set_text('my text');
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_text">
   <funcsynopsis>
    <funcprototype>
     <funcdef>string<function>get_text</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Return all the content of Scintilla text area edition as a string.
   </shortdesc>
   <desc>
       <simpara>
           Return all the content of Scintilla text area edition as a string.
       </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
echo $scintilla->get_text();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_text_length">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_text_length</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Return the length of the text inside scintilla object.
   </shortdesc>
   <desc>
       <simpara>
           Return the length of the text inside scintilla object.
       </simpara>
     <informalexample>
         <programlisting>
<![CDATA[
echo $scintilla->get_text_length();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_direct_function">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_direct_function</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_direct_pointer">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_direct_pointer</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_overtype">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_overtype</function></funcdef>
     <paramdef>int <parameter>overtype</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_overtype">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_overtype</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_caret_width">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_caret_width</function></funcdef>
     <paramdef>int <parameter>pixel_width</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_caret_width">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_caret_width</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_target_start">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_target_start</function></funcdef>
     <paramdef>int <parameter>pos</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_target_start">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_target_start</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_target_end">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_target_end</function></funcdef>
     <paramdef>int <parameter>pos</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_target_end">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_target_end</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.replace_target">
   <funcsynopsis>
    <funcprototype>
     <funcdef>XXX <function>replace_target</function></funcdef>
     <paramdef>XXX</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.replace_target_re">
   <funcsynopsis>
    <funcprototype>
     <funcdef>XXX <function>replace_target_re</function></funcdef>
     <paramdef>XXX</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.search_in_target">
   <funcsynopsis>
    <funcprototype>
     <funcdef>XXX <function>search_in_target</function></funcdef>
     <paramdef>XXX</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_search_flags">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_search_flags</function></funcdef>
     <paramdef>int <parameter>flags</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_search_flags">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_search_flags</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.call_tip_show">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>call_tip_show</function></funcdef>
     <paramdef>int <parameter>pos</parameter></paramdef>
     <paramdef>string <parameter>definition</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Show the sintax hint about one function
   </shortdesc>
   <desc>
       <simpara>
           Show the sintax hint about one function
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->call_tip_show(10, 'function myfunction ( string name, int position )');
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.call_tip_cancel">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>call_tip_cancel</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.call_tip_active">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>call_tip_active</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.call_tip_pos_start">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>call_tip_pos_start</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.call_tip_set_hlt">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>call_tip_set_hlt</function></funcdef>
     <paramdef>int <parameter>start</parameter></paramdef>
     <paramdef>int <parameter>end</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.call_tip_set_back">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>call_tip_set_back</function></funcdef>
     <paramdef>int <parameter>back</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.visible_from_doc_line">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>visible_from_doc_line</function></funcdef>
     <paramdef>int <parameter>line</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.doc_line_from_visible">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>doc_line_from_visible</function></funcdef>
     <paramdef>int <parameter>line_display</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_fold_level">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_fold_level</function></funcdef>
     <paramdef>int <parameter>line</parameter></paramdef>
     <paramdef>int <parameter>level</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Define the fold level for some line. Fold level means the level of braces {} in the code.
   </shortdesc>
   <desc>
    <simpara>
    Define the fold level for some line. Fold level means the level of braces {} in the code.
    </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
// defining the fold level for line 10...
$scintilla->set_fold_level(10, SCINTILLA_FOLDLEVELBASE + 1);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_fold_level">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_fold_level</function></funcdef>
     <paramdef>int <parameter>line</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Returns the fold level for some line. See <function class="GtkScintilla">set_fold_level</function>
   </shortdesc>
   <desc>
    <simpara>
        Returns the fold level for some line. See <function class="GtkScintilla">set_fold_level</function>
    </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
// getting the fold level of line 10...
echo $scintilla->get_fold_level(10);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_last_child">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_last_child</function></funcdef>
     <paramdef>int <parameter>line</parameter></paramdef>
     <paramdef>int <parameter>level</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_fold_parent">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_fold_parent</function></funcdef>
     <paramdef>int <parameter>line</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.show_lines">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>show_lines</function></funcdef>
     <paramdef>int <parameter>line_start</parameter></paramdef>
     <paramdef>int <parameter>line_end</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Show the specified lines.
   </shortdesc>
   <desc>
       <simpara>
           Show the specified lines.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
// show all the lines...
$scintilla->show_lines(0,$scintilla->get_line_count());
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.hide_lines">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>hide_lines</function></funcdef>
     <paramdef>int <parameter>line_start</parameter></paramdef>
     <paramdef>int <parameter>line_end</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Hide the specified lines.
   </shortdesc>
   <desc>
       <simpara>
           Hide the specified lines.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
// hide all the lines...
$scintilla->hide_lines(0,$scintilla->get_line_count());
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_line_visible">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_line_visible</function></funcdef>
     <paramdef>int <parameter>line</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_fold_expanded">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_fold_expanded</function></funcdef>
     <paramdef>int <parameter>line</parameter></paramdef>
     <paramdef>int <parameter>expanded</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_fold_expanded">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_fold_expanded</function></funcdef>
     <paramdef>int <parameter>line</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.toggle_fold">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>toggle_fold</function></funcdef>
     <paramdef>int <parameter>line</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.ensure_visible">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>ensure_visible</function></funcdef>
     <paramdef>int <parameter>line</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_fold_flags">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_fold_flags</function></funcdef>
     <paramdef>int <parameter>flags</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_tab_indents">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_tab_indents</function></funcdef>
     <paramdef>int <parameter>tab_indents</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_tab_indents">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_tab_indents</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_backspace_unindents">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_backspace_unindents</function></funcdef>
     <paramdef>int <parameter>bs_unindents</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_backspace_unindents">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_backspace_unindents</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.line_down">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>line_down</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Places the cursor one line down.
   </shortdesc>
   <desc>
       <simpara>
        Places the cursor one line down.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->line_down();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.line_down_extend">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>line_down_extend</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Selects one line down.
   </shortdesc>
   <desc>
       <simpara>
        Selects one line down.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->line_down_extend();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.line_up">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>line_up</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Places the cursor one line up.
   </shortdesc>
   <desc>
       <simpara>
           Places the cursor one line up.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->line_up();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.line_up_extend">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>line_up_extend</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Selects one line up.
   </shortdesc>
   <desc>
       <simpara>
           Selects one line up.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->line_up_extend();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.char_left">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>char_left</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Places the cursor one character to the left.
   </shortdesc>
   <desc>
       <simpara>
           Places the cursor one character to the left.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->char_left()
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.char_left_extend">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>char_left_extend</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Selects the character at the left side.
   </shortdesc>
   <desc>
       <simpara>
           Selects the character at the left side.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->char_left_extend();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.char_right">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>char_right</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Places the cursor one character to the right.
   </shortdesc>
   <desc>
       <simpara>
           Places the cursor one character to the right.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->char_right();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.char_right_extend">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>char_right_extend</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Selects the character at the right side.
   </shortdesc>
   <desc>
       <simpara>
           Selects the character at the right side.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->char_right_extend();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.word_left">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>word_left</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Places the cursor one word to the left.
   </shortdesc>
   <desc>
       <simpara>
           Places the cursor one word to the left.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->word_left();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.word_left_extend">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>word_left_extend</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Selects the word at the left side.
   </shortdesc>
   <desc>
       <simpara>
           Selects the word at the left side.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->word_left_extend();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.word_right">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>word_right</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Places the cursor one word to the right.
   </shortdesc>
   <desc>
       <simpara>
           Places the cursor one word to the right.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->word_right();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.word_right_extend">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>word_right_extend</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Selects the word at the right side.
   </shortdesc>
   <desc>
       <simpara>
           Selects the word at the right side.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->word_right_extend();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.home">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>home</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Places the cursor at the begin of the line.
   </shortdesc>
   <desc>
        <simpara>
            Places the cursor at the begin of the line.
        </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->home();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.home_extend">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>home_extend</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Selects the text untill the home of the line.
   </shortdesc>
   <desc>
        <simpara>
            Selects the text untill the home of the line.
        </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->home_extend();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.line_end">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>line_end</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Places the cursor at the end of the line.
   </shortdesc>
   <desc>
       <simpara>
           Places the cursor at the end of the line.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->line_end();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.line_end_extend">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>line_end_extend</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Selects the text untill the end of the line.
   </shortdesc>
   <desc>
       <simpara>
           Selects the text untill the end of the line.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->line_end_extend();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.document_start">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>document_start</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.document_start_extend">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>document_start_extend</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.document_end">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>document_end</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.document_end_extend">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>document_end_extend</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.page_up">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>page_up</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Goes one page up.
   </shortdesc>
   <desc>
       <simpara>
           Goes one page up.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->page_up();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.page_up_extend">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>page_up_extend</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Selects the text of one page up.
   </shortdesc>
   <desc>
       <simpara>
           Selects the text of one page up.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->page_up_extend();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.page_down">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>page_down</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Goes one page down.
   </shortdesc>
   <desc>
       <simpara>
           Goes one page down.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->page_down();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.page_down_extend">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>page_down_extend</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Selects the text of one page down.
   </shortdesc>
   <desc>
        <simpara>
            Selects the text of one page down.
        </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->page_down_extend();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.edit_toggle_overtype">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>edit_toggle_overtype</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.cancel">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>cancel</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.delete_back">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>delete_back</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.tab">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>tab</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.back_tab">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>back_tab</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.new_line">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>new_line</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.form_feed">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>form_feed</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.v_c_home">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>v_c_home</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.v_c_home_extend">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>v_c_home_extend</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.zoom_in">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>zoom_in</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.zoom_out">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>zoom_out</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.del_word_left">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>del_word_left</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Delete word of the left side of the cursor.
   </shortdesc>
   <desc>
        <simpara>
            Delete word of the left side of the cursor.
        </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->del_word_left();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.del_word_right">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>del_word_right</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Delete word of the right side of the cursor.
   </shortdesc>
   <desc>
        <simpara>
            Delete word of the right side of the cursor.
        </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->del_word_right();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.line_cut">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>line_cut</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Cuts the current line's content to the memory.
   </shortdesc>
   <desc>
       <simpara>
           Cuts the current line's content to the memory.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->line_cut();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.line_delete">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>line_delete</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Deletes the current line.
   </shortdesc>
   <desc>
        <simpara>
            Deletes the current line.
        </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->line_delete();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.line_transpose">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>line_transpose</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.lower_case">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>lower_case</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.upper_case">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>upper_case</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.line_scroll_down">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>line_scroll_down</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.line_scroll_up">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>line_scroll_up</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.move_caret_inside_view">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>move_caret_inside_view</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.line_length">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>line_length</function></funcdef>
     <paramdef>int <parameter>line</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Return the length of some line.
   </shortdesc>
   <desc>
        <simpara>
            Return the length of some line.
        </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
// the length of line 5...
echo $scintilla->line_length(5);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.brace_match">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>brace_match</function></funcdef>
     <paramdef>int <parameter>position</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Get the character position of the complement of "{", "[", "("
   </shortdesc>
   <desc>
        <simpara>
            Get the character position of the complement of "{", "[", "("
            <informalexample>
             <programlisting>
<![CDATA[
$brace_pos = $scintilla->get_current_pos();
$char = $scintilla->get_char_at($brace_pos);
if (($char == '{') or ($char == '}')) // or...
    $other_pos = $scintilla->brace_match($brace_pos);
]]>
            </programlisting>
         </informalexample>
        </simpara>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.brace_highlight">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>brace_highlight</function></funcdef>
     <paramdef>int <parameter>pos1</parameter></paramdef>
     <paramdef>int <parameter>pos2</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Set positions inside the text to be showed in brace mode.
   </shortdesc>
   <desc>
            <simpara>
                Set positions inside the text to be showed in brace mode.
                Brace colors and fonts indentify characters like "{", "(" and "["
            </simpara>
            <informalexample>
             <programlisting>
<![CDATA[
$brace_pos = $scintilla->get_current_pos();
$char = $scintilla->get_char_at($brace_pos);
if (($char == '{') or ($char == '}')) // or...
    $other_pos = $scintilla->brace_match($brace_pos);

$scintilla->brace_highlight($brace_pos, $other_pos);
]]>
            </programlisting>
         </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.brace_bad_light">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>brace_bad_light</function></funcdef>
     <paramdef>int <parameter>pos</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
   </shortdesc>
   <desc>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_view_eol">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_view_eol</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Get wheather the end of line marks are visible or not.
   </shortdesc>
   <desc>
        <simpara>
            Get wheather the end of line marks are visible or not.
        </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
echo $scintilla->get_view_eol();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_view_eol">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_view_eol</function></funcdef>
     <paramdef>int <parameter>visible</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Define wheather the end of line marks are visible or not.
   </shortdesc>
   <desc>
        <simpara>
            Define wheather the end of line marks are visible or not.
        </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
// view end of lines...
$scintilla->set_view_eol(1);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_doc_pointer">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_doc_pointer</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_doc_pointer">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_doc_pointer</function></funcdef>
     <paramdef>int <parameter>pointer</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_mod_event_mask">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_mod_event_mask</function></funcdef>
     <paramdef>int <parameter>mask</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_edge_column">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_edge_column</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Returns the column number that is used as the edge of text area.
   </shortdesc>
   <desc>
        <simpara>
            Returns the column number that is used as the edge of text area.
        </simpara>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_edge_column">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_edge_column</function></funcdef>
     <paramdef>int <parameter>column</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Changes the column number that is used as the edge of the text area.
   </shortdesc>
   <desc>
        <simpara>
            Changes the column number that is used as the edge of the text area.
        </simpara>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_edge_mode">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_edge_mode</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Returns the edge mode. See <function class="GtkScintilla">set_edge_mode</function>
   </shortdesc>
   <desc>
        <simpara>
            Returns the edge mode. See <function class="GtkScintilla">set_edge_mode</function>
        </simpara>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_edge_mode">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_edge_mode</function></funcdef>
     <paramdef>int <parameter>mode</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Changes the edge mode.
   </shortdesc>
   <desc>
       <simpara>
           Changes the edge mode.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
// GtkScintillaEdgeMode
@define(  "SCINTILLA_EDGE_NONE"         ,   0 );
@define(  "SCINTILLA_EDGE_LINE"         ,   1 );
@define(  "SCINTILLA_EDGE_BACKGROUND"   ,   2 );

// changing the edge mode...
$scintilla->set_edge_mode(SCINTILLA_EDGE_NONE);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_edge_colour">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_edge_colour</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Gets the background color of text out of the edge.
   </shortdesc>
   <desc>
       <simpara>
           Gets the background color of text out of the edge.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
echo $scintilla->get_edge_colour();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_edge_colour">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_edge_colour</function></funcdef>
     <paramdef>int <parameter>edge_colour</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Changes the background color of text out of the edge.
   </shortdesc>
   <desc>
       <simpara>
           Changes the background color of text out of the edge.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->set_edge_colour(hexdec('FF0000'));
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.search_anchor">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>search_anchor</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.search_next">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>search_next</function></funcdef>
     <paramdef>int <parameter>flags</parameter></paramdef>
     <paramdef>string <parameter>text</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.search_prev">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>search_prev</function></funcdef>
     <paramdef>int <parameter>flags</parameter></paramdef>
     <paramdef>string <parameter>text</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_caret_policy">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_caret_policy</function></funcdef>
     <paramdef>int <parameter>caret_policy</parameter></paramdef>
     <paramdef>int <parameter>caret_slop</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.lines_on_screen">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>lines_on_screen</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.use_pop_up">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>use_pop_up</function></funcdef>
     <paramdef>int <parameter>allow_pop_up</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.selection_is_rectangle">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>selection_is_rectangle</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_zoom">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_zoom</function></funcdef>
     <paramdef>int <parameter>zoom</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_zoom">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_zoom</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.create_document">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>create_document</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.add_ref_document">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>add_ref_document</function></funcdef>
     <paramdef>int <parameter>doc</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.release_document">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>release_document</function></funcdef>
     <paramdef>int <parameter>doc</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_mod_event_mask">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_mod_event_mask</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_focus">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_focus</function></funcdef>
     <paramdef>int <parameter>focus</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_focus">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_focus</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_status">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_status</function></funcdef>
     <paramdef>int <parameter>status_code</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_status">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_status</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_mouse_down_captures">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_mouse_down_captures</function></funcdef>
     <paramdef>int <parameter>captures</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_mouse_down_captures">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_mouse_down_captures</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_cursor">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_cursor</function></funcdef>
     <paramdef>int <parameter>cursor_type</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_cursor">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_cursor</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.word_part_left">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>word_part_left</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.word_part_left_extend">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>word_part_left_extend</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.word_part_right">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>word_part_right</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.word_part_right_extend">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>word_part_right_extend</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_visible_policy">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_visible_policy</function></funcdef>
     <paramdef>int <parameter>visible_policy</parameter></paramdef>
     <paramdef>int <parameter>visible_slop</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.del_line_left">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>del_line_left</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.del_line_right">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>del_line_right</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.grab_focus">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>grab_focus</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.start_record">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>start_record</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.stop_record">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>stop_record</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_lexer">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_lexer</function></funcdef>
     <paramdef>int <parameter>lexer</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Define what kind of lexer language will be used to highlight the code.
   </shortdesc>
   <desc>
       <simpara>
           Define what kind of lexer language will be used to highlight the code.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
// GtkScintillaLexer
@define(  "SCINTILLA_LEXER_CONTAINER"               ,   0 ); 
@define(  "SCINTILLA_LEXER_NULL"                    ,   1 ); 
@define(  "SCINTILLA_LEXER_PYTHON"                  ,   2 ); 
@define(  "SCINTILLA_LEXER_CPP"                     ,   3 ); 
@define(  "SCINTILLA_LEXER_HTML"                    ,   4 ); 
@define(  "SCINTILLA_LEXER_XML"                     ,   5 ); 
@define(  "SCINTILLA_LEXER_PERL"                    ,   6 ); 
@define(  "SCINTILLA_LEXER_SQL"                     ,   7 ); 
@define(  "SCINTILLA_LEXER_VB"                      ,   8 ); 
@define(  "SCINTILLA_LEXER_PROPERTIES"              ,   9 ); 
@define(  "SCINTILLA_LEXER_ERRORLIST"               ,   10 ); 
@define(  "SCINTILLA_LEXER_MAKEFILE"                ,   11 ); 
@define(  "SCINTILLA_LEXER_BATCH"                   ,   12 ); 
@define(  "SCINTILLA_LEXER_XCODE"                   ,   13 ); 
@define(  "SCINTILLA_LEXER_LATEX"                   ,   14 ); 
@define(  "SCINTILLA_LEXER_LUA"                     ,   15 ); 
@define(  "SCINTILLA_LEXER_DIFF"                    ,   16 ); 
@define(  "SCINTILLA_LEXER_CONF"                    ,   17 ); 
@define(  "SCINTILLA_LEXER_PASCAL"                  ,   18 ); 
@define(  "SCINTILLA_LEXER_AVE"                     ,   19 ); 
@define(  "SCINTILLA_LEXER_ADA"                     ,   20 ); 

$scintilla->set_lexer(SCINTILLA_LEXER_HTML);
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.get_lexer">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_lexer</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Return what kind of lexer language is used to highlight the code. See <function class="GtkScintilla">set_lexer</function>.
   </shortdesc>
   <desc>
       <simpara>
           Return what kind of lexer language is used to highlight the code. See <function class="GtkScintilla">set_lexer</function>.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
echo $scintilla->get_lexer();
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.colourise">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>colourise</function></funcdef>
     <paramdef>int <parameter>start</parameter></paramdef>
     <paramdef>int <parameter>end</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_property">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_property</function></funcdef>
     <paramdef>string <parameter>key</parameter></paramdef>
     <paramdef>string <parameter>value</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_keywords">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_keywords</function></funcdef>
     <paramdef>int <parameter>keyword_set</parameter></paramdef>
     <paramdef>string <parameter>key_words</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        Define the keywords list for some keywords set.
   </shortdesc>
   <desc>
       <simpara>
           Define the keywords list for some keywords set.
       </simpara>
        <informalexample>
         <programlisting>
<![CDATA[
$scintilla->set_keywords(0, 'doctype a abbr abbr accept accept-charset accesskey acronym action address align alink alt applet archive area axis b background base basefont bdo bgcolor big blockquote body border br button caption cellpadding cellspacing center char charoff charset checkbox checked cite cite class classid clear code codebase codetype col colgroup color cols colspan compact content coords data datafld dataformatas datapagesize datasrc datetime dd declare defer del dfn dir dir disabled div dl dt em enctype event face fieldset file font for foreach form frame frame frameborder frameset h1 h2 h3 h4 h5 h6 head headers height hidden hr href hreflang hspace html http-equiv i id iframe image img input ins isindex ismap kbd label label lang language leftmargin legend li link link longdesc map marginheight marginwidth maxlength media menu meta method multiple name noframes nohref noresize noscript noshade nowrap object object ol onblur onchange onclick ondblclick onfocus onkeydown onkeypress onkeyup onload onmousedown onmousemove onmouseout onmouseover onmouseup onreset onselect onsubmit onunload optgroup option p param password pre profile prompt public q radio readonly rel reset rev rows rowspan rules s samp scheme scope script select selected shape size small span span src standby start strike strong style style sub submit summary sup tabindex table target tbody td text text textarea tfoot th thead title title topmargin tr tt type u ul usemap valign value valuetype var version vlink vspace width xml xmlns');
$scintilla->set_keywords(1, 'abstract boolean break byte case catch char class const continue debugger default delete do double else enum export extends final finally float for foreach function goto if implements import in instanceof int interface long native new package private protected public return short static super switch synchronized this throw throws transient try typeof var void volatile while with');
$scintilla->set_keywords(2, 'None and assert break class continue def del elif else except exec finally for from global if import in is lambda not or pass print raise return try while function include include_once require require_once');
]]>
        </programlisting>
     </informalexample>
   </desc>
  </method>

  <method id="scn.gtkscintilla.method.set_lexer_language">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_lexer_language</function></funcdef>
     <paramdef>string <parameter>language</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
   </shortdesc>
   <desc>
   </desc>
  </method>

 </methods>

 <signals>

  <signal id="scn.gtkscintilla.signal.style_needed">
   <signalname>style_needed</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef>GtkScintilla <parameter>widget</parameter></paramdef>
     <paramdef>int <parameter>position</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
   </shortdesc>
   <desc>
    <simpara>
    </simpara>
   </desc>
  </signal>


  <signal id="scn.gtkscintilla.signal.char_added">
   <signalname>char_added</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef>GtkScintilla <parameter>widget</parameter></paramdef>
     <paramdef>int <parameter>character</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
       This signal is emitted when a character is added.
   </shortdesc>
   <desc>
    <simpara>
        This signal is emitted when a character is added.
    </simpara>
   </desc>
  </signal>

  <signal id="scn.gtkscintilla.signal.save_point_reached">
   <signalname>save_point_reached</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef>GtkScintilla <parameter>widget</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
       
   </shortdesc>
   <desc>
    <simpara>
        
    </simpara>
   </desc>
  </signal>
  
  <signal id="scn.gtkscintilla.signal.save_point_left">
   <signalname>save_point_left</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef>GtkScintilla <parameter>widget</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
       
   </shortdesc>
   <desc>
    <simpara>
        
    </simpara>
   </desc>
  </signal>


  <signal id="scn.gtkscintilla.signal.modify_attempt_ro">
   <signalname>modify_attempt_ro</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef>GtkScintilla <parameter>widget</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
       
   </shortdesc>
   <desc>
    <simpara>
        
    </simpara>
   </desc>
  </signal>
  
  <signal id="scn.gtkscintilla.signal.key">
   <signalname>key</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef>GtkScintilla <parameter>widget</parameter></paramdef>
     <paramdef>int <parameter>character</parameter></paramdef>
     <paramdef>int <parameter>modifiers</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
       
   </shortdesc>
   <desc>
    <simpara>
        
    </simpara>
   </desc>
  </signal>
  
  <signal id="scn.gtkscintilla.signal.double_click">
   <signalname>double_click</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef>GtkScintilla <parameter>widget</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
       
   </shortdesc>
   <desc>
    <simpara>
        
    </simpara>
   </desc>
  </signal>
  
  <signal id="scn.gtkscintilla.signal.update_ui">
   <signalname>update_ui</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef>GtkScintilla <parameter>widget</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        update_ui signal is emitted when the screen needs to be refreshed.
   </shortdesc>
   <desc>
    <simpara>
        update_ui signal is emitted when the screen needs to be refreshed.
    </simpara>
   </desc>
  </signal>

  <signal id="scn.gtkscintilla.signal.modified">
   <signalname>modified</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef>GtkScintilla <parameter>widget</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
       modified signal is emitted when the user changes the text inside GtkScintilla text area, by adding or deleting some character.
   </shortdesc>
   <desc>
    <simpara>
       modified signal is emitted when the user changes the text inside GtkScintilla text area, by adding or deleting some character. 
    </simpara>
   </desc>
  </signal>

  <signal id="scn.gtkscintilla.signal.macro_record">
   <signalname>macro_record</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef>GtkScintilla <parameter>widget</parameter></paramdef>
     <paramdef>int <parameter>message</parameter></paramdef>
     <paramdef>int <parameter>wparam</parameter></paramdef>
     <paramdef>int <parameter>lparam</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
       
   </shortdesc>
   <desc>
    <simpara>
        
    </simpara>
   </desc>
  </signal>
  
  <signal id="scn.gtkscintilla.signal.margin_click">
   <signalname>margin_click</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef>GtkScintilla <parameter>widget</parameter></paramdef>
     <paramdef>int <parameter>modifiers</parameter></paramdef>
     <paramdef>int <parameter>position</parameter></paramdef>
     <paramdef>int <parameter>margin</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
        margin_click signal is emitted when the users clicks on the margin of GtkScintilla object.
   </shortdesc>
   <desc>
    <simpara>
        margin_click signal is emitted when the users clicks on the margin of GtkScintilla object.
    </simpara>
   </desc>
  </signal>
  
  <signal id="scn.gtkscintilla.signal.need_shown">
   <signalname>need_shown</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef>GtkScintilla <parameter>widget</parameter></paramdef>
     <paramdef>int <parameter>position</parameter></paramdef>
     <paramdef>int <parameter>lenght</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
       
   </shortdesc>
   <desc>
    <simpara>
        
    </simpara>
   </desc>
  </signal>

  <signal id="scn.gtkscintilla.signal.painted">
   <signalname>painted</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef>GtkScintilla <parameter>widget</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
       
   </shortdesc>
   <desc>
    <simpara>
        
    </simpara>
   </desc>
  </signal>


  <signal id="scn.gtkscintilla.signal.user_list_selection">
   <signalname>user_list_selection</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef>GtkScintilla <parameter>widget</parameter></paramdef>
     <paramdef>int <parameter>type</parameter></paramdef>
     <paramdef>char <parameter>text</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
       
   </shortdesc>
   <desc>
    <simpara>
        
    </simpara>
   </desc>
  </signal>
  
  <signal id="scn.gtkscintilla.signal.uri_dropped">
   <signalname>uri_dropped</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef>GtkScintilla <parameter>widget</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
   </shortdesc>
   <desc>
    <simpara>
        
    </simpara>
   </desc>
  </signal>

 </signals>

</classentry>

