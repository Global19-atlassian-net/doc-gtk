<?xml version="1.0" encoding="ISO-8859-1" ?>
<chapter id="tutorials.pixmaps">
 <title>Pixmaps</title>

 <sect1 id="tutorials.pixmaps.intro">
  <title>How To Use Pixmaps in PHP-GTK</title>
  <simpara>
   Many applications are using graphical images: A nice splash screen indicating 
   that the program is loading; the toolbar with new, open and other well-known
   icons or the nifty about dialog. This HowTo describes what you need to use
   images in your own php-gtk applications.
  </simpara>
 </sect1>

 <sect1 id="tutorials.pixmaps.aboutxpm">
  <title>About XPM</title>
  <simpara>
   The standard way to deal with images and mainly icons in php-gtk is 
   using XPMs. 
   XPM is short for <literal>XPixMap</literal> and describes an ASCII image format
   as well as a C library for dealing with the images. Originally the format
   was developed because the X libraries just had support for 1 bit depth
   images, the XBM (X BitMap) which is just not enough for applications on
   a graphical system. Although it is has not been standardized by the X
   Consortium, it is the de facto standard for icons in X.
   In this tutorial we will omit the library because we're programming in 
   php and not in C.
  </simpara>
  <para>
   The XPM format was designed to fit the special need for icons:
    <itemizedlist>
     <listitem>Icons are usually small</listitem>
     <listitem>Icons may need to be drawn differently depending on whether they are
      being displayed on color or monochrome screen</listitem>
     <listitem>Icons may want to define symbolic colors, such as "Foreground" and
      "Background", that can be changed depending on the context in which the icons
      are used.</listitem>
     <listitem>Icons can be of any shape, not just rectangular.</listitem>
    </itemizedlist>
  </para>
 <sect2 id="tutorials.pixmaps.aboutxpm.format">
 <title>The XPM image format</title>
  <simpara>
   An icon in XPM format is just an ASCII file which can be edited with
   a normal text editor. As it was designed to be included in C sources,
   the only content is a C styled array with the image information. 
   You can even have comments in the file - it's C source.
  </simpara>
  <para>
   The basic format of a XPM is an array composed as follows:
   <programlisting role="C">
<![CDATA[
/* XPM */
static char * <pixmap name>[] = {
"Values-string",
"Colors-strings",
"Pixel-strings"
};]]>
   </programlisting>
   Note that the header comment with only the word XPM in it is <emphasis>required</emphasis>.
   I leave out the <emphasis>Extension strings</emphasis> as we don't need them here.
  </para>
  <para>
   The <literal>Values-string</literal> has to contain four integer values:
   <orderedlist>
    <listitem>Width of the image in pixels</listitem>
    <listitem>Height of the image in pixels</listitem>
    <listitem>Number of colors in the image</listitem>
    <listitem>Number of characters per pixel</listitem>
   </orderedlist>
   Example: <literal>"16 16 8 1"</literal> defines an icon of size 16x16 pixels with 8
   colors and 1 char for defining one pixel.
  </para>
  <simpara>
   First it may be strange that one has to define the <emphasis>number of characters per
   pixel</emphasis>, but this becomes clear if you consider the following:
   Each pixel is represented by a char, e.g. "b", with "b" having the color blue. Now
   you want another pixel in red, so you give it the char "r" and define "r" being the
   red color. The ASCII standard defines 128 chars, and with an extended codepage of 255
   you would still be limited to somewhat of 250 colors (you can't use quotes and some other
   chars). To avoid this limitation you can use more than one char to describe a pixel
   and a color: If you use 2 chars per pixel it is possible to use about 250x250 = 62500 
   colors by defining pairs of chars to be one color, e.g. "mr" being a medium red and
   'db' being a dark blue.
  </simpara>
  <para>
   The <literal>Colors-strings</literal> contains as many strings as there are colors.
   Each string has the following format:
   <programlisting>
<![CDATA[
"chars key value [key value]*" ]]>   
   </programlisting>
   The <literal>chars</literal> value is one or more chars (depending on the 
   <literal>number of characters</literal> setting) which define the "pixel name"
   of the color. A <literal>key</literal> can have one of the following values:
   <itemizedlist>
    <listitem><literal>m</literal> for a monochrome visual</listitem>
    <listitem><literal>c</literal> for a color visual</listitem>
    <listitem><literal>g4</literal> for 4-level grayscale</listitem>
    <listitem><literal>g</literal> for grayscale with more than 4 levels</listitem>
    <listitem><literal>s</literal> for a symbolic name</listitem>
   </itemizedlist>
   The color <literal>value</literal> itself can be the following:
   <itemizedlist>
    <listitem>A color name, e.g. "blue"</listitem>
    <listitem>A hexadecimal RGB code like in HTML, e.h. '#FF8000'</listitem>
    <listitem>The string "None" which means the transparent color</listitem>
   </itemizedlist>
   Different key-value pairs can be concatenated to optimize the image for
   several visuals
   <programlisting>
<![CDATA[
"r m white c red",
"b m black c blue" ]]>   
   </programlisting>
   The example would define two colors: A color named "r" which is displayed white
   on a monochrome display and red on a color display. The second is named "b" and
   is displayed black on a monochrome visual and blue on a color one.
  </para>
  <para>
   The <literal>Pixel-strings</literal> are <literal>height</literal> string of
   which each is <literal>width * chars per pixel</literal> wide.
  </para>
  <example>
   <title>A small sample XPM</title>
   <programlisting role="C">
<![CDATA[
/* XPM */
static char * dot[] = {
"5 5 2 1",
". c None",
"X c Red",
"  X  ",
" XXX ",
"XXXXX",
" XXX ",
"  X  ",
};]]>
   </programlisting>
  </example>
  <para>
   As you probably don't want to create these images by hand, here is a
   list of programs which support the creation of XPMs:
   <itemizedlist>
    <listitem><emphasis>The GIMP</emphasis> which should be on every linux system; it
     is also available for Windows.</listitem>
    <listitem><emphasis>ImageMagick</emphasis> is a command line tool which can be used
     to batch-convert other image formats to xpm. Available for unix and Windows.</listitem>
   </itemizedlist>
  </para>
</sect2>
</sect1>

<sect1 id="tutorials.pixmaps.functions">
  <title>Image related php-gtk functions</title>
  <simpara>
   Images are displayed using the <classname>GtkPixmap</classname> widget which has
   to be invoked with two parameters; a <literal>map</literal> of type 
   <classname>GdkPixmap</classname> and a <literal>mask</literal> of type
   <classname>GdkBitmap</classname>. 
   The map defines all the pixels with its colors, and as the map is not able to
   contain transparent color information, the mask is a map of 1's and 0's telling
   which pixel is transparent and which not.
  </simpara>
  <para>
   There are two functions dedicated to reading of XPM images:
   <itemizedlist>
    <listitem>
     <link linkend="gdk.method.pixmap_create_from_xpm">gdk::pixmap_create_from_xpm</link> which
     creates a pixmap and a mask directly from a file.
    </listitem>
    <listitem>
     <link linkend="gdk.method.pixmap_create_from_xpm_d">gdk::pixmap_create_from_xpm_d</link>
     which creates the pixmap and mask from an array.
    </listitem>
   </itemizedlist>
  </para>
  <para>
   As both functions are identical in usage, I will describe <literal>pixmap_create_from_xpm_d</literal>
   only.
   <programlisting role="php">
<![CDATA[
list( $pixmap, $mask) = gdk::pixmap_create_from_xpm_d( $objWindow->window, $colTransparent, $arImage);
]]>
   </programlisting>
   The function returns an array of size 2: the first is the map with all the pixels and colors,
   and the second is the mask with transparency information. We store them in two different 
   variables here, although you can just use an array.
  </para>
  <simpara>
   The first parameter, <literal>$objWindow-&gt;window</literal> is the <classname>GdkWindow</classname>
   of your application's window. Please make sure that the <classname>GdkWindow</classname>
   exists by showing the <classname>GtkWindow</classname> or by calling the 
   <function class="GtkWidget">realize</function> function.
  </simpara>
  <para>
   The second parameter, <literal>$colTransparent</literal> defines which color the 
   transparent color (color <literal>None</literal>) will get if the pixmask is not
   used when creating e.g. the GtkPixmap.
  </para>
  <simpara>
   The third parameter is the name of the image file (<literal>pixmap_create_from_xpm</literal>), 
   or a normal php array with the structure as described in the XPM standard
   (<literal>pixmap_create_from_xpm_d</literal>).
  </simpara>
</sect1>

<sect1 id="tutorials.pixmaps.examples">
  <title>Examples</title>
  <simpara>
   The following example shows how to create a pixmap from an array,
   creating a button and attaching the pixmap along with the label
   to the button. It also uses the <literal>enter</literal> and <literal>leave</literal>
   signals to change the pixmap when the button is hovered by the mouse.
   The icon of the window is set, too - but this won't work on Windows.
  </simpara>
  <example>
   <title>Pixmap button &amp; highlighting example</title>
   <programlisting role="php">
<![CDATA[
<?php
if (!extension_loaded('gtk')) { 
    dl('php_gtk.' . PHP_SHLIB_SUFFIX); 
}

$arXPMs['ok'] = array(
    "32 32 7 1",
    "   c None",
    ".  c #005F00", "+  c #008A00", "@  c #00BB00", 
    "#  c #00E000", "$  c #00F709", "%  c #4BE24A",
    "                                ",
    "                                ",
    "                                ",
    "                                ",
    "                              @@",
    "                            +@++",
    "+@                        +@+@+ ",
    "+++                     @+@++.  ",
    "+@++                  ++@%++.   ",
    " +%++               +++%%@+     ",
    " +%@++            +++%%%++      ",
    " +@##++         +++%$$%++       ",
    "  +$$%++      +++@$$$$++        ",
    "  +#$$@+.   +++@$$$$%++         ",
    "  +@$$$#+.+.+@$$$$$#+.          ",
    "  .+$$$$@+.@#$$$$$@+.           ",
    "   +##$$$####$$$$++.            ",
    "   .@$#####$$###@..             ",
    "   .+##########+..              ",
    "    .#########+..               ",
    "    .@##@#@#@..                 ",
    "    .+@##@#@+.                  ",
    "    ..#@@#@..                   ",
    "     .@@@@..                    ",
    "     .+@+..                     ",
    "     .++..                      ",
    "      ...                       ",
    "      ..                        ",
    "                                ",
    "                                ",
    "                                ",
    "                                "
);

$arXPMs['inbox'] = array(
    "16 16 6 1",
    "   c None"   , ".  c #028800", "+  c #995700",
    "@  c #82E61D", "#  c #FFBE58", "$  c #FCEF8E",
    "                ",
    "      ....      ",
    "     .$$$$.     ",
    "     .@@@@.     ",
    "     .@@@@.     ",
    "    ..@@@@..    ",
    "   .@@@@@@@@.   ",
    "    .@@@@@@.    ",
    "     .@.@@.     ",
    "      ..@.      ",
    "+++    ..    +++",
    "+$$+        +$$+",
    "+$$++++++++++$$+",
    "+$#$$$$$$$$$$$#+",
    "+$#############+",
    "++++++++++++++++"
);

$window =& new GtkWindow();
$window->set_title('pixmaps');
$window->set_default_size(200, 100);
$window->connect_object('destroy', array('gtk', 'main_quit'));
$window->realize();

$clTransparentTest =& new GdkColor('#000000');

$arPxTest = gdk::pixmap_create_from_xpm_d($window->window, $clTransparentTest, $arXPMs['ok']);

$btnTest  =& new GtkButton();
$pxmTest  =& new GtkPixmap($arPxTest[0], $arPxTest[1]);
$lblTest  =& new GtkLabel('Button with icon');
$hboxTest =& new GtkHBox();
$hboxTest->pack_start($pxmTest);
$hboxTest->pack_end($lblTest);
$btnTest->add($hboxTest);

// hovering the button changes the image
// to a highlighted version of itself
function changePixmap( $btnTest, $strAction, &$pixmap)
{
    $hbox = $btnTest->child;
    $arChildren = $hbox->children();
    $hbox->remove($arChildren[0]);
    $hbox->pack_start($pixmap);
    $pixmap->show();

    // underline the label
    $lblTest = $arChildren[1];
    $strPattern = '';
    if ($strAction == 'enter') {
        $strPattern = '________________';
    }

    $lblTest->set_pattern($strPattern);
}

// generate a highlighted picture from the original
$arXPMs['high'] = $arXPMs['ok'];
$arData = explode(' ', $arXPMs['high'][0]);
$nColors = $arData[2];

// change all colors | we know the first color is transparent
for ($nA = 2; $nA < $nColors + 1; $nA++) {
    $arData = explode(' #', $arXPMs['high'][$nA]);
    // the following code is taken from PEAR::Image_Color
    $degree = 40;
    $color[] = hexdec(substr($arData[1], 0, 2));
    $color[] = hexdec(substr($arData[1], 2, 2));
    $color[] = hexdec(substr($arData[1], 4, 2));
    for ($x = 0; $x < 3; $x++) {
        if (($color[$x] + $degree) < 256) {
            if (($color1[$x] + $degree) > -1) {
                $color[$x] += $degree;
            } else {
                $color[$x] = 0;
            }
        } else {
            $color[$x] = 255;
        }
    }
    $arData[1] = sprintf('%02X%02X%02X', $color[0], $color[1], $color[2]);
    $arXPMs['high'][$nA] = implode(' #', $arData);
}

$arPxTestH = gdk::pixmap_create_from_xpm_d($window->window, null, $arXPMs['high']);
$pxmTestHigh =& new GtkPixmap($arPxTestH[0], $arPxTestH[1]);

$btnTest->connect('enter', 'changePixmap', 'enter', $pxmTestHigh);
$btnTest->connect('leave', 'changePixmap', 'leave', $pxmTest);

$alBtn =& new GtkAlignment(0.5, 0.5, 0, 0);
$alBtn->add($btnTest);

list($pxWindow, $maskWindow) = gdk::pixmap_create_from_xpm_d($window->window, null, $arXPMs['inbox']);
$gdkwindow = $window->window;
$gdkwindow->set_icon($gdkwindow, $pxWindow, $maskWindow);

$window->add($alBtn);
$window->show_all();

gtk::main();

?>
]]>
   </programlisting> 
  </example>
</sect1>

<sect1 id="tutorials.pixmaps.other">
 <title>Other things you can do with pixmaps</title>
 <sect2 id="tutorials.pixmaps.other.shapes">
  <title>Shaping widgets</title>
  <simpara>
   Another nice thing you can do with a pixmap or better a pixmask is 
   defining your own shape for widgets or whole windows. This means you
   can have can have a button with rounded corners or a window with "holes"
   in it by using the 
   <link linked="gtk.gtkwidget.method.shape_combine_mask">shape_combine_mask</link>
   method of <classname>GtkWidget</classname>.
  </simpara>
 </sect2>
 <sect2 id="tutorials.pixmaps.other.symbolic">
  <title>Symbolic names</title>
  <para>
   The XPM specification allows the use of <emphasis>symbolic color names</emphasis>
   in the xpm. For example, if your pixmap should display a symbol of a button, the
   button could have the <emphasis>real</emphasis> button colors: light shadow, dark
   shadow and the normal flat surface color. The only thing you would have to do
   is writing something like this:
   <programlisting role="C">
<![CDATA[
/* XPM */
static char * button[] = {
"16 16 3 1",
". s foreground",
"X s lightshadow",
"X s darkshadow",
"...pixels here"
};]]>
   </programlisting>
  </para>
  <simpara>
   Unfortunately, the Gtk, unlike CDE, does not support symbolic color names. So
   you cannot use them unless you define your own names and write a function which
   replaces the symbolic names by real colors.
  </simpara>
 </sect2>

 <sect2 id="tutorials.pixmaps.other.otherformats">
  <title>Other graphics formats</title>
  <simpara>
   Pixmaps are nice, but what if you want to display a <literal>jpg</literal> or
   <literal>png</literal> image? As the gtk libraries don't support this, you could
   use the <literal>gd</literal> or <literal>gd2</literal> to transform the image
   to xpm format and go on with the normal xpm functions.
  </simpara>
 </sect2>
</sect1>

<!--
TODO:
- other xpm functions
- displaying jpg/png/whatever by transforming them before with gd
-->

</chapter>
