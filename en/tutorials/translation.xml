<?xml version="1.0" encoding="ISO-8859-1" ?>
<chapter id="tutorials.translation">
 <title>Translation of PHP-Gtk applications</title>

 <sect1 id="tutorials.translation.intro">
  <title>What it's all about</title>
  <simpara>
   You want to distribute your PHP-Gtk application on your webpage
   and make it reach a large number of people. The only problem
   between your application and all the people is not the 
   functionality; your app is perfect in this way:
   It is the language. 
  </simpara>
  <simpara>
   Even if some people don't or don't want to realize: There are
   <emphasis>lots</emphasis> of people out there which would use
   your program but don't speak your language or the language
   in which your program is. It would be nonsense to ignore them.
   The solution is easy: Translate the program. Just find a
   person who speaks the target language and who is willing
   to translate all the things your program contains. 
  </simpara>
  <para>
   But the next step: <emphasis>How do you - technically - 
   translate your program?</emphasis>. There are many ideas
   how to do this:
   <itemizedlist>
    <listitem>
     Take the program sources (and glade files), make a copy and 
     translate them. This is the worst method: If you want to 
     extend your program you will have to change every single
     file of the 20 translated versions. 
     Even worse: The translator does not have to be a programmer, 
     and requiring him to change the sources can cause serious
     problems with the code: Does the translator know how to
     deal with escape sequences? What if the translator accidently 
     removes a end-quote? The program just won't run, and you
     will have a nice time searching bugs in all the translated
     versions.
    </listitem>
    <listitem>
     Using a big array which contains all the texts. Put it in a 
     translation file for each language, and include the right one
     when the program starts. This has the advantage that translation
     and code are segregated strictly, and the translator will have
     an easy job. Just what if you are using glade files for
     your GUI definitions? You would have to make a copy of each
     glade file and translate it; causing the same problems as the
     first option. Or you load every single widget and change the
     text of it. This would require a function in your application
     which knew every single widget and the string in the big
     translation array it should apply.
    </listitem>
    <listitem>
     Using the text as normal in the sources, but having it and
     the glade files translated automatically. Impossible? 
     No, the gettext extension of php makes this scenario real.
    </listitem>
   </itemizedlist>
  </para>
  <simpara>
   This tutorial shows how to translate your apps the most easy
   way using the gettext extension of php. It covers normal 
   string translation as well as the translation of glade files
   and shows a solution if the gettext extension is not available
   on the user's system.
  </simpara>
  
  <example>
   <title>The first and worst translation method</title>
   <programlisting role="php">
<![CDATA[
//file: cart.en.php
//...
echo '<title>Shopping cart</title>';
//...
echo 'Copying file ' . $strFile1 . ' to ' . $strFile2;
//...

//file: cart.de.php
//...
echo '<title>Einkaufswagen</title>';
//...
echo 'Kopiere Datei ' . $strFile1 . ' nach ' . $strFile2;
//...
]]>
   </programlisting>
  </example>
  <example>
   <title>The second method</title>
   <programlisting role="php">
<![CDATA[
//file: translationl.en.inc
$arTranslation = array(
 'title' => 'Shopping cart',
 'copy_1' => 'Copying file ',
 'copy_2' => ' to '
);

//file: translationl.de.inc
$arTranslation = array(
 'title' => 'Einkaufswagen',
 'copy_1' => 'Kopiere Datei ',
 'copy_2' => ' nach '
);

//file: cart.php
include_once( 'translation.en.inc');
//...
echo '<title>' . $arTranslation['title'] . '</title>';
//...
echo $arTranslation['copy_1'] . $strFile1 . $arTranslation['copy_2'] . $strFile2;
//...
]]>
   </programlisting>
  </example>
  <example>
   <title>Using gettext</title>
   <programlisting role="php">
<![CDATA[
//file: cart.php
//...
echo '<title>' . _('Shopping cart') . '</title>';
//...
echo sprintf( _('Copying file %s to %s'), $strFile1, $strFile2);
//...
]]>
   </programlisting>
  </example>
 </sect1>
 
 <sect1 id="tutorials.translation.gettext">
  <title>Gettext</title>
  <simpara>
   <ulink url="http://www.gnu.org/software/gettext/">Gettext</ulink> 
   is a set of tools, guidelines, directory naming conventions 
   and a runtime library. Together, they are the standard way to translate
   applications in the *nix environment. Don't be scared, you can use
   it on Windows as well. I don't want to describe the whole system here,
   just the things you need to translate your application - you can read 
   the <ulink url="http://www.gnu.org/software/gettext/manual/gettext.html">manual</ulink>
   if you want more information.
  </simpara>
  <para>
   The gettext system translates replaces whole strings with the translated
   equivalent in the target language. This means that you don't have to 
   invent array keys but can keep the original string in the code, which 
   makes it a lot more readable. The translations are written down in 
   so-called <filename>.po</filename>-files, where "po" stands for
   "portable object". They contain the human-readable and human-editable
   translation of the strings to the target language. To speed up the
   live-translation process when the application is running, they are
   compiled to <filename>.mo</filename>-files, "machine object" files.
   These files are required to be in a certain directory structure:
   <screen>
locale
  -language-
    LC_MESSAGES
      -applicationname-.po
      -applicationname-.mo
  de
    LC_MESSAGES
      appwizard.po
      appwizard.mo
      tuxracer.mo
  es
    LC_MESSAGES
      appwizard.mo
      tuxracer.mo
   </screen>
   Here you see, that there are 2 languages: german (de) and spanish (es).
   They contain both the machine object files for the applications
   <literal>AppWizard</literal> and <literal>TuxRacer</literal>. The
   original translation files are not required for running the program,
   and so only the german translation file for AppWizard is here. 
   If you are on *nix, have a look at 
   <filename>/usr/share/locale/</filename>. You will find the translations
   for many programs there.
  </para>
  <para>
   A <filename>.mo</filename> translation file looks the following way:
   <programlisting role="gettext_po">
<![CDATA[
# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR Free Software Foundation, Inc.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2002-04-06 21:44-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"
#: gettext_example.php:12
msgid "A string to be translated would go here"
msgstr "Ein string der übersetzt werden soll steht hier"

msgid "Really quit?"
msgstr "Wirklich beenden?"

msgid "This is a glade language test script"
msgstr "Dies ist ein Glade Sprach-test script"
]]>
   </programlisting>
   The first 15 lines are a sort of header, which can be customized
   with dates and authors.
   After the header the translation begins: <literal>msgid</literal>
   tells what shall be translated, and <literal>msgstr</literal> is
   the translation. Special chars in strings can be escaped as 
   usually with a backslash \.
  </para>
  <para>
   After translating your strings, you have to compiles the
   <filename>.po</filename> to <filename>.mo</filename> files
   which is done by using the <literal>msgfmt</literal> tool.
   On *nix, you should have it somewhere; on Windows you can get
   it with <ulink url="http://mingw32.sourceforge.net">mingw32</ulink>.
   Go to the LC_MESSAGES directory and just call the compiler:
   <programlisting>
<![CDATA[
# msgfmt messages.po
]]>
   </programlisting>
   which will result in a <filename>messages.mo</filename> file.
  </para>
 </sect1>

 <sect1 id="tutorials.translation.gettextinphp">
  <title>Using gettext in PHP</title>
  <simpara>
   Our sample application is the following:
  </simpara>
  <example>
   <title>Basic sample application</title>
   <programlisting role="php">
<![CDATA[
<?php
if( !extension_loaded('gtk')) { 
    dl( 'php_gtk.' . PHP_SHLIB_SUFFIX); 
}

$window = &new GtkWindow();
$window->set_default_size( 300, 200);
$window->set_title( 'window title');

$vbox   = &new GtkVBox();
$label  = &new GtkLabel( 'Translation test');
$button = &new GtkButton( 'Close window');

$vbox->pack_start( $label);
$vbox->pack_start( $button);

$window->connect_object('destroy', array('gtk', 'main_quit'));
$button->connect_object( 'clicked', array( 'gtk', 'main_quit'));

$window->add( $vbox);
$window->show_all();
gtk::main();
?>
]]>
   </programlisting>
  </example>
  <simpara>
   We would like to have the "window title", "Translation test"
   and "Close window".  
  </simpara>
  <para>
   The first thing you need to do is loading the gettext extension,
   the same way you load php-gtk. This can be done by doing a
   <programlisting role="php">
<![CDATA[
if( !extension_loaded( 'gettext')) {
    if( !@dl( 'php_gettext.' . PHP_SHLIB_SUFFIX)) {
        die( 'gettext is not available');
    }
}
]]>
   </programlisting>
  </para>
  <para>
   The next step is to set the location of the translation file;
   this can be done with
   <programlisting role="php">
<![CDATA[
bindtextdomain( 'testapp', './locale'); 
]]>
   </programlisting>
   which would assume that the .mo file would be in
   <filename>{CURRENT_DIR}/locale/{LANGUAGE}/LC_MESSAGES/testapp.mo</filename>.
   Language could be <filename>de_DE</filename>, depending on your
   system setting - this can be overridden with
   <programlisting role="php">
<![CDATA[
putenv( "LANG=" . 'de_DE'); //required on windows, because setlocale doesn't really work
setlocale( LC_ALL, 'de_DE');
]]>
   </programlisting>. You should always use the language identifier
   together with the country code as there have been problems
   on some systems when using only <filename>de</filename> or
   <filename>DE</filename>.
   The <filename>{CURRENT_DIR}</filename> assumes that the application
   is started with the working directory in the application directory;
   but this can't always be expected. It would be better to do a
   <programlisting role="php">
<![CDATA[
bindtextdomain( 'testapp', dirname( __FILE __) . '/locale'); 
]]>
   </programlisting>
   which uses the real location of the current file as base.
  </para>
  <para>
   After setting the file location, you have to tell gettext
   which "domain" (part of the translation files) you want to 
   use, in our case it would be "testapp":
   <programlisting role="php">
<![CDATA[
textdomain( 'testapp'); 
]]>
   </programlisting>
   This allows you to use multiple domains in the same program, and
   you can switch between them everytime.
  </para>
  <simpara>
   The translation of strings if an ease: There is the function
   <literal>gettext</literal> which takes a string as parameter
   and returns the translated version. To make the code more readable,
   there is an alias of the function: <literal>_</literal> (underscore).
   Now we change our code and get the following:
  </simpara>
  <example>
   <title>Basic example with translation</title>
   <programlisting role="php">
<![CDATA[
<?php
if( !extension_loaded('gtk')) { 
    dl( 'php_gtk.' . PHP_SHLIB_SUFFIX); 
}
putenv( "LANG=" . 'de_DE'); //required on windows, because setlocale doesn't really work
setlocale( LC_ALL, 'de_DE');

if( !function_exists( 'gettext')) {
    //gettext not automatically loaded
    if( !@dl( 'php_gettext.' . PHP_SHLIB_SUFFIX)) {
        die( 'gettext extension is not available!');
    }
}
bindtextdomain( 'testapp', dirname( __FILE__) . '/locale'); 
textdomain( 'testapp'); 

$window = &new GtkWindow();
$window->set_default_size( 300, 200);
$window->set_title( _('window title'));

$vbox   = &new GtkVBox();
$label  = &new GtkLabel( _('Translation test'));
$button = &new GtkButton( gettext('Close window'));

$vbox->pack_start( $label);
$vbox->pack_start( $button);

$window->connect_object('destroy', array('gtk', 'main_quit'));
$button->connect_object( 'clicked', array( 'gtk', 'main_quit'));

$window->add( $vbox);
$window->show_all();
gtk::main();
?>
]]>
   </programlisting>
  </example>
  <para>
   When you start your application, you will see nothing translated:
   We forgot the translation file.
   Just copy the following into 
   <filename>locale/de/LC_MESSAGES/testapp.po</filename>:
   <programlisting role="gettext_po">
<![CDATA[
# PHP-Gtk translation tutorial
# Copyright (C) 2004 PHP-Gtk documentation team
# Christian Weiske <cweiske@php.net>, 2004.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: 0.1N\n"
"POT-Creation-Date: 2004-09-15 07:12+0100\n"
"PO-Revision-Date: 2004-09-15 07:12+0100\n"
"Last-Translator: Christian Weiske <cweiske@php.net>\n"
"Language-Team: PHP-Gtk doc team germany <germany@example.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=iso-8859-1\n"
"Content-Transfer-Encoding: 8bit\n"
#: gettext_example.php:20
msgid "window title"
msgstr "Fenstertitel"

msgid "Translation test"
msgstr "UEbersetzungstest"

msgid "Close window"
msgstr "Fenster schliessen"
]]>
   </programlisting>
   After doing this, compile it with
   <command>msgfmt testapp.po</command> and
   move the created <filename>messages.mo</filename>
   to <filename>testapp.mo</filename>.
   Start the application again - you will see
   the app in the german language.
  </para>
 </sect1>

 <sect1 id="tutorials.translation.glade">
  <title>Translating glade files</title>
  <simpara>
   Translating the strings in a glade file is really
   easy: If gettext is available and loaded and the textdomain
   is set, it automatically looks for translations - you
   just have to provide the translated <filename>.mo</filename>
   file in the right directory.
  </simpara>
  <para>
   Here is the example application, but with glade:
   <example>
    <title>Basic example with glade</title>
    <programlisting role="php">
<![CDATA[
<?php
if( !extension_loaded('gtk')) { 
    dl( 'php_gtk.' . PHP_SHLIB_SUFFIX); 
}
putenv( "LANG=" . 'de_DE'); //required on windows, because setlocale doesn't work
setlocale( LC_ALL, 'de_DE');

if( !function_exists( 'gettext')) {
    //gettext not automatically loaded
    if( !@dl( 'php_gettext.' . PHP_SHLIB_SUFFIX)) {
        die( 'gettext extension is not available!');
    }
}

bindtextdomain( 'testapp', dirname( __FILE__) . '/locale'); 
textdomain( 'testapp'); 


$glade =& new GladeXML( dirname( __FILE__) . "/example-tutorial-translation.glade");
                     
$window  = $glade->get_widget( 'window');
$button = $glade->get_widget( 'button');

$window->connect_object('destroy', array('gtk', 'main_quit'));
$button->connect_object( 'clicked', array( 'gtk', 'main_quit'));

gtk::main();
?>
]]>
    </programlisting>
   </example>
   and here the glade file:
   <programlisting role="xml">
<![CDATA[
<?xml version="1.0"?>
<GTK-Interface>
<project>
  <name>example-tutorial-translation</name>
  <program_name>example-tutorial-translation</program_name>
  <directory></directory>
  <source_directory>src</source_directory>
  <pixmaps_directory>pixmaps</pixmaps_directory>
  <language>C</language>
  <gnome_support>False</gnome_support>
  <gettext_support>False</gettext_support>
  <output_translatable_strings>True</output_translatable_strings>
  <translatable_strings_file>example-tutorial-translation.strings</translatable_strings_file>
</project>
<widget>
  <class>GtkWindow</class>
  <name>window</name>
  <title>window title</title>
  <type>GTK_WINDOW_TOPLEVEL</type>
  <position>GTK_WIN_POS_NONE</position>
  <modal>False</modal>
  <default_width>300</default_width>
  <default_height>200</default_height>
  <allow_shrink>False</allow_shrink>
  <allow_grow>True</allow_grow>
  <auto_shrink>False</auto_shrink>

  <widget>
    <class>GtkVBox</class>
    <name>vbox</name>
    <homogeneous>False</homogeneous>
    <spacing>0</spacing>

    <widget>
      <class>GtkLabel</class>
      <name>label</name>
      <label>Translation test</label>
      <justify>GTK_JUSTIFY_CENTER</justify>
      <wrap>False</wrap>
      <xalign>0.5</xalign>
      <yalign>0.5</yalign>
      <xpad>0</xpad>
      <ypad>0</ypad>
      <child>
	<padding>0</padding>
	<expand>True</expand>
	<fill>True</fill>
      </child>
    </widget>

    <widget>
      <class>GtkButton</class>
      <name>button</name>
      <can_focus>True</can_focus>
      <label>Close window</label>
      <relief>GTK_RELIEF_NORMAL</relief>
      <child>
	<padding>0</padding>
	<expand>False</expand>
	<fill>False</fill>
      </child>
    </widget>
  </widget>
</widget>
</GTK-Interface>
]]>
   </programlisting>
  </para>
  <simpara>
   Just start the script, and you will see 
   a translated application as the string contents
   are already in <filename>testapp.mo</filename>.
  </simpara>
  <simpara>
   It can be quite boring to collect all the strings
   which shall be translated in a <filename>.glade</filename> 
   file. Glade has the option "save translatable strings"
   which creates a file containing all the strings from
   a glade file - it's easy to convert them to a 
   <filename>.po</filename> file.
  </simpara>
 </sect1>

 
 <sect1 id="tutorials.translation.notes">
  <title>Some additional notes</title>
  <sect2>
   <title>What to do if gettext is not available?</title>
   <para>
    As you can't assume that gettext is available and you 
    want your app to work in all environments, you should
    provide a gettext "emulation":
    <programlisting role="php">
<![CDATA[
function _( $strString){return $strString;}
function bindtextdomain( $strString){return $strString;}
function dcgettext( $strDomain, $strString, $nCategory){ return $strString;}
function dgettext( $strDomain, $strMessage) { return $strString;}
function gettext( $strString){return $strString;}
function textdomain( $strString){return $strString;}
]]>
    </programlisting>
    Replace the line
    <programlisting role="php">
<![CDATA[
die( 'gettext extension is not available!');
]]>
    </programlisting>
    with the code above, and the gettext functions will be
    available even if gettext is not installed. They just
    return the original text, so that the apps will be in
    the original language.
   </para>
  </sect2>
  <sect2>
   <title>Dynamic sentences</title>
   <simpara>
    In message boxes you ask the user
    "There is a file "{FILENAME}". What shall I do with it?".
    The <literal>{FILENAME}</literal> could be on a totally
    different position in one of the target languages, so 
    splitting the string is not an option.    
   </simpara>
   <simpara>
    The solution is to replace the "{FILENAME}" with "%s" and
    use the <command>sprintf()</command> php function with the
    string. That way your strings are as portable as possible.
   </simpara>
  </sect2>
  <sect2>
   <title>Strings with multiple lines</title>
   <simpara>
    Sometimes you need to translate strings which are on multiple
    lines: They are noted in <filename>.po</filename> files
    on multiple lines as well, with quotes at the beginning
    and the end of a line. The first line is just a
    <literal>""</literal>.
   </simpara>
   <programlisting role="gettext_po">
<![CDATA[
msgid ""
"this is a"
"multiline string"
msgstr ""
"Dies ist ein"
"mehrzeiliger String"
]]>
   </programlisting>
  </sect2>
 </sect1>
<!--
@fixme:
test examples on windows
--> 
</chapter>
