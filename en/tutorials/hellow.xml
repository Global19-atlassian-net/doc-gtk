<?xml version="1.0" encoding="ISO-8859-1" ?>
<chapter id="tutorials.hellow">
 <title>Hello World Tutorial</title>
 <simpara>
  Quando voc&ecirc; come&ccedil;a a aprender uma linguagem, o primeiro programa
  que voc&ecirc; &eacute; ensinado &agrave; fazer &eacute; o famoso 'hello world'. 
  Ent&atilde;o, somente para n&atilde;o ser diferente de ningu&eacute;m, o primeiro 
  tutorial deste manual ser&aacute; o famoso 'hello world'!
 </simpara>
 <simpara>
  Atrav&eacute;s dos tutorias n&oacute;s esperamos que voc&ecirc; j&aacute; tenha um conhecimento razo&aacute;vel
  do PHP. Os tutoriais s&atilde;o feitos para que o usu&aacute;rio possa ter uma id&eacute;ia
  do uso do PHP-GTK, e as id&eacute;ias e t&eacute;cnicas por tr&aacute;s dele.
 </simpara>
 <simpara>
  Neste tutorial voc&ecirc; ir&aacute; criar uma simples janela com o texto "Hello
  World!" escrito nela.
 </simpara>
 <simpara>
  N&oacute;s come&ccedil;aremos mostrando todo o programa e logo ap&oacute;s iremos explicar
  cada linha do programa, dando uma id&eacute;ia de como &eacute; uma aplica&ccedil;&atilde;o b&aacute;sica
  feita em PHP-GTK.
 </simpara>
 <para>
  <example>
   <title>PHP-GTK Hello World</title>
   <programlisting role="php">
if (!class_exists('gtk')) {    
	if (strtoupper(substr(PHP_OS, 0,3) == 'WIN'))    
		dl('php_gtk.dll');  
	else    
		dl('php_gtk.so');
	}    
	function deleta_evento()
		{    
			return false;
		}    
	function fechar()
		{    
			print("Fechando...\n");    
			gtk::main_quit();
		}    
	function hello()
	{    
		global $window;    
		print "Hello World!\n";    
		$window->destroy();
	}    
	$window = &new GtkWindow();
	$window->connect('destroy', 'fechar');
	$window->connect('delete-event', 'deleta_evento');
	$window->set_border_width(10);    
	$button = &new GtkButton('Hello World!');
	$button->connect('clicked', 'hello');
	$window->add($button);    
	$window->show_all();    
	gtk::main();
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Carregando o PHP-GTK</title>
   <programlisting role="php">
if (!class_exists('gtk')) {
    if (strtoupper(substr(PHP_OS, 0,3) == 'WIN'))
    dl('php_gtk.dll');
 else
    dl('php_gtk.so');
}
   </programlisting>
  </example>
  Estas primeiras linhas checam se a extens&atilde;o do PHP-GTK est&aacute;
  dispon&iacute;vel, e carrega ela caso n&atilde;o esteja carregada. Isto &eacute; feito
  pelo uso das fun&ccedil;&otilde;es <literal>dl('php_gtk.dll');</literal> ou
  <literal>dl('php_gtk.so');</literal> no Windows e Linux
  respectivamente.
 </para>
 <para>
  <example>
   <title>A função deleta_evento()</title>
   <programlisting role="php">
function deleta_evento()
{
    return false;
}
   </programlisting>
  </example>
  A fun&ccedil;&atilde;o <literal>deleta_evento()</literal> &eacute; registrada como um evento
  (veja abaixo) para o sinal <signalname>delete-event</signalname>. Ela
  retorna <literal>false</literal>, dizendo ao PHP-GTK para disparar o 
  evento de sinal padr&atilde;o, que no nosso caso &eacute; o m&eacute;todo
  <function class="GtkObject">destroy()</function>. Se a fun&ccedil;&atilde;o retornar
  <literal>true</literal>, o PHP-GTK ir&aacute; parar o evento de sinal padr&atilde;o
  que estava rodando at&eacute; este ponto. &Eacute; importante saber isto se voc&ecirc;
  pretende escrever uma fun&ccedil;&atilde;o definida pelo usu&aacute;rio no lugar da fun&ccedil;&atilde;o
  <function class="GtkObject">destroy()</function> - por exemplo, para
  produzir uma caixa de di&aacute;logo que confirma se o usu&aacute;rio pretende fechar a
  janela do aplicativo.
 </para>
 <simpara>
  N&atilde;o &eacute; estritamente necess&aacute;rio retornar <literal>false</literal> 
  It is not strictly necessary to return <literal>false</literal> para conectar
  o sinal <signalname>delete-event</signalname> com o m&eacute;todo 
  <function class="GtkObject">destroy()</function>, mas este sinal em particular
  retornar <literal>false</literal> por padr&atilde;o.  &Eacute; poss&iacute;vel n&atilde;o especificar nenhum
  comportamento para todos os sinais <signalname>delete-event</signalname> de todas as janelas, 
  baste ter o sinal de m&eacute;todo <signalname>destroy</signalname> no lugar certo, como
  ele est&aacute; aqui.
 </simpara>
 <para>
  <example>
   <title>A fun&ccedil;&atilde;o fechar()</title>
   <programlisting role="php">
function fechar()
{    
	print(&quot;Fechando...\n&quot;);    
	gtk::main_quit();
}    
   </programlisting>
  </example>
  A fun&ccedil;&atilde;o <literal>fechar()</literal> &eacute; registrada como um evento para o sinal
  <signalname>destroy</signalname>.  A fun&ccedil;&atilde;o imprime o texto
  <literal>&quot;Fechando...\n&quot;</literal> para o console e chama a fun&ccedil;&atilde;o
  gtk::<function>main_quit()</function>.
 </para>
 <para>
  <example>
   <title>A fun&ccedil;&atilde;o hello()</title>
   <programlisting role="php">
function hello()
{
    global $window;
    print &quot;Hello World!\n&quot;;
    $window-&gt;destroy();
}
   </programlisting>
  </example>
  A fun&ccedil;&atilde;o <literal>hello()</literal> &eacute; registrada como um evento para o sinal 
  <signalname>clicked</signalname> do bot&atilde;o.  Ela globaliza a vari&aacute;vel
  <literal>$window</literal> para que ela possa ser inst&acirc;nciada pela
  <classname>GtkWindow</classname> criada para ser usada em todo o script.  Com isto
  &eacute; poss&iacute;vel imprimir o texto <literal>&quot;Hello World&quot;</literal> para o console
  antes de chamar o m&eacute;todo <function class="GtkObject">destroy()</function>, que dispara
  o sinal <signalname>destroy</signalname>, que dispara a fun&ccedil;&atilde;o <literal>fechar()</literal>.
 </para>
 <simpara>
  Outra maneira que a fun&ccedil;&atilde;o <literal>hello()</literal> poderia acessar a vari&aacute;vel
  <literal>$window</literal> era se a vari&aacute;vel fosse passa como um
  <link linkend="gtk.signals.custom.params">par&acirc;metro customizado</link>.
 </simpara>
 <para>
  <example>
   <title>Configurando a Janela</title>
   <programlisting role="php">
$window = &amp;new GtkWindow();
$window-&gt;connect('destroy', 'fechar');
$window-&gt;connect('delete-event', 'deleta_evento');
$window-&gt;set_border_width(10);
   </programlisting>
  </example>
  As pr&oacute;ximas quatro linhas configurando a janela. Prmeiramente n&oacute;s criamos a inst&acirc;ncia
  <classname>GtkWindow</classname>.  Uma vez criada, ela chama a fun&ccedil;&atilde;o 
  <function class="GtkObject">connect()</function>  do m&eacute;todo <literal>window</literal> que registra a fun&ccedil;&atilde;o
  <literal>fechar()</literal> como um m&eacute;todo para o sinal 
  <signalname>destroy</signalname> e a fun&ccedil;&atilde;o 
  <literal>deleta_evento()</literal> como um m&eacute;todo para o sinal
  <signalname>delete-event</signalname>.  Finalmente, n&oacute;s chamamos a fun&ccedil;&atilde;o
  <function class="GtkContainer">set_border_width()</function> para setar
  a largura da borda em 10-pixel na inst&acirc;ncia
  <classname>GtkWindow</classname> que n&oacute;s acabamos de criar.
 </para>
 <para>
  <example>
   <title>Configurando o Botão</title>
   <programlisting role="php">      
$button = &amp;new GtkButton('Hello World!');
$button-&gt;connect('clicked', 'hello');
$window-&gt;add($button);

$window-&gt;show_all();
   </programlisting>
  </example>
  Estas tr&ecirc;s linhas do script criam e configuram o bot&atilde;o. Na primeira
  linha do c&oacute;digo n&oacute;s criamos o "code snippet" para a nova inst&acirc;ncia
  <classname>GtkButton</classname>.  O argumento construtor
  do texto que n&oacute;s queremos mostrar no bot&atilde;o - neste caso
  <literal>&quot;Hello World!&quot;</literal>.  N&oacute;s ent&atilde;o chamamos o m&eacute;todo
  <function class="GtkObject">connect()</function> para registrar a fun&ccedil;&atilde;o
  <literal>hello()</literal> que n&oacute;s hav&iacute;amos definido, como o evento do sinal
  <signalname>clicked</signalname>.  Finalmente n&oacute;s adicionamos o bot&atilde;o &agrave; janela
  que n&oacute;s hav&iacute;amos criado anteriormente chamando a fun&ccedil;&atilde;o
  <function class="GtkContainer">add()</function> do nosso m&eacute;todo
  <classname>GtkContainer</classname>, a vari&aacute;vel
  <literal>$window</literal>, ent&atilde;o dispara tudo que cont&eacute;m na vari&aacute;vel
  <literal>$window</literal> (e o child widget, 
  <literal>$button</literal>) chamando o m&eacute;todo 
  <function class="GtkWidget">show_all()</function>, tamb&eacute;m definido na nossa inst&acirc;ncia
  <classname>GtkWindow</classname>.
 </para>
 <para>
  <example>
   <title>A chamada ao gtk::main</title>
   <programlisting role="php">
gtk::main();
   </programlisting>
  </example>
  A &uacute;ltima linha do script chama a fun&ccedil;&atilde;o est&aacute;tica
  gtk::<function>main()</function>.  Ela mostra ao PHP-GTK que n&oacute;s
  acabamos nossa interface, e isto dispara o loop principal que come&ccedil;a
  a mostrar os eventos disparados pelo usu&aacute;rio interegindo com as fun&ccedil;&otilde;es
  que n&oacute;s definimos.
 </para>
</chapter>

<!--

 * Local variables:
 * tab-width: 1
 * c-basic-offset: 1
 * End:
 * vim600: et sw=1 ts=1 tw=78 fdm=marker
 * vim<600: et sw=1 ts=1 tw=78
-->

