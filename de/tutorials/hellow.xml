<chapter id="tutorials.hellow">
 <title>&Uuml;bung: Hallo Welt</title>
 <simpara>
  Wenn man eine Programmiersprache zu lernen beginnt ist oft das erste
  Programm das man schreibt ein &quot;Hallo Welt&quot; Programm.
  Um sich also allen anderen anzupassen, ist die erste &Uuml;bung in diesem
  Handbuch eine Hallo Welt &Uuml;bung!
 </simpara>
 <simpara>
  Als Voraussetzung f&uuml;r die &Uuml;bungen sollte man bereits
  angemessene Kenntnisse von PHP selbst haben. Die &Uuml;bungen
  sollen dazu dienen dem Benutzer zu veranschaulichen wie man
  dann PHP-GTK benutzen kann und die dahinterstehenden Grundlagen 
  und Techniken und zu vermitteln.
 </simpara>
 <simpara>
  In dieser &Uuml;ung werden wir ein einfaches Fenster mit dem Text "Hallo
  Welt" erstellen, dies wird Ihnen einen &Uuml;berblick einer 
  grundlegenden PHP-GTK Anwendung geben. 
 </simpara>
 <simpara>
  Wir werden zun&auml;chst das Programm auflisten und es dann
  Zeile f&uuml;r Zeile erkl&auml;ren.
 </simpara>
 <para>
  <example>
   <title>PHP-GTK Hallo Welt Programm Listing</title>
   <programlisting role="php">
if (!class_exists('gtk')) {
 if (strtoupper(substr(PHP_OS, 0,3) == 'WIN'))
  dl('php_gtk.dll');
 else
  dl('php_gtk.so');
}

function delete_event()
{
    return false;
}

function shutdown()
{
    print("Shutting Down");
    Gtk::main_quit();
}

function hello()
{
    global $window;
    print "Hello World";
    $window->destroy();
}

$window = &amp;new GtkWindow();
$window->connect('destroy', 'shutdown');
$window->connect('delete-event', 'delete_event');
$window->set_border_width(10);

$button = &amp;new GtkButton('Hello World!');
$button->connect('clicked', 'hello');
$window->add($button);

$window->show_all();

Gtk::main();
   </programlisting>
  </example>
 </para>
 <para>
 <example>
  <title>PHP-GTK laden</title>
  <programlisting role="php">
if(!class_exists('gtk')){
 if (strtoupper(substr(PHP_OS, 0, 3) == 'WIN')
  dl('php_gtk.dll');
 else
  dl('php_gtk.so');
}
  </programlisting>
 </example>
  Diese wenigen Zeilen pr&uuml;fen ob die PHP-GTK Erweiterung
  bereits geladen ist, wenn nicht wird sie geladen. Dies wird durch
  den Befehl <literal>dl('php_gtk.dll')</literal> unter Windows oder 
  <literal>dl('php_gtk.so')</literal> unter allen anderen Systemen
  erledigt.
 </para>
 <para>
  <example>
   <title>Die delete_event Funktion</title>
   <programlisting role="php">
function delete_event()
{
    return false;
}
   </programlisting>
  </example> 
  die <literal>delete_event()</literal> Funktion ist als Handler (siehe
  unten) f&uuml;r das <signalname>delete-event</signalname> Signal
  registriert. Es gibt <literal>false</literal> zur&uuml;ck um PHP-GTK zu
  sagen dass es mit dem Erscheinen des Events weitermachen soll. Wenn die
  Funktion <literal>true</literal> zur&uuml;ckgeben w&uuml;rde w&uuml;rde
  PHP-GTK mit der Ereignisbehandlung hier aufh&ouml;ren.
 </para>
 <para>
  <example>
   <title>Die shutdown() Funktion</title>
   <programlisting role="php">
function shutdown()
{
     print("Herunterfahren");
     Gtk::main_quit();
}
   </programlisting>
  </example>
  Die <literal>shutdown()</literal> Funktion ist als Handler f&uuml;r das
  <signalname>shutdown</signalname> signal registriert. Die Funktion gibt
  den Text <literal>"Herunterfahren"</literal> an der Konsole aus und ruft
  dann die statische Funktion Gtk::<function>main_quit</function> auf.
 </para>
 <para>
  <example>
   <title>Die hello() Funktion</title> 
   <programlisting role="php">
function hello()
{
    global $window;
    print "Hallo Welt!";
    $window->destroy();
}   
   </programlisting>
  </example>
  Die <literal>hello()</literal> Funktion ist als Handler f&uuml;r das
  <signalname>clicked</signalname> des Buttons registiriert. Sie globalisiert
  die <literal>$window</literal> Variable so dass es auf die Instanz von
  <classname>GtkWindow</classname> weiter unten im Skript zugreifen kann. Sie
  gibt den Text "<literal>Hallo Welt!</literal>" auf der Konsole aus und
  zerst&ouml;rt dann das Fenster, was wiederum das
  <signalname>destroy</signalname> Signal ausl&ouml;st.
 </para>
 <para>
  <example>
   <title>Das Fenster aufbauen</title>
   <programlisting role="php">
$window = &amp;new GtkWindow;
$window->connect('destroy', 'shutdown');
$window->connect('delete-event', 'delete_event');
$window->set_border_width(10);
   </programlisting>
  </example>
  Die n&auml;chsten vier Zeilen bauen das eigentliche Fenster der Applikation
  auf. Zunerst erzeugen wir eine Instanz von <classname>GtkWindow</classname>,
  wenn dies erfolgreich war rufen wir die Funktion 
  <function class="GtkObject">connect</function> auf um die
  <literal>shutdown</literal> Funktion als Handler f&uuml;r das
  <signalname>destroy</signalname> Signal zu registrieren und die
  <literal>delete_event</literal> Funktion als Handler f&uuml;r das
  <signalname>dlete-event</signalname> Signal. zuletzt rufen wir die Funktion
  <function class="GtkContainer">set_border_width</function> auf um den Rahmen
  um die Instanz der <classname>GtkWindow</classname> Klassse zu setzen die
  wir gerade erstellt haben.
 </para>
 <para>
  <example>
   <title>Erstellen des Buttons</title>
   <programlisting role="php"> 
$button = &amp;new GtkButton('Hello World!');
$button->connect('clicked', 'hello');
$window->add($button);

$window->show_all();
   </programlisting>
  </example>
  Diese drei Zeilen des Scriptes rufen die Funktion <function>main</function>
  auf, diese weist PHP-GTK an das Fenster das wir erstellt haben anzuzeigen
  und auf Benutzereingaben zu warten um Ereignisse zu starten so dass die
  Callback Funktionen die wir zuvor definiert haben aufgerufen werden und die
  verschiedenen Aktionen ausgef&uuml;hrt.
 </para>  
  
</chapter>

<!--

 * Local variables:
 * tab-width: 1
 * c-basic-offset: 1
 * End:
 * vim600: et sw=1 ts=1 tw=78 fdm=marker
 * vim<600: et sw=1 ts=1 tw=78
-->

