<?xml version="1.0" encoding="ISO-8859-1" ?>
<classentry id="gtk.gtkdialog">
 <classmeta>
  <classtitle>GtkDialog</classtitle>
  <classparent>GtkWindow</classparent>a
  <shortdesc>
   Widget das die Erstellung eines Popup Fensters vereinfacht.
  </shortdesc>
  <desc>
   <simpara>
    <classname>GtkDialog</classname> dient dazu ein Popup Fenster zur
    Pr&auml;sentation und zum anfordern kleiner Datenmengen darzustellen. Es
    ist aus zwei Containern zusammengestellt, die von einem
    <classname>GtkSeparator</classname> getrennt werden. Der obere Container
    ist eine <classname>GtkVBox</classname> und w&uuml;rde typischerweise
    <classname>GtkLabel</classname> und <classname>GtkEntry</classname> Widgets
    enthalten um dem User Informationen anzuzeigen und eine Eingabe zu
    erlauben. Der untere Container ist eine <classname>GtkHBox</classname> und
    w&uuml;rde &uuml;blicherweise Dialogbuttons enthalten, zum Beispiel
    <literal>O.K.</literal>, <literal>Abbrechen</literal>
    <literal>Hilfe</literal> und so weiter.
   </simpara>
   <simpara>
    Beachte dass dem <classname>GtkDialog</classname> selbst keine
    direkten Kinderwidgets hinzugef&uuml;gt werden sollten, sondern den beiden
    Containern, auf welche man als <propname class="GtkDialog">vbox</propname>
    und <propname class="GtkDialog">hbox</propname> und 
    <propname class="GtkDialog">action_area</propname>zugreifen kann.
   </simpara>
   <simpara>
    Dialoge k&uuml;nnen modal gemacht werden (woraufhin sie die restliche
    Eingabe der gesamten Applikation einfrieren) indem man die
    <function class="GtkWindow">set_modal()</function> Methode der
    <classname>GtkWidget</classname> Klasse auf das
    <classname>GtkDialog</classname> Objekt anwendet.
   </simpara>
   <simpara>
    <!--
    Die kann zu dem set_modal() Feld in gtkwindow.xml verschoben werden wenn
    es zusammenkommt - bitte diesen Abschnitt nicht einfach loeschen! sf
    -->
    Beachte dass <classname>GtkDialog</classname> modal zu machen nicht die
    ausf&uuml;hrung des Codes stoppt der es aufruft. Im untenstehenden
    Beispiel wird der Aufruf 'echo' immer noch ausgef&uuml;hrt obwohl die
    Hauptapplikation nicht auf Benutzereingabe antwortet. Um die
    Ausf&uuml;hrung des Codes zu stoppen muss der 
    <classname>GtkDialog</classname> einen Aufruf zu einer verschachtelten
    gtk::<function>main()</function> enthalten. Die Ausf&uuml;hrung wird dann
    weitergehen wenn die dazugeh&ouml;rige <function>main_quit()</function>
    Funktion aufgerufen wird.
   </simpara>
   <para>
    <example>
     <title>Benutzung von <function class="GtkWindow">set_modal()</function></title>
     <programlisting role="php">
$dialog = &amp;new GtkDialog(); 
$dialog-&gt;set_modal(TRUE); 
echo &quot;Diese Nachricht wird trotzdem noch ausgegeben! \n&quot;;
     </programlisting>
    </example>
   </para>
  </desc>
 </classmeta>

 <constructor id="gtk.gtkdialog.constructor">
  <funcsynopsis>
   <funcprototype>
    <funcdef> <function>GtkDialog</function></funcdef>
    <paramdef>void<parameter></parameter></paramdef>
   </funcprototype>
  </funcsynopsis>
  <shortdesc>
   Erstellt die Basus für ein Popup Dialog Fenster.
  </shortdesc>
  <desc>
   <para>
    Erstellt die Basis für ein Popup Dialog Fenster.
    <example>
     <title>Erstellen eines Dialogfensters</title>
     <programlisting role="php">
$dialog = &amp;new GtkDialog();
$dialog-&gt;set_policy(true, false, false);
$dialog-&gt;set_position(GTK_WIN_POS_CENTER);
$dialog-&gt;connect_object(&quot;destroy&quot;, array(&quot;gtk&quot;, 
&quot;main_quit&quot;));

$dialog_vbox = $dialog-&gt;vbox; 
$dialog_action_area = $dialog-&gt;action_area; 

$user_info_label = &amp;new GtkLabel(&quot;Some Important Information&quot;);
$dialog_vbox-&gt;pack_start($user_info_label); 

$ok_button = &amp;new GtkButton(&quot;OK&quot;);
$dialog_action_area-&gt;pack_start($ok_button);

gtk::main();
     </programlisting>
    </example>
   </para>
  </desc>
 </constructor>

 <properties>

  <prop id="gtk.gtkdialog.property.vbox" type="ro">
   <propname>vbox</propname>
   <proptype>GtkWidget</proptype>
   <shortdesc>
    Oberer Container.
   </shortdesc>
   <desc>
    <simpara>
     <propname class="GtkDialog">vbox</propname> ist die
     <classname>GtkVBox</classname> im oberen Bereich des
     <classname>GtkDialog</classname> Widgets. Der Entwickler würde hier
     typischerweise Widgets wie <classname>GtkLabel</classname> und
     <classname>GtkEntry</classname> hinzufügen um Informationen mit dem
     Endbenutzer auszutauschen.
    </simpara>
   </desc>
  </prop>

  <prop id="gtk.gtkdialog.property.action_area" type="ro">
   <propname>action_area</propname>
   <proptype>GtkWidget</proptype>
   <shortdesc>
    Lower container.
   </shortdesc>
   <desc>
    <simpara>
     <propname class="GtkDialog">action_area</propname> ist die
     <classname>GtkHbox</classname> am Boden des
     <classname>GtkDialog</classname> Widgets, unter dem
     <classname>GtkSeparator</classname>. Dies ist wo der Entwickler
     üblicherweise einen oder zwei <classname>GtkButton</classname>s einsetzt
     die dann mit Funktionen verbunden werden die den Dialog beenden und/oder
     den Informationen, die aus dem Dialog hervorgehen entsprechende
     Massnahmen durchführen.
    </simpara>
   </desc>
  </prop>

 </properties>

</classentry>
<!--
 * Local variables:
 * tab-width: 1
 * c-basic-offset: 1
 * End:
 * vim600: et sw=1 ts=1 tw=78 fdm=marker
 * vim<600: et sw=1 ts=1 tw=78
-->
