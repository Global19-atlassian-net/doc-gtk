<?xml version="1.0" encoding="UTF-8" ?>
<refentry id="gdk.functions">
 <refmeta>
  <refentrytitle>GDK Функции</refentrytitle>
  <shortdesc>
   GDK функиции, не принадлежащие ни одному классу
  </shortdesc>
 </refmeta>

  <method id="gdk.method.atom_intern">
   <funcsynopsis>
    <funcprototype>
     <funcdef>GdkAtom <function>gdk::atom_intern</function></funcdef>
     <paramdef>string <parameter>atom_name</parameter></paramdef>
     <paramdef>int 
      <parameter><optional>only_if_exists = FALSE</optional></parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.beep">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::beep</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Издаёт звук.
   </shortdesc>
   <desc>
    <simpara>
     Данная функция издаёт предупреждающий звук. Звук зависит
     от системы и настроек.
    </simpara>
   </desc>
  </method>

  <method id="gdk.method.colormap_new">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkColormap</classname> 
      <function>gdk::colormap_new</function>
     </funcdef>
     <paramdef>
      <classname>GdkVisual</classname> 
      <parameter>visual</parameter>
     </paramdef>
     <paramdef>bool <parameter>allocate</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Создаёт новый <classname>GdkColormap</classname>.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.colormap_get_system">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkColormap</classname> 
      <function>gdk::colormap_get_system</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Возвращает системную палитру.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.colormap_get_system_size">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>gdk::colormap_get_system_size</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Возвращает размер систмной палитры.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.color_parse">
   <funcsynopsis>
    <funcprototype>
     <funcdef>GdkColor <function>gdk::color_parse</function></funcdef>
     <paramdef>string <parameter>color_spec</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Создаёт новый <classname>GdkColor</classname> из определения цвета.
   </shortdesc>
   <desc>
    <simpara>
     Данная функция создаёт новую <classname>GdkColor</classname> структуру
     и заполняет её соответственно цвету, укзанному в
     <parameter>color_spec</parameter> параметре.  Строка, передаваемая как параметр
     может быть шестнадцатиричным представлением цвета например 
     <literal>'#FF0000'</literal>, или соответствующим именем цвета, привязаным в
     <filename>rgb.txt</filename>, например <literal>'red'</literal>.
    </simpara>
    <para>
     Win32 пользователи не смогут найти этот файл, так как он вкомпилирован. 
     Хорошая <filename>rgb.txt</filename> страница с описанием
     <ulink url="&url.rgbtxt;">доступна здесь</ulink>.
    </para>
   </desc>
  </method>

  <method id="gdk.method.cursor_new">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkCursor</classname> 
      <function>gdk::cursor_new</function>
     </funcdef>
     <paramdef>
      <enumname>GdkCursorType</enumname> 
      <parameter>cursor_type</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Создаёт новый <classname>GdkCursor</classname>.
   </shortdesc>
   <desc>
    <simpara>
     Создаёт новый курсор одного из предопределённых типов курсоров.
    </simpara>
    <simpara>
     Пример вы можете найти на 
     <function class="GdkWindow">set_cursor</function>.
    </simpara>
   </desc>
  </method>

  <method id="gdk.method.cursor_new_from_pixmap">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkCursor</classname> 
      <function>gdk::cursor_new_from_pixmap</function>
     </funcdef>
     <paramdef>
      <classname>GdkPixmap</classname> 
      <parameter>source</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkPixmap</classname> 
      <parameter>mask</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkColor</classname> 
      <parameter>fg</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkColor</classname> 
      <parameter>bg</parameter>
     </paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Создаёт новый <classname>GdkCursor</classname> используя pixmap.
   </shortdesc>
   <desc>
    <simpara>
     Данная функиця создаёт новый курсор из pixmap-а. После того, как вы
     создали курсор, для того, чтобы сделать курсор активным 
     должна быть использована функция <function class="GdkWindow">set_cursor</function>
      в gdk окне виджета. Курсор буде видимым когда мышь будет находиться
     над поверхностью данного виджета.
    </simpara>
    <simpara>
     В Gtk 1.x, вы можете делать только монохромные курсоры. Это значит,
     что любой цвет (кроме черного и <literal>None</literal>) 
     будет превращен в <parameter>fg</parameter> или <parameter>bg</parameter>
     цвет.
    </simpara>
    <simpara>
     Параметры <parameter>x</parameter> и <parameter>y</parameter>
     являются координатами hotspot курсора <literal>(0,0)</literal> описывают 
     верхнюю левую позицию.
    </simpara>
    <note>
     Данная функция доступна с PHP-Gtk 1.0.1
    </note>
    <example>
     <title>Использование нового курсора</title>
     <programlisting role="php">
<![CDATA[<?php
if( !extension_loaded('gtk')) {	
	dl( 'php_gtk.' . PHP_SHLIB_SUFFIX);
}

$window = &new GtkWindow();
$window->set_default_size(300, 300);
$window->connect_object('destroy', array('gtk', 'main_quit'));

$cursorpmp = array(
  "16 16 3 1",
  "  c None",
  ". c white",
  "1 c black",
  "                ",
  "....  . . ...   ",
  ".111..1.1.111.  ",
  ".1..1.1.1.1..1. ",
  ".111..111.111.  ",
  ".1.. .1.1.1..   ",
  ".1.  .1.1.1.    ",
  " .    .   .     ",
  "  ...   .       ",
  " .111. .1. .  . ",
  ".1...  .1..1..1.",
  ".1. .. .1..1.1. ",
  ".1..11.111.11.  ",
  ".1. .1..1..1.1. ",
  " .111. .11.1..1.",
  "  ...   .. .  . ",
);

$window->realize();
$gdkwin = $window->window;

list($pixmap, $mask) = gdk::pixmap_create_from_xpm_d($gdkwin, null, $cursorpmp);

$colBlue	= &new GdkColor( 'blue');
$style = new GtkStyle();
$cursor =gdk::cursor_new_from_pixmap($pixmap, $mask, $style->white, $colBlue, 1, 1);

$gdkwin->set_cursor($cursor);
$window->show();

gtk::main();
?>]]>
     </programlisting>
    </example>
   </desc>
  </method>

  <method id="gdk.method.drag_status">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::drag_status</function></funcdef>
     <paramdef>
      <classname>GdkDragContext</classname> 
      <parameter>context</parameter>
     </paramdef>
     <paramdef>
      <enumname>GdkDragAction</enumname> 
      <parameter>action</parameter>
     </paramdef>
     <paramdef>int <parameter>time</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.draw_arc">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::draw_arc</function></funcdef>
     <paramdef>GdkWindow <parameter>drawable</parameter></paramdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>int <parameter>filled</parameter></paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
     <paramdef>int <parameter>angle1</parameter></paramdef>
     <paramdef>int <parameter>angle2</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Draws an arc.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.draw_gray_image">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::draw_gray_image</function></funcdef>
     <paramdef>GdkWindow <parameter>drawable</parameter></paramdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
     <paramdef>
      <enumname>GdkRgbDither</enumname> 
      <parameter>dith</parameter>
     </paramdef>
     <paramdef>string <parameter>buf</parameter></paramdef>
     <paramdef>int <parameter>rowstride</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.draw_line">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::draw_line</function></funcdef>
     <paramdef>GdkWindow <parameter>drawable</parameter></paramdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>int <parameter>x1</parameter></paramdef>
     <paramdef>int <parameter>y1</parameter></paramdef>
     <paramdef>int <parameter>x2</parameter></paramdef>
     <paramdef>int <parameter>y2</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Draws a line.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.draw_pixmap">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::draw_pixmap</function></funcdef>
     <paramdef>GdkWindow <parameter>drawable</parameter></paramdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>GdkWindow <parameter>src</parameter></paramdef>
     <paramdef>int <parameter>xsrc</parameter></paramdef>
     <paramdef>int <parameter>ysrc</parameter></paramdef>
     <paramdef>int <parameter>xdest</parameter></paramdef>
     <paramdef>int <parameter>ydest</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.draw_point">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::draw_point</function></funcdef>
     <paramdef>GdkWindow <parameter>drawable</parameter></paramdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.draw_rectangle">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::draw_rectangle</function></funcdef>
     <paramdef>GdkWindow <parameter>drawable</parameter></paramdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>int <parameter>filled</parameter></paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Draws a rectangle.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.draw_rgb_32_image">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::draw_rgb_32_image</function></funcdef>
     <paramdef>GdkWindow <parameter>drawable</parameter></paramdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
     <paramdef>
      <enumname>GdkRgbDither</enumname> 
      <parameter>dith</parameter>
     </paramdef>
     <paramdef>string <parameter>buf</parameter></paramdef>
     <paramdef>int <parameter>rowstride</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.draw_rgb_image">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::draw_rgb_image</function></funcdef>
     <paramdef>GdkWindow <parameter>drawable</parameter></paramdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
     <paramdef>
      <enumname>GdkRgbDither</enumname> 
      <parameter>dith</parameter>
     </paramdef>
     <paramdef>string <parameter>rgb_buf</parameter></paramdef>
     <paramdef>int <parameter>rowstride</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.draw_rgb_image_dithalign">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void 
      <function>gdk::draw_rgb_image_dithalign</function>
     </funcdef>
     <paramdef>GdkWindow <parameter>drawable</parameter></paramdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>int <parameter>width</parameter></paramdef>
     <paramdef>int <parameter>height</parameter></paramdef>
     <paramdef>
      <enumname>GdkRgbDither</enumname> 
      <parameter>dith</parameter>
     </paramdef>
     <paramdef>string <parameter>rgb_buf</parameter></paramdef>
     <paramdef>int <parameter>rowstride</parameter></paramdef>
     <paramdef>int <parameter>xdith</parameter></paramdef>
     <paramdef>int <parameter>ydith</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.draw_string">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::draw_string</function></funcdef>
     <paramdef>GdkWindow <parameter>drawable</parameter></paramdef>
     <paramdef>
      <classname>GdkFont</classname> 
      <parameter>font</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>string <parameter>string</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Прорисовывает строку текста.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.draw_text">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::draw_text</function></funcdef>
     <paramdef>GdkWindow <parameter>drawable</parameter></paramdef>
     <paramdef>
      <classname>GdkFont</classname> 
      <parameter>font</parameter>
     </paramdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>int <parameter>x</parameter></paramdef>
     <paramdef>int <parameter>y</parameter></paramdef>
     <paramdef>string <parameter>text</parameter></paramdef>
     <paramdef>int <parameter>text_length</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.flush">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::flush</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.font_load">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkFont</classname> 
      <function>gdk::font_load</function>
     </funcdef>
     <paramdef>string <parameter>font_name</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Загружает заданный шрифт.
   </shortdesc>
   <desc>
    <simpara>
     Данный метод загружает font_name, который должен быть в виде
     <emphasis>X Logical Font Description (Логическое Описание Шрифтов Х)</emphasis> 
     (<acronym>XLFD</acronym>).
    </simpara>
    <simpara>
     <acronym>XLFD</acronym> это полностью системно-независимый
    способ описания шрифтов.  Он состоит из 14 полей, большинство из которых
     для гибкости могут быть представлены в виде группового символа *,
     кроме
     <literal>addedstyle</literal> и
     <literal>registry</literal>, которое является обязательным полем. 
     Описание начинается с тире, <literal>-</literal>, каждое поле также
     отделено этим символом.
    </simpara>
    <simpara>
     Если вам необходимо больше информации, чем дано здесь, то полноя
     XWindows определение доступно в
     <ulink url="&url.xlfd;">XWindows документации</ulink>.
    </simpara>
    <para>
     <simplelist>
      <member>
       foundry xxx (где был создан шрифт.  'unknown' is okay)
      </member>
      <member>
       family xxx (e.g. Arial)
      </member>
      <member>
       weight xxx (e.g. bold, medium)
      </member>
      <member>
       slant x (r - roman, i = italic, o = oblique)
      </member>
      <member>
       setwidth xxx (e.g. normal, condensed)
      </member>
      <member>
       addedstyle xxx (e.g. serif, sans.  Leave blank for none)
      </member>
      <member>
       pixelsize N (set either this or pointsize, not both)
      </member>
      <member>
       pointsize N (размер точки, e.g. 120)
      </member>
      <member>
       resx N (x - разрешение шрифта, точек на дюйм)
      </member>
      <member>
       resy N (y - разрешение шрифта, точек на дюйм)
      </member>
      <member>
       space x (m = monospaced, p = proportional, c = cell)
      </member>
      <member>
       averagewidth N (средняя ширина символа в пикселях.  0 если неизвестно)
      </member>
      <member>
       registry xxx (e.g. utf, iso8859 or adobe)
      </member>
      <member>
       encoding xxx (e.g. 1 or 2 (for iso8859) or fontspecific)
      </member>
     </simplelist>
    </para>
    <simpara>
     Типичная загрузка шрифта должна быт похожа на следующее:
     <literal>
      $font = 
gdk::font_load('-unknown-Arial-normal-r-normal--*-120-96-96-p-0-iso8859-1');
     </literal>
    </simpara>
    <note>
     <simpara>
      Информация о шрифте в <acronym>XLFD</acronym> формате может быть
      получена на любой системе посредством использования виджетов
      <classname>GtkFontSelection</classname> или
      <classname>GtkFontSelectionDialog</classname>.
     </simpara>
    </note>
    <simpara>
     Имейте ввиду, что есть спорные вопросы размеров в <classname>GdkFont</classname> в
     версии GTK+ используемой PHP-GTK для win32.  Как результат, 
     <emphasis>в win32 размер точки всегда должен быть определён</emphasis> - 
     использование размера пикселя может давать непредсказуемые результаты.
    </simpara>
   </desc>
  </method>

  <method id="gdk.method.fontset_load">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkFont</classname> 
      <function>gdk::fontset_load</function>
     </funcdef>
     <paramdef>string <parameter>fontset_name</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Загружает набор шрифтов, описаных как fontset.
   </shortdesc>
   <desc>
    <simpara>
     Данный метод используется любой из набора шрифтов подходит. 
     Обычно, это используется для интернационализации.  Также может быть полезным
     везде, где необходима гибкость при выборе шрифта.
    </simpara>
    <simpara>
     Работает точно также, как и 
     <function>gdk::font_load</function>, отделяя каждый из возможных шрифтов запятой.
      При выполнении будет использован первый подходящи шрифт.
    </simpara>
    <simpara>
     В win32, метод <function>fontset_load</function> используется
     внутренне независимо от того, был ли этот метод вызван или 
     <function>gdk::font_load</function>.
    </simpara>
   </desc>
  </method>

  <method id="gdk.method.get_display">
   <funcsynopsis>
    <funcprototype>
     <funcdef>string <function>gdk::get_display</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Возвращает имя системы.
   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.input_remove">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::input_remove</function></funcdef>
     <paramdef>int <parameter>tag</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.pixmap_colormap_create_from_xpm">
   <funcsynopsis>
    <funcprototype>
     <funcdef>XXX 
      <function>gdk::pixmap_colormap_create_from_xpm</function>
     </funcdef>
     <paramdef>XXX</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.pixmap_colormap_create_from_xpm_d">
   <funcsynopsis>
    <funcprototype>
     <funcdef>XXX 
      <function>gdk::pixmap_colormap_create_from_xpm_d</function>
     </funcdef>
     <paramdef>XXX</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.pixmap_create_from_xpm">
   <funcsynopsis>
    <funcprototype>
     <funcdef><classname>array</classname> 
      <function>gdk::pixmap_create_from_xpm</function>
     </funcdef>
     <paramdef><classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef><classname>GdkColor</classname> 
      <parameter>transparent_color</parameter>
     </paramdef>
     <paramdef>string <parameter>filename</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Создаёт <classname>GdkPixmap</classname> из .xpm файла.
   </shortdesc>
   <desc>
    <simpara>
     <function>gdk::pixmap_create_from_xpm</function> возвращает массив
     состоящи из <classname>GdkPixmap</classname> и
     <classname>GdkBitmap</classname> маски, которые создаются из
     указанного .xpm файла.
    </simpara>
    <para>
     <classname>GdkPixmap</classname> это основная 
     структура, которая содержит изображение, готовое к отображению в 
     <classname>GtkPixmap</classname>.  Для отображения вашего изображения на экране
     вам будет необходимо использовать одну их следующих конструкций:
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php

$gdkpixmap = gdk::pixmap_create_from_xpm($main_window->window, null, 
'test.xpm');
$image = &new GtkPixmap($gdkpixmap[0], $gdkpixmap[1]);

?>
]]>
      </programlisting>
     </informalexample>
     or 
     <informalexample>
      <programlisting role="php">
<![CDATA[

<?php
list ($gdkpixmap, $mask) = 
gdk::pixmap_create_from_xpm($gdkwindow, $transparent_color, 'test.xpm');
$image = &new GtkPixmap($gdkpixmap, $mask);

?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     <parameter>transparent_color</parameter> определяет какой цвет
     <literal>None</literal> пиксели получат, если не использовать
     pixmask.
    </simpara>
    <simpara>
     Для подробностей и примеров, смотрите <link linkend="tutorials.pixmaps">руководство</link>.
    </simpara>
   </desc>
  </method>

  <method id="gdk.method.pixmap_create_from_xpm_d">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>array</classname> 
      <function>gdk::pixmap_create_from_xpm_d</function>
     </funcdef>
     <paramdef><classname>GdkWindow</classname> 
      <parameter>window</parameter>
     </paramdef>
     <paramdef><classname>GdkColor</classname> 
      <parameter>transparent_color</parameter>
     </paramdef>
     <paramdef>array <parameter>data</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Создаёт <classname>GdkPixmap</classname> из массива данных.
   </shortdesc>
   <desc>
    <simpara>
     <function>gdk::pixmap_create_from_xpm</function> возвращает массив,
     состояший из <classname>GdkPixmap</classname> и
     <classname>GdkBitmap</classname> маски, которые создаются
     из переданных данных.
    </simpara>
    <simpara>
     Массив должен иметь структуру, как "обычеый" C-массив
     в xpm файле.
    </simpara>
    <simpara>
     <literal>
      $gdkpixmap = 
      gdk::pixmap_create_from_xpm_d($main_window->window, 
      $transparent_color, $data);
     </literal>
     <!-- No I am NOT going to leave it like this..   sf mar 02 -->
    </simpara>
    <simpara>
     <parameter>transparent_color</parameter> определяет какой цвет
     <literal>None</literal> пиксели получат, если не использовать
     pixmask.
    </simpara>
    <simpara>
     Для больших подробностей и примеров, смотрите <link linkend="tutorials.pixmaps">руководство</link>.
    </simpara>
   </desc>
  </method>

  <method id="gdk.method.pointer_is_grabbed">
   <funcsynopsis>
    <funcprototype>
     <funcdef>bool <function>gdk::pointer_is_grabbed</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.rgb_gc_set_background">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::rgb_gc_set_background</function></funcdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>int <parameter>rgb</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.rgb_gc_set_foreground">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::rgb_gc_set_foreground</function></funcdef>
     <paramdef>
      <classname>GdkGC</classname> 
      <parameter>gc</parameter>
     </paramdef>
     <paramdef>int <parameter>rgb</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.rgb_get_cmap">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkColormap</classname> 
      <function>gdk::rgb_get_cmap</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.rgb_get_visual">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkVisual</classname> 
      <function>gdk::rgb_get_visual</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.rgb_xpixel_from_rgb">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>gdk::rgb_xpixel_from_rgb</function></funcdef>
     <paramdef>int <parameter>rgb</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.screen_height">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>gdk::screen_height</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Возвращает высоту экрана в пикселях.
   </shortdesc>
   <desc>
    <simpara>
     Данная функция возвращает высоту экрана в пикселях. Может быть использована
     в методах, устанавливающих размеры, для того, чтобы размеры контейнеров 
     соответствовали разрешению экрана.
    </simpara>
   </desc>
  </method>

  <method id="gdk.method.screen_height_mm">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>gdk::screen_height_mm</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Возвращает высоту экрана в миллиметрах.
   </shortdesc>
   <desc>
    <simpara>
     Данная функция возвращает высоту экрана в миллиметрах. Может быть использована
     в методах, устанавливающих размеры, для того, чтобы размеры контейнеров 
     соответствовали разрешению экрана.
    </simpara>
   </desc>
  </method>

  <method id="gdk.method.screen_width">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>gdk::screen_width</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Возвращает ширину экрана в пикселях.
   </shortdesc>
   <desc>
    <simpara>
     Данная функция возвращает ширину экрана в пикселях. Может быть использована
     в методах, устанавливающих размеры, для того, чтобы размеры контейнеров 
     соответствовали разрешению экрана.
    </simpara>
   </desc>
  </method>

  <method id="gdk.method.screen_width_mm">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>gdk::screen_width_mm</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Возвращает ширину экрана в миллиметрах.
   </shortdesc>
   <desc>
    <simpara>
     Данная функция возвращает ширину экрана в миллиметрах. Может быть использована
     в методах, устанавливающих размеры, для того, чтобы размеры контейнеров 
     соответствовали разрешению экрана.
    </simpara>
   </desc>
  </method>

  <method id="gdk.method.threads_enter">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::threads_enter</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.threads_leave">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>gdk::threads_leave</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.visual_get_best">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkVisual</classname> 
      <function>gdk::visual_get_best</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.visual_get_best_with_both">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkVisual</classname> 
      <function>gdk::visual_get_best_with_both</function>
     </funcdef>
     <paramdef>int <parameter>depth</parameter></paramdef>
     <paramdef>
      <enumname>GdkVisualType</enumname> 
      <parameter>visual_type</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.visual_get_best_with_depth">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkVisual</classname> 
      <function>gdk::visual_get_best_with_depth</function>
     </funcdef>
     <paramdef>int <parameter>depth</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.visual_get_best_with_type">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkVisual</classname> 
      <function>gdk::visual_get_best_with_type</function>
     </funcdef>
     <paramdef>
      <enumname>GdkVisualType</enumname> 
      <parameter>visual_type</parameter>
     </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>

   </shortdesc>
   <desc>

   </desc>
  </method>

  <method id="gdk.method.visual_get_system">
   <funcsynopsis>
    <funcprototype>
     <funcdef>
      <classname>GdkVisual</classname> 
      <function>gdk::visual_get_system</function>
     </funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Возвращает  system visual.
   </shortdesc>
   <desc>
    <simpara>
     Данная функция возвращает <classname>GdkVisual</classname>, используемый в даннй момент системой.
    </simpara>
   </desc>
  </method>

</refentry>
